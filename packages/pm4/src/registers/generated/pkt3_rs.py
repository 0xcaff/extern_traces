import math
from shared import unique

from regdb import load
from mako.template import Template

overrides = {
    'CONTROL__DST_SEL': 4,
}

type_overrides = {
    'RELEASE_MEM_OP:EVENT_TYPE': 'crate::VGT_EVENT_TYPE'
}

template = """
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

//! ⚠️ Generated by pkt3_rs.py. Edits will not be retained.

use strum::FromRepr;
use bits::{Bits, FromBits};
use bits_macros::FromBits;

% for (name, entries) in enums:
#[repr(u64)]
#[derive(Clone, FromRepr, Debug)]
pub enum ${name} {
% for entry in entries.entries:
    ${to_rust_name(entry.name)} = ${entry.value},
% endfor
}

impl FromBits<${ceil(log2(1 + max(map(lambda it: it.value, entries.entries))))}> for ${name} {
    fn from_bits(value: impl Bits) -> Self {
        Self::from_repr(value.full()).unwrap()
    }
}

% if name in overrides:
impl FromBits<${overrides[name]}> for ${name} {
    fn from_bits(value: impl Bits) -> Self {
        Self::from_repr(value.full()).unwrap()
    }
}

% endif
% endfor

% for (name, fields) in types:
#[allow(dead_code)]
#[derive(Debug, Clone, FromBits)]
#[bits(32)]
pub struct ${name} {
% for field in unique(fields.fields, lambda it: it.name):
    #[bits(${field.bits[1]}, ${field.bits[0]})]
    pub ${field.name}: ${type_overrides.get(name + ':' + field.name, (
        field.enum_ref if hasattr(field, 'enum_ref') else
        "bool" if ((field.bits[1] - field.bits[0]) + 1 == 1) else
        "u16" if ((field.bits[1] - field.bits[0]) + 1 == 16) else
        "u32" if ((field.bits[1] - field.bits[0]) + 1 == 32) else
        "u64"
    ))},
% endfor
}
% endfor
"""



def to_rust_name(key: str) -> str:
    if key[:1].isdigit():
        return "PREFIX_" + key

    return key


if __name__ == '__main__':
    regdb = load(['pkt3.json'])

    types = ['DMA_DATA_WORD0_cik', 'COMMAND', 'RELEASE_MEM_OP']

    types = [(name, type) for (name, type) in regdb.register_types() if name in types]
    enum_refs = [field.enum_ref for (name, type) in types for field in type.fields if hasattr(field, 'enum_ref')]
    enums = filter(lambda field: field[0] in enum_refs, regdb.enums())

    rendered = Template(template).render(
        enums=enums,
        types=types,
        unique=unique,
        ceil=math.ceil,
        log2=math.log2,
        overrides=overrides,
        to_rust_name=to_rust_name,
        type_overrides=type_overrides,
    )

    with open('pkt3.rs', 'w') as file:
        file.write(rendered)
