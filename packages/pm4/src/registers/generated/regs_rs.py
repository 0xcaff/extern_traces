import math
from itertools import filterfalse
from shared import unique

from regdb import load
from mako.template import Template

overrides = {
    "SPI_SHADER_FORMAT": 4,
    "VGT_TESS_TOPOLOGY": 3,
    "VGT_GS_OUTPRIM_TYPE": 6,
    "CP_PERFMON_STATE": 4,
    "SPM_PERFMON_STATE": 4,
    "PA_SU_SC_MODE_CNTL__POLY_MODE": 2,
    "PA_SU_SC_MODE_CNTL__POLYMODE_FRONT_PTYPE": 3,
    "VGT_INDEX_TYPE_MODE": 2,
    "VGT_DI_MAJOR_MODE_SELECT": 2,
    "VGT_DI_PRIM_TYPE": 6,
    "VGT_TESS_PARTITION": 3,
}

# todo: remove these
ignored = [
    "EXCP_EN",
    "VS_EN",
    "GS_EN",
    "ES_EN",
    "LS_EN",
    "CLIP_RULE",
]

template = """
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]

//! ⚠️ Generated by regs_rs.py. Edits will not be retained.

use strum::FromRepr;
use bits_macros::{TryFromBitsContainer};
use bits::{Bits, TryFromBits};
use pm4_internal_macros::ParseRegisterEntry;
use crate::intermediate::build::Marker;

#[repr(u64)]
#[derive(FromRepr, Debug)]
pub enum Register {
% for register_mapping in regdb.register_mappings():
    ${register_mapping.name} = ${hex(register_mapping.map.at)},
% endfor
}

% for (name, entries) in regdb.enums():
#[repr(u64)]
#[derive(Clone, FromRepr, Debug)]
pub enum ${name} {
% for entry in entries.entries:
    ${entry.name} = ${entry.value},
% endfor
}

impl TryFromBits<${ceil(log2(1 + max(map(lambda it: it.value, entries.entries))))}> for ${name} {
    fn try_from_bits(value: impl Bits) -> Option<Self> {
        Self::from_repr(value.full())
    }
}

% if name in overrides:
impl TryFromBits<${overrides[name]}> for ${name} {
    fn try_from_bits(value: impl Bits) -> Option<Self> {
        Self::from_repr(value.full())
    }
}

% endif

% endfor

% for (name, fields) in regdb.register_types():
#[allow(dead_code)]
#[derive(Debug, Clone, TryFromBitsContainer)]
#[bits(32)]
pub struct ${name} {
% for field in unique(fields.fields, lambda it: it.name):
    % if field.name not in ignored:
    #[bits(${field.bits[1]}, ${field.bits[0]})]
    pub ${field.name}: ${(
        field.enum_ref if hasattr(field, 'enum_ref') else
        "bool" if ((field.bits[1] - field.bits[0]) + 1 == 1) else
        "u16" if ((field.bits[1] - field.bits[0]) + 1 == 16) else
        "u32" if ((field.bits[1] - field.bits[0]) + 1 == 32) else
        "u64"
    )},
    % endif
% endfor
}

impl Marker for ${name} {
}

% endfor

#[derive(ParseRegisterEntry, Debug)]
pub enum RegisterEntry {
% for register_mapping in regdb.register_mappings():
    #[register(Register::${register_mapping.name})]
    ${register_mapping.name}(${register_mapping.type_ref if hasattr(register_mapping, 'type_ref') else "u32"}),

% endfor
}

"""

if __name__ == '__main__':
    regdb = load(['gfx7.json'])

    rendered = Template(template).render(
        regdb=regdb,
        unique=unique,
        ceil=math.ceil,
        log2=math.log2,
        ignored=ignored,
        overrides=overrides,
    )

    with open('regs.rs', 'w') as file:
        file.write(rendered)
