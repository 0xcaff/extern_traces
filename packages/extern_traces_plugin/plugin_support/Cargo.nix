# This file was @generated by crate2nix 0.14.1 with the command:
#   "generate"
# See https://github.com/kolloch/crate2nix for more info.

{
  nixpkgs ? <nixpkgs>,
  pkgs ? import nixpkgs { config = { }; },
  fetchurl ? pkgs.fetchurl,
  lib ? pkgs.lib,
  stdenv ? pkgs.stdenv,
  buildRustCrateForPkgs ? pkgs: pkgs.buildRustCrate,
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
  defaultCrateOverrides ? pkgs.defaultCrateOverrides,
  # The features to enable for the root_crate or the workspace_members.
  rootFeatures ? [ "default" ],
  # If true, throw errors instead of issueing deprecation warnings.
  strictDeprecation ? false,
  # Elements to add to the `-C target-feature=` argument passed to `rustc`
  # (separated by `,`, prefixed with `+`).
  # Used for conditional compilation based on CPU feature detection.
  targetFeatures ? [ ],
  # Whether to perform release builds: longer compile times, faster binaries.
  release ? true,
  # Additional crate2nix configuration if it exists.
  crateConfig ?
    if builtins.pathExists ./crate-config.nix then pkgs.callPackage ./crate-config.nix { } else { },
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  rootCrate = rec {
    packageId = "plugin_support";

    # Use this attribute to refer to the derivation building your root crate package.
    # You can override the features with rootCrate.build.override { features = [ "default" "feature1" ... ]; }.
    build = internal.buildRustCrateWithFeatures {
      inherit packageId;
    };

    # Debug support which might change between releases.
    # File a bug if you depend on any for non-debug work!
    debug = internal.debugCrate { inherit packageId; };
  };
  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "plugin_support" = rec {
      packageId = "plugin_support";
      build = internal.buildRustCrateWithFeatures {
        packageId = "plugin_support";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  # A derivation that joins the outputs of all workspace members together.
  allWorkspaceMembers = pkgs.symlinkJoin {
    name = "all-workspace-members";
    paths =
      let
        members = builtins.attrValues workspaceMembers;
      in
      builtins.map (m: m.build) members;
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "anyhow" = rec {
        crateName = "anyhow";
        version = "1.0.89";
        edition = "2018";
        sha256 = "1xh1vg89n56h6nqikcmgbpmkixjds33492klrp9m96xrbmhgizc6";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "default" = [ "std" ];
        };
      };
      "bits" = rec {
        crateName = "bits";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ../../bits;
        };
        dependencies = [
          {
            name = "snafu";
            packageId = "snafu";
            usesDefaultFeatures = false;
          }
        ];

      };
      "bits_macros" = rec {
        crateName = "bits_macros";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ../../bits_macros;
        };
        procMacro = true;
        dependencies = [
          {
            name = "macro_utils";
            packageId = "macro_utils";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [
              "full"
              "extra-traits"
            ];
          }
        ];

      };
      "bytemuck" = rec {
        crateName = "bytemuck";
        version = "1.18.0";
        edition = "2018";
        sha256 = "1bp2s9wn0gjsaygv21nsbfpf854vl897ll6sqpfn3naaannv1fwl";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytemuck_derive";
            packageId = "bytemuck_derive";
            optional = true;
          }
        ];
        features = {
          "bytemuck_derive" = [ "dep:bytemuck_derive" ];
          "derive" = [ "bytemuck_derive" ];
          "extern_crate_std" = [ "extern_crate_alloc" ];
          "latest_stable_rust" = [
            "aarch64_simd"
            "align_offset"
            "const_zeroed"
            "derive"
            "min_const_generics"
            "must_cast"
            "wasm_simd"
            "zeroable_atomics"
            "zeroable_maybe_uninit"
          ];
        };
        resolvedDefaultFeatures = [
          "bytemuck_derive"
          "derive"
        ];
      };
      "bytemuck_derive" = rec {
        crateName = "bytemuck_derive";
        version = "1.7.1";
        edition = "2018";
        sha256 = "09mw7fn6ij6y25c7gsxx0m6xji7lqw0ppi4h7nxwybsz755vbj0c";
        procMacro = true;
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];

      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.5.0";
        edition = "2021";
        sha256 = "0jzncxyf404mwqdbspihyzpkndfgda450l0893pz5xj685cg5l0z";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "custom_debug" = rec {
        crateName = "custom_debug";
        version = "0.6.1";
        edition = "2021";
        sha256 = "0mnj2k1k1mjg34f2zcyyiqp205fjkpim5h3nf2f90gjh1szibrql";
        authors = [
          "panicbit <panicbit.dev@gmail.com>"
        ];
        dependencies = [
          {
            name = "custom_debug_derive";
            packageId = "custom_debug_derive";
          }
        ];

      };
      "custom_debug_derive" = rec {
        crateName = "custom_debug_derive";
        version = "0.6.1";
        edition = "2021";
        sha256 = "0sagiyiw5h0yi0wmc8dgqyrk4xy9zb0mwinbagi10ff7745l8cgp";
        procMacro = true;
        authors = [
          "panicbit <panicbit.dev@gmail.com>"
        ];
        dependencies = [
          {
            name = "darling";
            packageId = "darling";
          }
          {
            name = "itertools";
            packageId = "itertools";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];

      };
      "darling" = rec {
        crateName = "darling";
        version = "0.20.10";
        edition = "2021";
        sha256 = "1299h2z88qn71mizhh05j26yr3ik0wnqmw11ijds89l8i9nbhqvg";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core";
          }
          {
            name = "darling_macro";
            packageId = "darling_macro";
          }
        ];
        features = {
          "default" = [ "suggestions" ];
          "diagnostics" = [ "darling_core/diagnostics" ];
          "suggestions" = [ "darling_core/suggestions" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "suggestions"
        ];
      };
      "darling_core" = rec {
        crateName = "darling_core";
        version = "0.20.10";
        edition = "2021";
        sha256 = "1rgr9nci61ahnim93yh3xy6fkfayh7sk4447hahawah3m1hkh4wm";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "ident_case";
            packageId = "ident_case";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "strsim";
            packageId = "strsim";
            optional = true;
          }
          {
            name = "syn";
            packageId = "syn";
            features = [
              "full"
              "extra-traits"
            ];
          }
        ];
        features = {
          "strsim" = [ "dep:strsim" ];
          "suggestions" = [ "strsim" ];
        };
        resolvedDefaultFeatures = [
          "strsim"
          "suggestions"
        ];
      };
      "darling_macro" = rec {
        crateName = "darling_macro";
        version = "0.20.10";
        edition = "2021";
        sha256 = "01kq3ibbn47czijj39h3vxyw0c2ksd0jvc097smcrk7n2jjs4dnk";
        procMacro = true;
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
          }
        ];

      };
      "either" = rec {
        crateName = "either";
        version = "1.13.0";
        edition = "2018";
        sha256 = "1w2c1mybrd7vljyxk77y9f4w9dyjrmp3yp82mk7bcm8848fazcb0";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "use_std" ];
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.7";
        edition = "2015";
        sha256 = "1hc2mcqha06aibcaza94vbi81j6pr9a1bbxrxjfhc91zin8yr7iz";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "gcn" = rec {
        crateName = "gcn";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ../../gcn;
        };
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            usesDefaultFeatures = false;
          }
          {
            name = "bits";
            packageId = "bits";
          }
          {
            name = "bits_macros";
            packageId = "bits_macros";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "gcn_internal_macros";
            packageId = "gcn_internal_macros";
          }
          {
            name = "snafu";
            packageId = "snafu";
            usesDefaultFeatures = false;
            features = [ "rust_1_81" ];
          }
          {
            name = "strum";
            packageId = "strum 0.25.0";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];

      };
      "gcn_extract" = rec {
        crateName = "gcn_extract";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ../../gcn_extract;
        };
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            usesDefaultFeatures = false;
          }
          {
            name = "bits";
            packageId = "bits";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "gcn";
            packageId = "gcn";
          }
        ];

      };
      "gcn_internal_macros" = rec {
        crateName = "gcn_internal_macros";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ../../gcn_internal_macros;
        };
        procMacro = true;
        dependencies = [
          {
            name = "macro_utils";
            packageId = "macro_utils";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [
              "full"
              "extra-traits"
            ];
          }
        ];

      };
      "heck 0.4.1" = rec {
        crateName = "heck";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1a7mqsnycv5z4z5vnv1k34548jzmc0ajic7c1j8jsaspnhw5ql4m";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        features = {
          "unicode" = [ "unicode-segmentation" ];
          "unicode-segmentation" = [ "dep:unicode-segmentation" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "heck 0.5.0" = rec {
        crateName = "heck";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1sjmpsdl8czyh9ywl3qcsfsq9a307dg4ni2vnlwgnzzqhc4y0113";

      };
      "ident_case" = rec {
        crateName = "ident_case";
        version = "1.0.1";
        edition = "2015";
        sha256 = "0fac21q6pwns8gh1hz3nbq15j8fi441ncl6w4vlnd1cmc55kiq5r";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];

      };
      "itertools" = rec {
        crateName = "itertools";
        version = "0.12.1";
        edition = "2018";
        sha256 = "0s95jbb3ndj1lvfxyq5wanc0fm0r6hg6q4ngb92qlfdxvci10ads";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [
            "use_alloc"
            "either/use_std"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "use_alloc"
          "use_std"
        ];
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.159";
        edition = "2015";
        sha256 = "1i9xpia0hn1y8dws7all8rqng6h3lc8ymlgslnljcvm376jrf7an";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [
            "align"
            "rustc-std-workspace-core"
          ];
          "rustc-std-workspace-core" = [ "dep:rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "macro_utils" = rec {
        crateName = "macro_utils";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ../../macro_utils;
        };
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [
              "full"
              "extra-traits"
            ];
          }
        ];

      };
      "plugin_support" = rec {
        crateName = "plugin_support";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./.;
        };
        type = [ "staticlib" ];
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            usesDefaultFeatures = false;
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" ];
          }
          {
            name = "gcn";
            packageId = "gcn";
          }
          {
            name = "gcn_extract";
            packageId = "gcn_extract";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "pm4";
            packageId = "pm4";
          }
          {
            name = "strum";
            packageId = "strum 0.26.3";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];

      };
      "pm4" = rec {
        crateName = "pm4";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ../../pm4;
        };
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            usesDefaultFeatures = false;
          }
          {
            name = "bits";
            packageId = "bits";
          }
          {
            name = "bits_macros";
            packageId = "bits_macros";
          }
          {
            name = "custom_debug";
            packageId = "custom_debug";
          }
          {
            name = "pm4_internal_macros";
            packageId = "pm4_internal_macros";
          }
          {
            name = "snafu";
            packageId = "snafu";
            usesDefaultFeatures = false;
            features = [ "rust_1_81" ];
          }
          {
            name = "strum";
            packageId = "strum 0.25.0";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];

      };
      "pm4_internal_macros" = rec {
        crateName = "pm4_internal_macros";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ../../pm4_internal_macros;
        };
        procMacro = true;
        dependencies = [
          {
            name = "macro_utils";
            packageId = "macro_utils";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [
              "full"
              "extra-traits"
            ];
          }
        ];

      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.86";
        edition = "2021";
        sha256 = "0xrv22p8lqlfdf1w0pj4si8n2ws4aw0kilmziwf0vpv5ys6rwway";
        libName = "proc_macro2";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "proc-macro"
        ];
      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.37";
        edition = "2018";
        sha256 = "1brklraw2g34bxy9y4q1nbrccn7bv36ylihv12c9vlcii55x7fdm";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "proc-macro"
        ];
      };
      "rustversion" = rec {
        crateName = "rustversion";
        version = "1.0.17";
        edition = "2018";
        sha256 = "1mm3fckyvb0l2209in1n2k05sws5d9mpkszbnwhq3pkq8apjhpcm";
        procMacro = true;
        build = "build/build.rs";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "snafu" = rec {
        crateName = "snafu";
        version = "0.8.5";
        edition = "2018";
        sha256 = "06ahz9g4f6475rspfcay8512x776wpxc205rizzc6a9abv492f12";
        authors = [
          "Jake Goulding <jake.goulding@gmail.com>"
        ];
        dependencies = [
          {
            name = "snafu-derive";
            packageId = "snafu-derive";
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "backtraces-impl-backtrace-crate" = [ "backtrace" ];
          "default" = [
            "std"
            "rust_1_65"
          ];
          "futures" = [
            "futures-core-crate"
            "pin-project"
          ];
          "futures-core-crate" = [ "dep:futures-core-crate" ];
          "futures-crate" = [ "dep:futures-crate" ];
          "internal-dev-dependencies" = [ "futures-crate" ];
          "pin-project" = [ "dep:pin-project" ];
          "rust_1_61" = [ "snafu-derive/rust_1_61" ];
          "rust_1_65" = [ "rust_1_61" ];
          "rust_1_81" = [ "rust_1_65" ];
          "unstable-provider-api" = [ "snafu-derive/unstable-provider-api" ];
        };
        resolvedDefaultFeatures = [
          "rust_1_61"
          "rust_1_65"
          "rust_1_81"
        ];
      };
      "snafu-derive" = rec {
        crateName = "snafu-derive";
        version = "0.8.5";
        edition = "2018";
        sha256 = "05zr38bcngn8ha4mfi7lr2pqqfysjhwhxvk9lz57xzkzjavwdhq3";
        procMacro = true;
        libName = "snafu_derive";
        authors = [
          "Jake Goulding <jake.goulding@gmail.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [ "full" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "rust_1_61" ];
      };
      "strsim" = rec {
        crateName = "strsim";
        version = "0.11.1";
        edition = "2015";
        sha256 = "0kzvqlw8hxqb7y598w1s0hxlnmi84sg5vsipp3yg5na5d1rvba3x";
        authors = [
          "Danny Guo <danny@dannyguo.com>"
          "maxbachmann <oss@maxbachmann.de>"
        ];

      };
      "strum 0.25.0" = rec {
        crateName = "strum";
        version = "0.25.0";
        edition = "2018";
        sha256 = "09g1q55ms8vax1z0mxlbva3vm8n2r1179kfvbccnkjcidzm58399";
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros 0.25.3";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros 0.25.3";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "strum_macros" ];
          "phf" = [ "dep:phf" ];
          "strum_macros" = [ "dep:strum_macros" ];
        };
        resolvedDefaultFeatures = [
          "derive"
          "strum_macros"
        ];
      };
      "strum 0.26.3" = rec {
        crateName = "strum";
        version = "0.26.3";
        edition = "2018";
        sha256 = "01lgl6jvrf4j28v5kmx9bp480ygf1nhvac8b4p7rcj9hxw50zv4g";
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros 0.26.4";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros 0.26.4";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "strum_macros" ];
          "phf" = [ "dep:phf" ];
          "strum_macros" = [ "dep:strum_macros" ];
        };
        resolvedDefaultFeatures = [
          "derive"
          "strum_macros"
        ];
      };
      "strum_macros 0.25.3" = rec {
        crateName = "strum_macros";
        version = "0.25.3";
        edition = "2018";
        sha256 = "184y62g474zqb2f7n16x3ghvlyjbh50viw32p9w9l5lwmjlizp13";
        procMacro = true;
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.4.1";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [
              "parsing"
              "extra-traits"
            ];
          }
        ];

      };
      "strum_macros 0.26.4" = rec {
        crateName = "strum_macros";
        version = "0.26.4";
        edition = "2018";
        sha256 = "1gl1wmq24b8md527cpyd5bw9rkbqldd7k1h38kf5ajd2ln2ywssc";
        procMacro = true;
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "syn";
            packageId = "syn";
            features = [
              "parsing"
              "extra-traits"
            ];
          }
        ];

      };
      "syn" = rec {
        crateName = "syn";
        version = "2.0.79";
        edition = "2021";
        sha256 = "147mk4sgigmvsb9l8qzj199ygf0fgb0bphwdsghn8205pz82q4w9";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [
            "derive"
            "parsing"
            "printing"
            "clone-impls"
            "proc-macro"
          ];
          "printing" = [ "dep:quote" ];
          "proc-macro" = [
            "proc-macro2/proc-macro"
            "quote?/proc-macro"
          ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [
          "clone-impls"
          "default"
          "derive"
          "extra-traits"
          "full"
          "parsing"
          "printing"
          "proc-macro"
          "visit"
        ];
      };
      "synstructure" = rec {
        crateName = "synstructure";
        version = "0.13.1";
        edition = "2018";
        sha256 = "0wc9f002ia2zqcbj0q2id5x6n7g1zjqba7qkg2mr0qvvmdk7dby8";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn";
            usesDefaultFeatures = false;
            features = [
              "derive"
              "parsing"
              "printing"
              "clone-impls"
              "visit"
              "extra-traits"
            ];
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [
            "proc-macro2/proc-macro"
            "syn/proc-macro"
            "quote/proc-macro"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "proc-macro"
        ];
      };
      "unicode-ident" = rec {
        crateName = "unicode-ident";
        version = "1.0.13";
        edition = "2018";
        sha256 = "1zm1xylzsdfvm2a5ib9li3g5pp7qnkv4amhspydvgbmd9k6mc6z9";
        libName = "unicode_ident";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
    };

    #
    # crate2nix/default.nix (excerpt start)
    #

    /*
      Target (platform) data for conditional dependencies.
      This corresponds roughly to what buildRustCrate is setting.
    */
    makeDefaultTarget = platform: {
      name = platform.rust.rustcTarget;

      unix = platform.isUnix;
      windows = platform.isWindows;
      fuchsia = true;
      test = false;

      inherit (platform.rust.platform)
        arch
        os
        vendor
        ;
      family = platform.rust.platform.target-family;
      env = "gnu";
      endian = if platform.parsed.cpu.significantByte.name == "littleEndian" then "little" else "big";
      pointer_width = toString platform.parsed.cpu.bits;
      debug_assertions = false;
    };

    registryUrl =
      {
        registries,
        url,
        crate,
        version,
        sha256,
      }:
      let
        dl = registries.${url}.dl;
        tmpl = [
          "{crate}"
          "{version}"
          "{prefix}"
          "{lowerprefix}"
          "{sha256-checksum}"
        ];
      in
      with lib.strings;
      if lib.lists.any (i: hasInfix "{}" dl) tmpl then
        let
          prefix =
            if builtins.stringLength crate == 1 then
              "1"
            else if builtins.stringLength crate == 2 then
              "2"
            else
              "${builtins.substring 0 2 crate}/${builtins.substring 2 (builtins.stringLength crate - 2) crate}";
        in
        builtins.replaceStrings tmpl [
          crate
          version
          prefix
          (lib.strings.toLower prefix)
          sha256
        ]
      else
        "${dl}/${crate}/${version}/download";

    # Filters common temp files and build files.
    # TODO(pkolloch): Substitute with gitignore filter
    sourceFilter =
      name: type:
      let
        baseName = builtins.baseNameOf (builtins.toString name);
      in
      !(
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory"
          && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (type == "symlink" && lib.hasPrefix "result" baseName)

        # Filter out IDE config
        || (type == "directory" && (baseName == ".idea" || baseName == ".vscode"))
        || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

    /*
      Returns a crate which depends on successful test execution
      of crate given as the second argument.

      testCrateFlags: list of flags to pass to the test exectuable
      testInputs: list of packages that should be available during test execution
    */
    crateWithTest =
      {
        crate,
        testCrate,
        testCrateFlags,
        testInputs,
        testPreRun,
        testPostRun,
      }:
      assert builtins.typeOf testCrateFlags == "list";
      assert builtins.typeOf testInputs == "list";
      assert builtins.typeOf testPreRun == "string";
      assert builtins.typeOf testPostRun == "string";
      let
        # override the `crate` so that it will build and execute tests instead of
        # building the actual lib and bin targets We just have to pass `--test`
        # to rustc and it will do the right thing.  We execute the tests and copy
        # their log and the test executables to $out for later inspection.
        test =
          let
            drv = testCrate.override (_: {
              buildTests = true;
            });
            # If the user hasn't set any pre/post commands, we don't want to
            # insert empty lines. This means that any existing users of crate2nix
            # don't get a spurious rebuild unless they set these explicitly.
            testCommand = pkgs.lib.concatStringsSep "\n" (
              pkgs.lib.filter (s: s != "") [
                testPreRun
                "$f $testCrateFlags 2>&1 | tee -a $out"
                testPostRun
              ]
            );
          in
          pkgs.stdenvNoCC.mkDerivation {
            name = "run-tests-${testCrate.name}";

            inherit (crate) src;

            inherit testCrateFlags;

            buildInputs = testInputs;

            buildPhase = ''
              set -e
              export RUST_BACKTRACE=1

              # build outputs
              testRoot=target/debug
              mkdir -p $testRoot

              # executables of the crate
              # we copy to prevent std::env::current_exe() to resolve to a store location
              for i in ${crate}/bin/*; do
                cp "$i" "$testRoot"
              done
              chmod +w -R .

              # test harness executables are suffixed with a hash, like cargo does
              # this allows to prevent name collision with the main
              # executables of the crate
              hash=$(basename $out)
              for file in ${drv}/tests/*; do
                f=$testRoot/$(basename $file)-$hash
                cp $file $f
                ${testCommand}
              done
            '';
          };
      in
      pkgs.runCommand "${crate.name}-linked"
        {
          inherit (crate) outputs crateName;
          passthru = (crate.passthru or { }) // {
            inherit test;
          };
        }
        (
          lib.optionalString (stdenv.buildPlatform.canExecute stdenv.hostPlatform) ''
            echo tested by ${test}
          ''
          + ''
            ${lib.concatMapStringsSep "\n" (output: "ln -s ${crate.${output}} ${"$"}${output}") crate.outputs}
          ''
        );

    # A restricted overridable version of builtRustCratesWithFeatures.
    buildRustCrateWithFeatures =
      {
        packageId,
        features ? rootFeatures,
        crateOverrides ? defaultCrateOverrides,
        buildRustCrateForPkgsFunc ? null,
        runTests ? false,
        testCrateFlags ? [ ],
        testInputs ? [ ],
        # Any command to run immediatelly before a test is executed.
        testPreRun ? "",
        # Any command run immediatelly after a test is executed.
        testPostRun ? "",
      }:
      lib.makeOverridable
        (
          {
            features,
            crateOverrides,
            runTests,
            testCrateFlags,
            testInputs,
            testPreRun,
            testPostRun,
          }:
          let
            buildRustCrateForPkgsFuncOverriden =
              if buildRustCrateForPkgsFunc != null then
                buildRustCrateForPkgsFunc
              else
                (
                  if crateOverrides == pkgs.defaultCrateOverrides then
                    buildRustCrateForPkgs
                  else
                    pkgs:
                    (buildRustCrateForPkgs pkgs).override {
                      defaultCrateOverrides = crateOverrides;
                    }
                );
            builtRustCrates = builtRustCratesWithFeatures {
              inherit packageId features;
              buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
              runTests = false;
            };
            builtTestRustCrates = builtRustCratesWithFeatures {
              inherit packageId features;
              buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
              runTests = true;
            };
            drv = builtRustCrates.crates.${packageId};
            testDrv = builtTestRustCrates.crates.${packageId};
            derivation =
              if runTests then
                crateWithTest {
                  crate = drv;
                  testCrate = testDrv;
                  inherit
                    testCrateFlags
                    testInputs
                    testPreRun
                    testPostRun
                    ;
                }
              else
                drv;
          in
          derivation
        )
        {
          inherit
            features
            crateOverrides
            runTests
            testCrateFlags
            testInputs
            testPreRun
            testPostRun
            ;
        };

    /*
      Returns an attr set with packageId mapped to the result of buildRustCrateForPkgsFunc
      for the corresponding crate.
    */
    builtRustCratesWithFeatures =
      {
        packageId,
        features,
        crateConfigs ? crates,
        buildRustCrateForPkgsFunc,
        runTests,
        makeTarget ? makeDefaultTarget,
      }@args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs (makeTarget stdenv.hostPlatform));
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures (
          args
          // {
            inherit rootPackageId;
            target = makeTarget stdenv.hostPlatform // {
              test = runTests;
            };
          }
        );
        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageIdByPkgs = mkBuiltByPackageIdByPkgs pkgs;
        mkBuiltByPackageIdByPkgs =
          pkgs:
          let
            self = {
              crates = lib.mapAttrs (
                packageId: value: buildByPackageIdForPkgsImpl self pkgs packageId
              ) crateConfigs;
              target = makeTarget pkgs.stdenv.hostPlatform;
              build = mkBuiltByPackageIdByPkgs pkgs.buildPackages;
            };
          in
          self;
        buildByPackageIdForPkgsImpl =
          self: pkgs: packageId:
          let
            features = mergedFeatures."${packageId}" or [ ];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig = builtins.removeAttrs crateConfig' [
              "resolvedDefaultFeatures"
              "devDependencies"
            ];
            devDependencies = lib.optionals (runTests && packageId == rootPackageId) (
              crateConfig'.devDependencies or [ ]
            );
            dependencies = dependencyDerivations {
              inherit features;
              inherit (self) target;
              buildByPackageId =
                depPackageId:
                # proc_macro crates must be compiled for the build architecture
                if crateConfigs.${depPackageId}.procMacro or false then
                  self.build.crates.${depPackageId}
                else
                  self.crates.${depPackageId};
              dependencies = (crateConfig.dependencies or [ ]) ++ devDependencies;
            };
            buildDependencies = dependencyDerivations {
              inherit features;
              inherit (self.build) target;
              buildByPackageId = depPackageId: self.build.crates.${depPackageId};
              dependencies = crateConfig.buildDependencies or [ ];
            };
            dependenciesWithRenames =
              let
                buildDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self) target;
                  dependencies = crateConfig.dependencies or [ ] ++ devDependencies;
                };
                hostDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self.build) target;
                  dependencies = crateConfig.buildDependencies or [ ];
                };
              in
              lib.filter (d: d ? "rename") (hostDeps ++ buildDeps);
            # Crate renames have the form:
            #
            # {
            #    crate_name = [
            #       { version = "1.2.3"; rename = "crate_name01"; }
            #    ];
            #    # ...
            # }
            crateRenames =
              let
                grouped = lib.groupBy (dependency: dependency.name) dependenciesWithRenames;
                versionAndRename =
                  dep:
                  let
                    package = crateConfigs."${dep.packageId}";
                  in
                  {
                    inherit (dep) rename;
                    inherit (package) version;
                  };
              in
              lib.mapAttrs (name: builtins.map versionAndRename) grouped;
          in
          buildRustCrateForPkgsFunc pkgs (
            crateConfig
            // {
              src =
                crateConfig.src or (pkgs.fetchurl rec {
                  name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                  # https://www.pietroalbini.org/blog/downloading-crates-io/
                  # Not rate-limited, CDN URL.
                  url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                  sha256 =
                    assert (lib.assertMsg (crateConfig ? sha256) "Missing sha256 for ${name}");
                    crateConfig.sha256;
                });
              extraRustcOpts =
                lib.lists.optional (targetFeatures != [ ])
                  "-C target-feature=${lib.concatMapStringsSep "," (x: "+${x}") targetFeatures}";
              inherit
                features
                dependencies
                buildDependencies
                crateRenames
                release
                ;
            }
          );
      in
      builtByPackageIdByPkgs;

    # Returns the actual derivations for the given dependencies.
    dependencyDerivations =
      {
        buildByPackageId,
        features,
        dependencies,
        target,
      }:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: buildByPackageId dependency.packageId;
      in
      map depDerivation enabledDependencies;

    /*
      Returns a sanitized version of val with all values substituted that cannot
      be serialized as JSON.
    */
    sanitizeForJson =
      val:
      if builtins.isAttrs val then
        lib.mapAttrs (n: sanitizeForJson) val
      else if builtins.isList val then
        builtins.map sanitizeForJson val
      else if builtins.isFunction val then
        "function"
      else
        val;

    # Returns various tools to debug a crate.
    debugCrate =
      {
        packageId,
        target ? makeDefaultTarget stdenv.hostPlatform,
      }:
      assert (builtins.isString packageId);
      let
        debug = rec {
          # The built tree as passed to buildRustCrate.
          buildTree = buildRustCrateWithFeatures {
            buildRustCrateForPkgsFunc = _: lib.id;
            inherit packageId;
          };
          sanitizedBuildTree = sanitizeForJson buildTree;
          dependencyTree = sanitizeForJson (buildRustCrateWithFeatures {
            buildRustCrateForPkgsFunc = _: crate: {
              "01_crateName" = crate.crateName or false;
              "02_features" = crate.features or [ ];
              "03_dependencies" = crate.dependencies or [ ];
            };
            inherit packageId;
          });
          mergedPackageFeatures = mergePackageFeatures {
            features = rootFeatures;
            inherit packageId target;
          };
          diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
            inherit packageId target;
          };
        };
      in
      {
        internal = debug;
      };

    /*
      Returns differences between cargo default features and crate2nix default
      features.

      This is useful for verifying the feature resolution in crate2nix.
    */
    diffDefaultPackageFeatures =
      {
        crateConfigs ? crates,
        packageId,
        target,
      }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures = prefixValues "crate2nix" (mergePackageFeatures {
          inherit crateConfigs packageId target;
          features = [ "default" ];
        });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) { } [
          mergedFeatures
          configs
        ];
        onlyInCargo = builtins.attrNames (
          lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined
        );
        onlyInCrate2Nix = builtins.attrNames (
          lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined
        );
        differentFeatures = lib.filterAttrs (
          n: v:
          (v ? "crate2nix")
          && (v ? "cargo")
          && (v.crate2nix.features or [ ]) != (v."cargo".resolved_default_features or [ ])
        ) combined;
      in
      builtins.toJSON {
        inherit onlyInCargo onlyInCrate2Nix differentFeatures;
      };

    /*
      Returns an attrset mapping packageId to the list of enabled features.

      If multiple paths to a dependency enable different features, the
      corresponding feature sets are merged. Features in rust are additive.
    */
    mergePackageFeatures =
      {
        crateConfigs ? crates,
        packageId,
        rootPackageId ? packageId,
        features ? rootFeatures,
        dependencyPath ? [ crates.${packageId}.crateName ],
        featuresByPackageId ? { },
        target,
        # Adds devDependencies to the crate with rootPackageId.
        runTests ? false,
        ...
      }@args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or { }) features;
        enabledFeatures = enableFeatures (crateConfig.dependencies or [ ]) expandedFeatures;
        depWithResolvedFeatures =
          dependency:
          let
            inherit (dependency) packageId;
            features = dependencyFeatures enabledFeatures dependency;
          in
          {
            inherit packageId features;
          };
        resolveDependencies =
          cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = enabledFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
          foldOverCache (
            cache:
            { packageId, features }:
            let
              cacheFeatures = cache.${packageId} or [ ];
              combinedFeatures = sortedUnique (cacheFeatures ++ features);
            in
            if cache ? ${packageId} && cache.${packageId} == combinedFeatures then
              cache
            else
              mergePackageFeatures {
                features = combinedFeatures;
                featuresByPackageId = cache;
                inherit
                  crateConfigs
                  packageId
                  target
                  runTests
                  rootPackageId
                  ;
              }
          );
        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [ ];
            combinedFeatures = sortedUnique (cacheFeatures ++ enabledFeatures);
          in
          featuresByPackageId
          // {
            "${packageId}" = combinedFeatures;
          };
        cacheWithDependencies = resolveDependencies cacheWithSelf "dep" (
          crateConfig.dependencies or [ ]
          ++ lib.optionals (runTests && packageId == rootPackageId) (crateConfig.devDependencies or [ ])
        );
        cacheWithAll = resolveDependencies cacheWithDependencies "build" (
          crateConfig.buildDependencies or [ ]
        );
      in
      cacheWithAll;

    # Returns the enabled dependencies given the enabled features.
    filterEnabledDependencies =
      {
        dependencies,
        features,
        target,
      }:
      assert (builtins.isList dependencies);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);

      lib.filter (
        dep:
        let
          targetFunc = dep.target or (features: true);
        in
        targetFunc { inherit features target; }
        && (!(dep.optional or false) || builtins.any (doesFeatureEnableDependency dep) features)
      ) dependencies;

    # Returns whether the given feature should enable the given dependency.
    doesFeatureEnableDependency =
      dependency: feature:
      let
        name = dependency.rename or dependency.name;
        prefix = "${name}/";
        len = builtins.stringLength prefix;
        startsWithPrefix = builtins.substring 0 len feature == prefix;
      in
      feature == name || feature == "dep:" + name || startsWithPrefix;

    /*
      Returns the expanded features for the given inputFeatures by applying the
      rules in featureMap.

      featureMap is an attribute set which maps feature names to lists of further
      feature names to enable in case this feature is selected.
    */
    expandFeatures =
      featureMap: inputFeatures:
      assert (builtins.isAttrs featureMap);
      assert (builtins.isList inputFeatures);
      let
        expandFeaturesNoCycle =
          oldSeen: inputFeatures:
          if inputFeatures != [ ] then
            let
              # The feature we're currently expanding.
              feature = builtins.head inputFeatures;
              # All the features we've seen/expanded so far, including the one
              # we're currently processing.
              seen = oldSeen // {
                ${feature} = 1;
              };
              # Expand the feature but be careful to not re-introduce a feature
              # that we've already seen: this can easily cause a cycle, see issue
              # #209.
              enables = builtins.filter (f: !(seen ? "${f}")) (featureMap."${feature}" or [ ]);
            in
            [ feature ] ++ (expandFeaturesNoCycle seen (builtins.tail inputFeatures ++ enables))
          # No more features left, nothing to expand to.
          else
            [ ];
        outFeatures = expandFeaturesNoCycle { } inputFeatures;
      in
      sortedUnique outFeatures;

    /*
      This function adds optional dependencies as features if they are enabled
      indirectly by dependency features. This function mimics Cargo's behavior
      described in a note at:
      https://doc.rust-lang.org/nightly/cargo/reference/features.html#dependency-features
    */
    enableFeatures =
      dependencies: features:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      let
        additionalFeatures = lib.concatMap (
          dependency:
          assert (builtins.isAttrs dependency);
          let
            enabled = builtins.any (doesFeatureEnableDependency dependency) features;
          in
          if (dependency.optional or false) && enabled then
            [ (dependency.rename or dependency.name) ]
          else
            [ ]
        ) dependencies;
      in
      sortedUnique (features ++ additionalFeatures);

    /*
      Returns the actual features for the given dependency.

      features: The features of the crate that refers this dependency.
    */
    dependencyFeatures =
      features: dependency:
      assert (builtins.isList features);
      assert (builtins.isAttrs dependency);
      let
        defaultOrNil = if dependency.usesDefaultFeatures or true then [ "default" ] else [ ];
        explicitFeatures = dependency.features or [ ];
        additionalDependencyFeatures =
          let
            name = dependency.rename or dependency.name;
            stripPrefixMatch = prefix: s: if lib.hasPrefix prefix s then lib.removePrefix prefix s else null;
            extractFeature =
              feature:
              lib.findFirst (f: f != null) null (
                map (prefix: stripPrefixMatch prefix feature) [
                  (name + "/")
                  (name + "?/")
                ]
              );
            dependencyFeatures = lib.filter (f: f != null) (map extractFeature features);
          in
          dependencyFeatures;
      in
      defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

    # Sorts and removes duplicates from a list of strings.
    sortedUnique =
      features:
      assert (builtins.isList features);
      assert (builtins.all builtins.isString features);
      let
        outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) { } features;
        outFeaturesUnique = builtins.attrNames outFeaturesSet;
      in
      builtins.sort (a: b: a < b) outFeaturesUnique;

    deprecationWarning =
      message: value:
      if strictDeprecation then
        builtins.throw "strictDeprecation enabled, aborting: ${message}"
      else
        builtins.trace message value;

    #
    # crate2nix/default.nix (excerpt end)
    #
  };
}
