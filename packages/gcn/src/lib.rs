#![feature(buf_read_has_data_left)]

mod instructions;
mod reader;

pub use instructions::Instruction;

#[cfg(test)]
mod tests {
    use crate::instructions::Decoder;
    use std::io::Cursor;

    #[test]
    fn test_cube_vertex_shader() {
        let data: [u8; 0x78] = [
            0x00, 0x21, 0x80, 0xBE, 0x00, 0x07, 0x80, 0xC0, 0x7F, 0xC0, 0x8C, 0xBF, 0x08, 0x01,
            0x82, 0xC2, 0x0C, 0x01, 0x84, 0xC2, 0x04, 0x01, 0x86, 0xC2, 0x00, 0x01, 0x80, 0xC2,
            0x71, 0x00, 0x8C, 0xBF, 0x04, 0x0C, 0x0E, 0x10, 0x05, 0x0C, 0x00, 0x10, 0x06, 0x0C,
            0x02, 0x10, 0x07, 0x0C, 0x0C, 0x10, 0x08, 0x0E, 0x0E, 0x06, 0x09, 0x00, 0x00, 0x06,
            0x0A, 0x02, 0x02, 0x06, 0x0B, 0x0C, 0x0C, 0x06, 0x0C, 0x0A, 0x0E, 0x3E, 0x0D, 0x0A,
            0x00, 0x3E, 0x0E, 0x0A, 0x02, 0x3E, 0x0F, 0x0A, 0x0C, 0x3E, 0x00, 0x08, 0x0E, 0x3E,
            0x01, 0x08, 0x00, 0x3E, 0x02, 0x08, 0x02, 0x3E, 0x03, 0x08, 0x0C, 0x3E, 0xCF, 0x08,
            0x00, 0xF8, 0x07, 0x00, 0x01, 0x06, 0x70, 0x3F, 0x8C, 0xBF, 0x03, 0x02, 0x00, 0xF8,
            0x08, 0x09, 0x80, 0x80, 0x00, 0x00, 0x81, 0xBF,
        ];

        insta::assert_snapshot!(test_shader(&data));
    }

    #[test]
    fn test_cube_fragment_shader() {
        let data: [u8; 0x4C] = [
            0x7E, 0x0A, 0xFE, 0xBE, 0x00, 0x01, 0xC4, 0xC0, 0x08, 0x01, 0x80, 0xC0, 0x04, 0x03,
            0xFC, 0xBE, 0x00, 0x00, 0x08, 0xC8, 0x01, 0x00, 0x09, 0xC8, 0x00, 0x01, 0x00, 0xC8,
            0x01, 0x01, 0x01, 0xC8, 0x00, 0x03, 0x06, 0x7E, 0x7F, 0xC0, 0x8C, 0xBF, 0x00, 0x07,
            0x80, 0xF0, 0x02, 0x00, 0x02, 0x00, 0x70, 0x3F, 0x8C, 0xBF, 0x00, 0x03, 0x00, 0x5E,
            0x01, 0x00, 0x5E, 0xD2, 0x02, 0xE5, 0x01, 0x00, 0x0F, 0x1C, 0x00, 0xF8, 0x00, 0x01,
            0x80, 0x80, 0x00, 0x00, 0x81, 0xBF,
        ];

        insta::assert_snapshot!(test_shader(&data));
    }

    fn test_shader(shader_bytes: &[u8]) -> String {
        let cursor = Cursor::new(shader_bytes);
        let mut decoder = Decoder::new(cursor);

        let mut result = vec![];

        loop {
            let instruction = match decoder.decode().unwrap() {
                Some(value) => {
                    result.push(value);
                }
                None => break,
            };
        }

        format!("{:#?}", result)
    }
}
