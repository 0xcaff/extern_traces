---
source: packages/gcn/src/lib.rs
expression: test_shader(&data)
---
[
    Instruction {
        inner: SOP1(
            SOP1Instruction {
                op: s_wqm_b64,
                ssrc0: Destination(
                    ExecLo,
                ),
                sdst: ExecLo,
            },
        ),
    },
    Instruction {
        inner: SMEM(
            SMEMInstruction {
                op: s_load_dwordx8,
                offset: 0,
                imm: true,
                sbase: 0,
                sdst: ScalarGPR(
                    8,
                ),
            },
        ),
    },
    Instruction {
        inner: SMEM(
            SMEMInstruction {
                op: s_load_dwordx4,
                offset: 8,
                imm: true,
                sbase: 0,
                sdst: ScalarGPR(
                    0,
                ),
            },
        ),
    },
    Instruction {
        inner: SOP1(
            SOP1Instruction {
                op: s_mov_b32,
                ssrc0: Destination(
                    ScalarGPR(
                        4,
                    ),
                ),
                sdst: M0,
            },
        ),
    },
    Instruction {
        inner: VINTRP(
            VINTRPInstruction {
                op: v_interp_p1_f32,
                vsrc: VectorGPR {
                    register_idx: 0,
                },
                attrchan: AttrChan(
                    0,
                ),
                attr: Attr(
                    0,
                ),
                vdst: VectorGPR {
                    register_idx: 2,
                },
            },
        ),
    },
    Instruction {
        inner: VINTRP(
            VINTRPInstruction {
                op: v_interp_p2_f32,
                vsrc: VectorGPR {
                    register_idx: 1,
                },
                attrchan: AttrChan(
                    0,
                ),
                attr: Attr(
                    0,
                ),
                vdst: VectorGPR {
                    register_idx: 2,
                },
            },
        ),
    },
    Instruction {
        inner: VINTRP(
            VINTRPInstruction {
                op: v_interp_p1_f32,
                vsrc: VectorGPR {
                    register_idx: 0,
                },
                attrchan: AttrChan(
                    1,
                ),
                attr: Attr(
                    0,
                ),
                vdst: VectorGPR {
                    register_idx: 0,
                },
            },
        ),
    },
    Instruction {
        inner: VINTRP(
            VINTRPInstruction {
                op: v_interp_p2_f32,
                vsrc: VectorGPR {
                    register_idx: 1,
                },
                attrchan: AttrChan(
                    1,
                ),
                attr: Attr(
                    0,
                ),
                vdst: VectorGPR {
                    register_idx: 0,
                },
            },
        ),
    },
    Instruction {
        inner: VOP1(
            VOP1Instruction {
                op: v_mov_b32,
                src0: VectorGPR(
                    VectorGPR {
                        register_idx: 0,
                    },
                ),
                vdst: VectorGPR {
                    register_idx: 3,
                },
            },
        ),
    },
    Instruction {
        inner: SOPP(
            SOPPInstruction {
                op: s_waitcnt,
                simm16: 49279,
            },
        ),
    },
    Instruction {
        inner: MIMG(
            MIMGInstruction {
                op: image_load,
                dmask: DMask(
                    0,
                ),
                unorm: false,
                glc: false,
                da: false,
                r128: false,
                tfe: false,
                lwe: true,
                slc: false,
                vaddr: VectorGPR {
                    register_idx: 0,
                },
                vdata: VectorGPR {
                    register_idx: 7,
                },
            },
        ),
    },
    Instruction {
        inner: SOPP(
            SOPPInstruction {
                op: s_waitcnt,
                simm16: 16240,
            },
        ),
    },
    Instruction {
        inner: VOP2(
            VOP2Instruction {
                op: v_cvt_pkrtz_f16_f32,
                src0: VectorGPR(
                    VectorGPR {
                        register_idx: 0,
                    },
                ),
                vsrc1: VectorGPR {
                    register_idx: 1,
                },
                vdst: VectorGPR {
                    register_idx: 0,
                },
            },
        ),
    },
    Instruction {
        inner: VOP3(
            VOP3Instruction {
                op: VOPC(
                    v_cmp_f_f32,
                ),
                vdst: VectorGPR {
                    register_idx: 2,
                },
                src0: TransformedOperand {
                    operand: Scalar(
                        Destination(
                            ScalarGPR(
                                1,
                            ),
                        ),
                    ),
                    abs: true,
                    neg: true,
                },
                src1: TransformedOperand {
                    operand: VectorGPR(
                        VectorGPR {
                            register_idx: 0,
                        },
                    ),
                    abs: false,
                    neg: true,
                },
                src2: TransformedOperand {
                    operand: Scalar(
                        IntegerConstant(
                            InlineIntegerConstant {
                                value: 151,
                            },
                        ),
                    ),
                    abs: true,
                    neg: false,
                },
                clamp: false,
            },
        ),
    },
    Instruction {
        inner: EXP(
            ExpInstruction {
                en: En(
                    0,
                ),
                tgt: Tgt(
                    16,
                ),
                compr: false,
                done: false,
                vm: false,
                vsrc0: VectorGPR {
                    register_idx: 15,
                },
                vsrc1: VectorGPR {
                    register_idx: 28,
                },
                vsrc2: VectorGPR {
                    register_idx: 0,
                },
                vsrc3: VectorGPR {
                    register_idx: 248,
                },
            },
        ),
    },
    Instruction {
        inner: SOPP(
            SOPPInstruction {
                op: s_endpgm,
                simm16: 0,
            },
        ),
    },
]
