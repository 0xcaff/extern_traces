from aco_opcodes import opcodes, M0, SCC, EXEC, EXEC_LO, VCC
from mako.template import Template
from itertools import groupby

FORMATS = {
    "SOPC": 7,
    "DS": 8,
    "MIMG": 7,
    "MTBUF": 3,
    "MUBUF": 7,
    "SMEM": 5,
    "SOP1": 8,
    "SOP2": 7,
    "SOPK": 5,
    "SOPP": 7,
    "VINTRP": 2,
    "VOP1": 8,
    "VOP2": 6,
    "VOP3": 9,
    "VOPC": 8,
}

template = """
///! ⚠️ Generated by ops_rs.py. Edits will not be retained.

use strum::FromRepr;
use strum::AsRefStr;
use bits::FromBits;
use crate::instructions::instruction_info::{InstructionInfo, OperandInfo};

% for format, format_ops in ops:
#[repr(usize)]
#[allow(non_camel_case_types)]
#[derive(Eq, PartialEq, Clone, Copy, Debug, FromRepr, AsRefStr)]
pub enum ${format}OpCode {
    % for op in format_ops:
    ${op.name} = ${op.opcode_gfx7},
    % endfor
}

% if format in FORMATS:
impl FromBits<${FORMATS[format]}> for ${format}OpCode {
    fn from_bits(value: usize) -> Self {
        Self::from_repr(value).unwrap()
    }
}
%endif

impl ${format}OpCode {
    pub fn instruction_info(&self) -> InstructionInfo {
        match self {
            % for op in format_ops:
            ${format}OpCode::${op.name} => {
                InstructionInfo {
                    definitions: &[${emit_operands(op.definitions)}],
                    operands: &[${emit_operands(op.operands)}],
                }
            },
            % endfor
        }
    }
}
% endfor
"""


def emit_operands(field):
    values = list(map(lambda field: to_operand(field), u32_to_u8s(field)))

    return ", ".join(values)


def u32_to_u8s(value):
    if not 0 <= value <= 0xFFFFFFFF:
        raise ValueError("Value must be a 32-bit unsigned integer")

    return [
        value & 0xFF,
        (value >> 8) & 0xFF,
        (value >> 16) & 0xFF,
        (value >> 24) & 0xFF,
    ]


def to_operand(field):
    if field == 0:
        return "None"
    if field == M0:
        return "Some(OperandInfo::M0)"
    elif field == SCC:
        return "Some(OperandInfo::SCC)"
    elif field == EXEC:
        return "Some(OperandInfo::Exec)"
    elif field == EXEC_LO:
        return "Some(OperandInfo::ExecLo)"
    elif field == VCC:
        return "Some(OperandInfo::Vcc)"
    else:
        return "Some(OperandInfo::Size({}))".format(field)


if __name__ == '__main__':
    ops = list(
        map(
            lambda t: (
                t[0],
                list(sorted(t[1], key=lambda op: op.opcode_gfx7))
            ),
            groupby(
                filter(
                    lambda op: op.opcode_gfx7 >= 0,
                    opcodes.values()
                ),
                lambda op: op.format.name
            )
        )
    )

    rendered = Template(template).render(
        ops=ops,
        FORMATS=FORMATS,
        emit_operands=emit_operands,
    )
    with open('ops.rs', 'w') as file:
        file.write(rendered)
