# This file was @generated by crate2nix 0.14.1 with the command:
#   "generate"
# See https://github.com/kolloch/crate2nix for more info.

{
  nixpkgs ? <nixpkgs>,
  pkgs ? import nixpkgs { config = { }; },
  fetchurl ? pkgs.fetchurl,
  lib ? pkgs.lib,
  stdenv ? pkgs.stdenv,
  buildRustCrateForPkgs ? pkgs: pkgs.buildRustCrate,
  # This is used as the `crateOverrides` argument for `buildRustCrate`.
  defaultCrateOverrides ? pkgs.defaultCrateOverrides,
  # The features to enable for the root_crate or the workspace_members.
  rootFeatures ? [ "default" ],
  # If true, throw errors instead of issueing deprecation warnings.
  strictDeprecation ? false,
  # Elements to add to the `-C target-feature=` argument passed to `rustc`
  # (separated by `,`, prefixed with `+`).
  # Used for conditional compilation based on CPU feature detection.
  targetFeatures ? [ ],
  # Whether to perform release builds: longer compile times, faster binaries.
  release ? true,
  # Additional crate2nix configuration if it exists.
  crateConfig ?
    if builtins.pathExists ./crate-config.nix then pkgs.callPackage ./crate-config.nix { } else { },
}:

rec {
  #
  # "public" attributes that we attempt to keep stable with new versions of crate2nix.
  #

  # Refer your crate build derivation by name here.
  # You can override the features with
  # workspaceMembers."${crateName}".build.override { features = [ "default" "feature1" ... ]; }.
  workspaceMembers = {
    "bits" = rec {
      packageId = "bits";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bits";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "bits_macros" = rec {
      packageId = "bits_macros";
      build = internal.buildRustCrateWithFeatures {
        packageId = "bits_macros";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "extern_traces_viewer" = rec {
      packageId = "extern_traces_viewer";
      build = internal.buildRustCrateWithFeatures {
        packageId = "extern_traces_viewer";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "gcn" = rec {
      packageId = "gcn";
      build = internal.buildRustCrateWithFeatures {
        packageId = "gcn";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "gcn_extract" = rec {
      packageId = "gcn_extract";
      build = internal.buildRustCrateWithFeatures {
        packageId = "gcn_extract";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "gcn_internal_macros" = rec {
      packageId = "gcn_internal_macros";
      build = internal.buildRustCrateWithFeatures {
        packageId = "gcn_internal_macros";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "gcn_spirv" = rec {
      packageId = "gcn_spirv";
      build = internal.buildRustCrateWithFeatures {
        packageId = "gcn_spirv";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "macro_utils" = rec {
      packageId = "macro_utils";
      build = internal.buildRustCrateWithFeatures {
        packageId = "macro_utils";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "pm4" = rec {
      packageId = "pm4";
      build = internal.buildRustCrateWithFeatures {
        packageId = "pm4";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "pm4_internal_macros" = rec {
      packageId = "pm4_internal_macros";
      build = internal.buildRustCrateWithFeatures {
        packageId = "pm4_internal_macros";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "ps4libdoc" = rec {
      packageId = "ps4libdoc";
      build = internal.buildRustCrateWithFeatures {
        packageId = "ps4libdoc";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
    "snapshot_test_utils" = rec {
      packageId = "snapshot_test_utils";
      build = internal.buildRustCrateWithFeatures {
        packageId = "snapshot_test_utils";
      };

      # Debug support which might change between releases.
      # File a bug if you depend on any for non-debug work!
      debug = internal.debugCrate { inherit packageId; };
    };
  };

  # A derivation that joins the outputs of all workspace members together.
  allWorkspaceMembers = pkgs.symlinkJoin {
    name = "all-workspace-members";
    paths =
      let
        members = builtins.attrValues workspaceMembers;
      in
      builtins.map (m: m.build) members;
  };

  #
  # "internal" ("private") attributes that may change in every new version of crate2nix.
  #

  internal = rec {
    # Build and dependency information for crates.
    # Many of the fields are passed one-to-one to buildRustCrate.
    #
    # Noteworthy:
    # * `dependencies`/`buildDependencies`: similar to the corresponding fields for buildRustCrate.
    #   but with additional information which is used during dependency/feature resolution.
    # * `resolvedDependencies`: the selected default features reported by cargo - only included for debugging.
    # * `devDependencies` as of now not used by `buildRustCrate` but used to
    #   inject test dependencies into the build

    crates = {
      "ab_glyph" = rec {
        crateName = "ab_glyph";
        version = "0.2.28";
        edition = "2021";
        sha256 = "1yxd0h0dc0igmfal8b0n6h47l9481wlppg6rk7sk4lpl413axykr";
        authors = [
          "Alex Butler <alexheretic@gmail.com>"
        ];
        dependencies = [
          {
            name = "ab_glyph_rasterizer";
            packageId = "ab_glyph_rasterizer";
            usesDefaultFeatures = false;
          }
          {
            name = "owned_ttf_parser";
            packageId = "owned_ttf_parser";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [
            "std"
            "variable-fonts"
          ];
          "libm" = [
            "dep:libm"
            "ab_glyph_rasterizer/libm"
            "owned_ttf_parser/no-std-float"
          ];
          "std" = [
            "owned_ttf_parser/default"
            "ab_glyph_rasterizer/default"
          ];
          "variable-fonts" = [ "owned_ttf_parser/variable-fonts" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
          "variable-fonts"
        ];
      };
      "ab_glyph_rasterizer" = rec {
        crateName = "ab_glyph_rasterizer";
        version = "0.1.8";
        edition = "2018";
        sha256 = "0ikhgzig59q8b1a1iw83sxfnvylg5gx6w2y8ynbnf231xs9if6y7";
        authors = [
          "Alex Butler <alexheretic@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "libm" = [ "dep:libm" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "accesskit" = rec {
        crateName = "accesskit";
        version = "0.12.3";
        edition = "2021";
        sha256 = "0szw1d6ml049779m55h0l107abhsmchmdx58rdfjbhcr7m7v393l";
        authors = [
          "The AccessKit contributors"
        ];
        dependencies = [
          {
            name = "enumn";
            packageId = "enumn";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        features = {
          "enumn" = [ "dep:enumn" ];
          "pyo3" = [ "dep:pyo3" ];
          "schemars" = [
            "dep:schemars"
            "serde"
          ];
          "serde" = [
            "dep:serde"
            "enumn"
          ];
        };
        resolvedDefaultFeatures = [
          "enumn"
          "serde"
        ];
      };
      "accesskit_consumer" = rec {
        crateName = "accesskit_consumer";
        version = "0.16.1";
        edition = "2021";
        sha256 = "1rj5vsaxn9m5aazr22vzlb5bxfbl28h2mck7hqldgyq97jjwq5wc";
        authors = [
          "Matt Campbell <mattcampbell@pobox.com>"
        ];
        dependencies = [
          {
            name = "accesskit";
            packageId = "accesskit";
          }
        ];

      };
      "accesskit_macos" = rec {
        crateName = "accesskit_macos";
        version = "0.10.1";
        edition = "2021";
        sha256 = "19vpwi1cnyxbjal4ngjb2x7yhfm9x3yd63w41v8wxyxvxbhnlfyd";
        authors = [
          "Matt Campbell <mattcampbell@pobox.com>"
        ];
        dependencies = [
          {
            name = "accesskit";
            packageId = "accesskit";
          }
          {
            name = "accesskit_consumer";
            packageId = "accesskit_consumer";
          }
          {
            name = "objc2";
            packageId = "objc2 0.3.0-beta.3.patch-leaks.3";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];

      };
      "accesskit_unix" = rec {
        crateName = "accesskit_unix";
        version = "0.6.2";
        edition = "2021";
        sha256 = "022a77nm8461v0f6mpzidamkci0h1kmkxl9x2bbim9lvv4c6rx09";
        authors = [
          "Arnold Loubriat <datatriny@gmail.com>"
        ];
        dependencies = [
          {
            name = "accesskit";
            packageId = "accesskit";
          }
          {
            name = "accesskit_consumer";
            packageId = "accesskit_consumer";
          }
          {
            name = "async-channel";
            packageId = "async-channel";
          }
          {
            name = "async-once-cell";
            packageId = "async-once-cell";
          }
          {
            name = "atspi";
            packageId = "atspi";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 1.13.0";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "zbus";
            packageId = "zbus 3.15.2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "async-io" = [
            "atspi/async-std"
            "zbus/async-io"
          ];
          "default" = [ "async-io" ];
          "tokio" = [
            "dep:tokio"
            "atspi/tokio"
            "zbus/tokio"
          ];
        };
        resolvedDefaultFeatures = [ "async-io" ];
      };
      "accesskit_windows" = rec {
        crateName = "accesskit_windows";
        version = "0.15.1";
        edition = "2021";
        sha256 = "02sazww6l5h0wsgif0npdpkb5lczx0xph65kn31wfkwpq1zf5jmg";
        authors = [
          "Matt Campbell <mattcampbell@pobox.com>"
        ];
        dependencies = [
          {
            name = "accesskit";
            packageId = "accesskit";
          }
          {
            name = "accesskit_consumer";
            packageId = "accesskit_consumer";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "paste";
            packageId = "paste";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "windows";
            packageId = "windows 0.48.0";
            features = [
              "implement"
              "Win32_Foundation"
              "Win32_Graphics_Gdi"
              "Win32_System_Com"
              "Win32_System_LibraryLoader"
              "Win32_System_Ole"
              "Win32_UI_Accessibility"
              "Win32_UI_Input_KeyboardAndMouse"
              "Win32_UI_WindowsAndMessaging"
            ];
          }
        ];

      };
      "accesskit_winit" = rec {
        crateName = "accesskit_winit";
        version = "0.16.1";
        edition = "2021";
        sha256 = "0rwaz6mkllcl131b8y4s787gfmdrqzms0a242r8f3n8pra52312j";
        authors = [
          "Matt Campbell <mattcampbell@pobox.com>"
        ];
        dependencies = [
          {
            name = "accesskit";
            packageId = "accesskit";
          }
          {
            name = "accesskit_macos";
            packageId = "accesskit_macos";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "accesskit_unix";
            packageId = "accesskit_unix";
            optional = true;
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                ("linux" == target."os" or null)
                || ("dragonfly" == target."os" or null)
                || ("freebsd" == target."os" or null)
                || ("openbsd" == target."os" or null)
                || ("netbsd" == target."os" or null)
              );
          }
          {
            name = "accesskit_windows";
            packageId = "accesskit_windows";
            target = { target, features }: ("windows" == target."os" or null);
          }
          {
            name = "winit";
            packageId = "winit";
            usesDefaultFeatures = false;
            features = [ "rwh_06" ];
          }
        ];
        devDependencies = [
          {
            name = "winit";
            packageId = "winit";
            usesDefaultFeatures = false;
            features = [
              "rwh_06"
              "x11"
              "wayland"
              "wayland-dlopen"
              "wayland-csd-adwaita"
            ];
          }
        ];
        features = {
          "accesskit_unix" = [ "dep:accesskit_unix" ];
          "async-io" = [ "accesskit_unix/async-io" ];
          "default" = [
            "accesskit_unix"
            "async-io"
          ];
          "tokio" = [ "accesskit_unix/tokio" ];
        };
        resolvedDefaultFeatures = [
          "accesskit_unix"
          "async-io"
          "default"
        ];
      };
      "addr2line" = rec {
        crateName = "addr2line";
        version = "0.24.1";
        edition = "2018";
        crateBin = [ ];
        sha256 = "0xfkfsk45dwps3jq4n5ikk7v15i6g51cpnnivxgl1ga28j71vyzm";
        dependencies = [
          {
            name = "gimli";
            packageId = "gimli";
            usesDefaultFeatures = false;
            features = [ "read" ];
          }
        ];
        features = {
          "all" = [ "bin" ];
          "alloc" = [ "dep:alloc" ];
          "bin" = [
            "loader"
            "rustc-demangle"
            "cpp_demangle"
            "smallvec"
            "dep:clap"
          ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "cpp_demangle" = [ "dep:cpp_demangle" ];
          "default" = [
            "rustc-demangle"
            "cpp_demangle"
            "loader"
            "fallible-iterator"
            "smallvec"
          ];
          "fallible-iterator" = [ "dep:fallible-iterator" ];
          "loader" = [
            "std"
            "dep:object"
            "dep:memmap2"
            "dep:typed-arena"
          ];
          "rustc-demangle" = [ "dep:rustc-demangle" ];
          "rustc-dep-of-std" = [
            "core"
            "alloc"
            "compiler_builtins"
            "gimli/rustc-dep-of-std"
          ];
          "smallvec" = [ "dep:smallvec" ];
          "std" = [ "gimli/std" ];
        };
      };
      "adler2" = rec {
        crateName = "adler2";
        version = "2.0.0";
        edition = "2021";
        sha256 = "09r6drylvgy8vv8k20lnbvwq8gp09h7smfn6h1rxsy15pgh629si";
        authors = [
          "Jonas Schievink <jonasschievink@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [
            "core"
            "compiler_builtins"
          ];
        };
      };
      "ahash" = rec {
        crateName = "ahash";
        version = "0.8.11";
        edition = "2018";
        sha256 = "04chdfkls5xmhp1d48gnjsmglbqibizs3bpbj6rsj604m10si7g8";
        authors = [
          "Tom Kaitchuck <Tom.Kaitchuck@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "getrandom";
            packageId = "getrandom";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            target =
              { target, features }: (!(("arm" == target."arch" or null) && ("none" == target."os" or null)));
            features = [ "alloc" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "zerocopy";
            packageId = "zerocopy";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "atomic-polyfill" = [
            "dep:atomic-polyfill"
            "once_cell/atomic-polyfill"
          ];
          "compile-time-rng" = [ "const-random" ];
          "const-random" = [ "dep:const-random" ];
          "default" = [
            "std"
            "runtime-rng"
          ];
          "getrandom" = [ "dep:getrandom" ];
          "runtime-rng" = [ "getrandom" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "getrandom"
          "no-rng"
          "runtime-rng"
          "serde"
          "std"
        ];
      };
      "aho-corasick" = rec {
        crateName = "aho-corasick";
        version = "1.1.3";
        edition = "2021";
        sha256 = "05mrpkvdgp5d20y2p989f187ry9diliijgwrs254fs9s1m1x6q4f";
        libName = "aho_corasick";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [
            "std"
            "perf-literal"
          ];
          "logging" = [ "dep:log" ];
          "perf-literal" = [ "dep:memchr" ];
          "std" = [ "memchr?/std" ];
        };
        resolvedDefaultFeatures = [
          "perf-literal"
          "std"
        ];
      };
      "allocator-api2" = rec {
        crateName = "allocator-api2";
        version = "0.2.18";
        edition = "2018";
        sha256 = "0kr6lfnxvnj164j1x38g97qjlhb7akppqzvgfs0697140ixbav2w";
        libName = "allocator_api2";
        authors = [
          "Zakarum <zaq.dev@icloud.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [ "alloc" ];
      };
      "android-activity" = rec {
        crateName = "android-activity";
        version = "0.5.2";
        edition = "2021";
        sha256 = "12a2qky6147bvs40iz83fxmz47al6r2h8kps9gw49bjvj31c14gf";
        libName = "android_activity";
        dependencies = [
          {
            name = "android-properties";
            packageId = "android-properties";
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "cesu8";
            packageId = "cesu8";
          }
          {
            name = "jni";
            packageId = "jni";
          }
          {
            name = "jni-sys";
            packageId = "jni-sys";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "ndk";
            packageId = "ndk";
            usesDefaultFeatures = false;
          }
          {
            name = "ndk-context";
            packageId = "ndk-context";
          }
          {
            name = "ndk-sys";
            packageId = "ndk-sys";
          }
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            features = [ "parallel" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "android-properties" = rec {
        crateName = "android-properties";
        version = "0.2.2";
        edition = "2018";
        sha256 = "016slvg269c0y120p9qd8vdfqa2jbw4j0g18gfw6p3ain44v4zpw";
        libName = "android_properties";
        authors = [
          "Mikhail Lappo <mikhail.lappo@esrlabs.com>"
        ];
        features = {
        };
      };
      "android_system_properties" = rec {
        crateName = "android_system_properties";
        version = "0.1.5";
        edition = "2018";
        sha256 = "04b3wrz12837j7mdczqd95b732gw5q7q66cv4yn4646lvccp57l1";
        authors = [
          "Nicolas Silva <nical@fastmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "anstream" = rec {
        crateName = "anstream";
        version = "0.6.15";
        edition = "2021";
        sha256 = "09nm4qj34kiwgzczdvj14x7hgsb235g4sqsay3xsz7zqn4d5rqb4";
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "anstyle-parse";
            packageId = "anstyle-parse";
          }
          {
            name = "anstyle-query";
            packageId = "anstyle-query";
            optional = true;
          }
          {
            name = "anstyle-wincon";
            packageId = "anstyle-wincon";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "colorchoice";
            packageId = "colorchoice";
          }
          {
            name = "is_terminal_polyfill";
            packageId = "is_terminal_polyfill";
          }
          {
            name = "utf8parse";
            packageId = "utf8parse";
          }
        ];
        features = {
          "auto" = [ "dep:anstyle-query" ];
          "default" = [
            "auto"
            "wincon"
          ];
          "wincon" = [ "dep:anstyle-wincon" ];
        };
        resolvedDefaultFeatures = [
          "auto"
          "default"
          "wincon"
        ];
      };
      "anstyle" = rec {
        crateName = "anstyle";
        version = "1.0.8";
        edition = "2021";
        sha256 = "1cfmkza63xpn1kkz844mgjwm9miaiz4jkyczmwxzivcsypk1vv0v";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "anstyle-parse" = rec {
        crateName = "anstyle-parse";
        version = "0.2.5";
        edition = "2021";
        sha256 = "1jy12rvgbldflnb2x7mcww9dcffw1mx22nyv6p3n7d62h0gdwizb";
        libName = "anstyle_parse";
        dependencies = [
          {
            name = "utf8parse";
            packageId = "utf8parse";
            optional = true;
          }
        ];
        features = {
          "core" = [ "dep:arrayvec" ];
          "default" = [ "utf8" ];
          "utf8" = [ "dep:utf8parse" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "utf8"
        ];
      };
      "anstyle-query" = rec {
        crateName = "anstyle-query";
        version = "1.1.1";
        edition = "2021";
        sha256 = "0aj22iy4pzk6mz745sfrm1ym14r0y892jhcrbs8nkj7nqx9gqdkd";
        libName = "anstyle_query";
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_System_Console"
              "Win32_Foundation"
            ];
          }
        ];

      };
      "anstyle-wincon" = rec {
        crateName = "anstyle-wincon";
        version = "3.0.4";
        edition = "2021";
        sha256 = "1y2pkvsrdxbcwircahb4wimans2pzmwwxad7ikdhj5lpdqdlxxsv";
        libName = "anstyle_wincon";
        dependencies = [
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_System_Console"
              "Win32_Foundation"
            ];
          }
        ];

      };
      "anyhow" = rec {
        crateName = "anyhow";
        version = "1.0.89";
        edition = "2018";
        sha256 = "1xh1vg89n56h6nqikcmgbpmkixjds33492klrp9m96xrbmhgizc6";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "backtrace";
            packageId = "backtrace";
            optional = true;
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "backtrace"
          "default"
          "std"
        ];
      };
      "arboard" = rec {
        crateName = "arboard";
        version = "3.4.1";
        edition = "2021";
        sha256 = "1x2p8dfhzm3w0cpw81ab2rbyzvkzqs9g66xcakq4y0fd2v5rq2fz";
        authors = [
          "Artur Kovacs <kovacs.artur.barnabas@gmail.com>"
          "Avi Weinstock <aweinstock314@gmail.com>"
          "Arboard contributors"
        ];
        dependencies = [
          {
            name = "clipboard-win";
            packageId = "clipboard-win";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "log";
            packageId = "log";
            target =
              { target, features }:
              (
                (target."unix" or false)
                && (
                  !(
                    ("macos" == target."os" or null)
                    || ("android" == target."os" or null)
                    || ("emscripten" == target."os" or null)
                  )
                )
              );
          }
          {
            name = "log";
            packageId = "log";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "objc2";
            packageId = "objc2 0.5.2";
            target = { target, features }: ("macos" == target."os" or null);
            features = [ "relax-void-encoding" ];
          }
          {
            name = "objc2-app-kit";
            packageId = "objc2-app-kit";
            target = { target, features }: ("macos" == target."os" or null);
            features = [
              "NSPasteboard"
              "NSPasteboardItem"
              "NSImage"
            ];
          }
          {
            name = "objc2-foundation";
            packageId = "objc2-foundation";
            target = { target, features }: ("macos" == target."os" or null);
            features = [
              "NSArray"
              "NSString"
              "NSEnumerator"
              "NSGeometry"
            ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            target =
              { target, features }:
              (
                (target."unix" or false)
                && (
                  !(
                    ("macos" == target."os" or null)
                    || ("android" == target."os" or null)
                    || ("emscripten" == target."os" or null)
                  )
                )
              );
          }
          {
            name = "x11rb";
            packageId = "x11rb";
            target =
              { target, features }:
              (
                (target."unix" or false)
                && (
                  !(
                    ("macos" == target."os" or null)
                    || ("android" == target."os" or null)
                    || ("emscripten" == target."os" or null)
                  )
                )
              );
          }
        ];
        features = {
          "core-graphics" = [ "dep:core-graphics" ];
          "default" = [ "image-data" ];
          "image" = [ "dep:image" ];
          "image-data" = [
            "core-graphics"
            "image"
            "windows-sys"
          ];
          "wayland-data-control" = [ "wl-clipboard-rs" ];
          "windows-sys" = [ "dep:windows-sys" ];
          "wl-clipboard-rs" = [ "dep:wl-clipboard-rs" ];
        };
      };
      "arrayref" = rec {
        crateName = "arrayref";
        version = "0.3.9";
        edition = "2015";
        sha256 = "1jzyp0nvp10dmahaq9a2rnxqdd5wxgbvp8xaibps3zai8c9fi8kn";
        authors = [
          "David Roundy <roundyd@physics.oregonstate.edu>"
        ];

      };
      "arrayvec" = rec {
        crateName = "arrayvec";
        version = "0.7.6";
        edition = "2018";
        sha256 = "0l1fz4ccgv6pm609rif37sl5nv5k6lbzi7kkppgzqzh1vwix20kw";
        authors = [
          "bluss"
        ];
        features = {
          "borsh" = [ "dep:borsh" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "as-raw-xcb-connection" = rec {
        crateName = "as-raw-xcb-connection";
        version = "1.0.1";
        edition = "2021";
        sha256 = "0sqgpz2ymv5yx76r5j2npjq2x5qvvqnw0vrs35cyv30p3pfp2m8p";
        libName = "as_raw_xcb_connection";
        features = {
          "default" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
        ];
      };
      "ash" = rec {
        crateName = "ash";
        version = "0.37.3+1.3.251";
        edition = "2021";
        sha256 = "0jndbsi5c8xifh4fdp378xpbyzdhs7y38hmbhih0lsv8bn1w7s9r";
        authors = [
          "Maik Klein <maikklein@googlemail.com>"
          "Benjamin Saunders <ben.e.saunders@gmail.com>"
          "Marijn Suijten <marijn@traverseresearch.nl>"
        ];
        dependencies = [
          {
            name = "libloading";
            packageId = "libloading 0.7.4";
            optional = true;
          }
        ];
        features = {
          "default" = [
            "loaded"
            "debug"
          ];
          "libloading" = [ "dep:libloading" ];
          "loaded" = [ "libloading" ];
        };
        resolvedDefaultFeatures = [
          "debug"
          "default"
          "libloading"
          "loaded"
        ];
      };
      "ashpd" = rec {
        crateName = "ashpd";
        version = "0.9.1";
        edition = "2021";
        sha256 = "16mw182s1h0g3ys4qiq0aricrpprkh8zknbf27f039651bfy1rxz";
        authors = [
          "Bilal Elmoussaoui <bil.elmoussaoui@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-fs";
            packageId = "async-fs 2.1.2";
            optional = true;
          }
          {
            name = "async-net";
            packageId = "async-net";
            optional = true;
          }
          {
            name = "enumflags2";
            packageId = "enumflags2";
          }
          {
            name = "futures-channel";
            packageId = "futures-channel";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
          }
          {
            name = "rand";
            packageId = "rand";
            usesDefaultFeatures = false;
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle 0.6.2";
            optional = true;
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_repr";
            packageId = "serde_repr";
          }
          {
            name = "url";
            packageId = "url";
            features = [ "serde" ];
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
            optional = true;
            features = [ "client_system" ];
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            optional = true;
          }
          {
            name = "wayland-protocols";
            packageId = "wayland-protocols 0.32.4";
            optional = true;
            features = [
              "unstable"
              "client"
            ];
          }
          {
            name = "zbus";
            packageId = "zbus 4.4.0";
            usesDefaultFeatures = false;
            features = [ "url" ];
          }
        ];
        features = {
          "async-std" = [
            "zbus/async-io"
            "dep:async-fs"
            "dep:async-net"
          ];
          "default" = [ "async-std" ];
          "gdk4wayland" = [ "dep:gdk4wayland" ];
          "gdk4x11" = [ "dep:gdk4x11" ];
          "glib" = [ "dep:glib" ];
          "gtk4" = [
            "gtk4_x11"
            "gtk4_wayland"
          ];
          "gtk4_wayland" = [
            "gdk4wayland"
            "glib"
            "dep:gtk4"
          ];
          "gtk4_x11" = [
            "gdk4x11"
            "glib"
            "dep:gtk4"
          ];
          "pipewire" = [ "dep:pipewire" ];
          "raw-window-handle" = [ "dep:raw-window-handle" ];
          "raw_handle" = [
            "raw-window-handle"
            "wayland"
          ];
          "tokio" = [
            "zbus/tokio"
            "dep:tokio"
          ];
          "tracing" = [ "dep:tracing" ];
          "wayland" = [
            "wayland-client"
            "wayland-protocols"
            "wayland-backend"
          ];
          "wayland-backend" = [ "dep:wayland-backend" ];
          "wayland-client" = [ "dep:wayland-client" ];
          "wayland-protocols" = [ "dep:wayland-protocols" ];
        };
        resolvedDefaultFeatures = [
          "async-std"
          "raw-window-handle"
          "raw_handle"
          "wayland"
          "wayland-backend"
          "wayland-client"
          "wayland-protocols"
        ];
      };
      "async-broadcast 0.5.1" = rec {
        crateName = "async-broadcast";
        version = "0.5.1";
        edition = "2018";
        sha256 = "0avdqbci1qdlfc4glc3wqrb0wi5ffc7bqv2q1wg14syayvdwqj3w";
        libName = "async_broadcast";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Yoshua Wuyts <yoshuawuyts@gmail.com>"
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "event-listener";
            packageId = "event-listener 2.5.3";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
        ];

      };
      "async-broadcast 0.7.1" = rec {
        crateName = "async-broadcast";
        version = "0.7.1";
        edition = "2018";
        sha256 = "0zia7z1y31awmxma9c89zmvkbj7mdkf7highkmz5z3pa4lp0xk90";
        libName = "async_broadcast";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Yoshua Wuyts <yoshuawuyts@gmail.com>"
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "event-listener";
            packageId = "event-listener 5.3.1";
          }
          {
            name = "event-listener-strategy";
            packageId = "event-listener-strategy";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];

      };
      "async-channel" = rec {
        crateName = "async-channel";
        version = "2.3.1";
        edition = "2021";
        sha256 = "0skvwxj6ysfc6d7bhczz9a2550260g62bm5gl0nmjxxyn007id49";
        libName = "async_channel";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            usesDefaultFeatures = false;
          }
          {
            name = "event-listener-strategy";
            packageId = "event-listener-strategy";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [
            "concurrent-queue/std"
            "event-listener-strategy/std"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "async-executor" = rec {
        crateName = "async-executor";
        version = "1.13.1";
        edition = "2021";
        sha256 = "1v6w1dbvsmw6cs4dk4lxj5dvrikc6xi479wikwaab2qy3h09mjih";
        libName = "async_executor";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "async-task";
            packageId = "async-task";
          }
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
          }
          {
            name = "fastrand";
            packageId = "fastrand 2.1.1";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 2.3.0";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 2.3.0";
            usesDefaultFeatures = false;
            target = { target, features }: (builtins.elem "wasm" target."family");
            features = [ "std" ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
        ];
        devDependencies = [
          {
            name = "fastrand";
            packageId = "fastrand 2.1.1";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 2.3.0";
          }
        ];
        features = {
        };
      };
      "async-fs 1.6.0" = rec {
        crateName = "async-fs";
        version = "1.6.0";
        edition = "2018";
        sha256 = "01if2h77mry9cnm91ql2md595108i2c1bfy9gaivzvjfcl2gk717";
        libName = "async_fs";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-lock";
            packageId = "async-lock 2.8.0";
          }
          {
            name = "blocking";
            packageId = "blocking";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 1.13.0";
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];

      };
      "async-fs 2.1.2" = rec {
        crateName = "async-fs";
        version = "2.1.2";
        edition = "2018";
        sha256 = "0jp0p7lg9zqy2djgdmivbzx0yqmfn9sm2s9dkhaws3zlharhkkgb";
        libName = "async_fs";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-lock";
            packageId = "async-lock 3.4.0";
          }
          {
            name = "blocking";
            packageId = "blocking";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 2.3.0";
          }
        ];

      };
      "async-io 1.13.0" = rec {
        crateName = "async-io";
        version = "1.13.0";
        edition = "2018";
        sha256 = "1byj7lpw0ahk6k63sbc9859v68f28hpaab41dxsjj1ggjdfv9i8g";
        libName = "async_io";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-lock";
            packageId = "async-lock 2.8.0";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 1.13.0";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parking";
            packageId = "parking";
          }
          {
            name = "polling";
            packageId = "polling 2.8.0";
          }
          {
            name = "rustix";
            packageId = "rustix 0.37.27";
            usesDefaultFeatures = false;
            features = [
              "std"
              "fs"
            ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "socket2";
            packageId = "socket2";
            features = [ "all" ];
          }
          {
            name = "waker-fn";
            packageId = "waker-fn";
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];

      };
      "async-io 2.3.4" = rec {
        crateName = "async-io";
        version = "2.3.4";
        edition = "2021";
        sha256 = "1s679l7x6ijh8zcxqn5pqgdiyshpy4xwklv86ldm1rhfjll04js4";
        libName = "async_io";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-lock";
            packageId = "async-lock 3.4.0";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 2.3.0";
            usesDefaultFeatures = false;
          }
          {
            name = "parking";
            packageId = "parking";
          }
          {
            name = "polling";
            packageId = "polling 3.7.3";
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.37";
            usesDefaultFeatures = false;
            features = [
              "fs"
              "net"
              "std"
            ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Foundation" ];
          }
        ];

      };
      "async-lock 2.8.0" = rec {
        crateName = "async-lock";
        version = "2.8.0";
        edition = "2018";
        sha256 = "0asq5xdzgp3d5m82y5rg7a0k9q0g95jy6mgc7ivl334x7qlp4wi8";
        libName = "async_lock";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "event-listener";
            packageId = "event-listener 2.5.3";
          }
        ];

      };
      "async-lock 3.4.0" = rec {
        crateName = "async-lock";
        version = "3.4.0";
        edition = "2021";
        sha256 = "060vh45i809wcqyxzs5g69nqiqah7ydz0hpkcjys9258vqn4fvpz";
        libName = "async_lock";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "event-listener";
            packageId = "event-listener 5.3.1";
            usesDefaultFeatures = false;
          }
          {
            name = "event-listener-strategy";
            packageId = "event-listener-strategy";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [
            "event-listener/loom"
            "dep:loom"
          ];
          "std" = [
            "event-listener/std"
            "event-listener-strategy/std"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "async-net" = rec {
        crateName = "async-net";
        version = "2.0.0";
        edition = "2021";
        sha256 = "1xyc5a5vcp3a7h1q2lbfh79wz8136dig4q4x6g4w2ws8ml7h0j5r";
        libName = "async_net";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-io";
            packageId = "async-io 2.3.4";
          }
          {
            name = "blocking";
            packageId = "blocking";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 2.3.0";
          }
        ];

      };
      "async-once-cell" = rec {
        crateName = "async-once-cell";
        version = "0.5.3";
        edition = "2018";
        sha256 = "1ss2ll9r92jiv4g0fdnwqggs3dn48sakij3fg0ba95dag077jf4k";
        libName = "async_once_cell";
        authors = [
          "Daniel De Graaf <code@danieldg.net>"
        ];
        features = {
          "critical-section" = [ "dep:critical-section" ];
        };
      };
      "async-process 1.8.1" = rec {
        crateName = "async-process";
        version = "1.8.1";
        edition = "2018";
        sha256 = "126s968lvhg9rlwsnxp7wfzkfn7rl87p0dlvqqlibn081ax3hr7a";
        libName = "async_process";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-io";
            packageId = "async-io 1.13.0";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "async-lock";
            packageId = "async-lock 2.8.0";
          }
          {
            name = "async-signal";
            packageId = "async-signal";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "blocking";
            packageId = "blocking";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "event-listener";
            packageId = "event-listener 3.1.0";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 1.13.0";
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.37";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
            features = [
              "std"
              "fs"
            ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_System_Threading"
            ];
          }
        ];
        devDependencies = [
          {
            name = "async-io";
            packageId = "async-io 1.13.0";
          }
        ];

      };
      "async-process 2.3.0" = rec {
        crateName = "async-process";
        version = "2.3.0";
        edition = "2021";
        sha256 = "1fr6cpqdw7hrmzns1983lgx86cg8vyz7nlrn0h0125iqq8fmy9b3";
        libName = "async_process";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-channel";
            packageId = "async-channel";
            target = { target, features }: ((target."windows" or false) || ("linux" == target."os" or null));
          }
          {
            name = "async-io";
            packageId = "async-io 2.3.4";
          }
          {
            name = "async-lock";
            packageId = "async-lock 3.4.0";
          }
          {
            name = "async-signal";
            packageId = "async-signal";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "async-task";
            packageId = "async-task";
            target = { target, features }: ((target."windows" or false) || ("linux" == target."os" or null));
          }
          {
            name = "blocking";
            packageId = "blocking";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "event-listener";
            packageId = "event-listener 5.3.1";
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 2.3.0";
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.37";
            usesDefaultFeatures = false;
            target = { target, features }: ((target."unix" or false) && (!("linux" == target."os" or null)));
            features = [
              "std"
              "fs"
              "process"
            ];
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.37";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
            features = [
              "std"
              "fs"
            ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
        ];

      };
      "async-recursion" = rec {
        crateName = "async-recursion";
        version = "1.1.1";
        edition = "2018";
        sha256 = "04ac4zh8qz2xjc79lmfi4jlqj5f92xjvfaqvbzwkizyqd4pl4hrv";
        procMacro = true;
        libName = "async_recursion";
        authors = [
          "Robert Usher <266585+dcchut@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            usesDefaultFeatures = false;
            features = [
              "full"
              "visit-mut"
              "parsing"
              "printing"
              "proc-macro"
              "clone-impls"
            ];
          }
        ];

      };
      "async-signal" = rec {
        crateName = "async-signal";
        version = "0.2.10";
        edition = "2018";
        sha256 = "1wxrq3871l00mil43nmh0akvwjjjnv0bn7n2pzwbvh00k0s00zk3";
        libName = "async_signal";
        authors = [
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "async-io";
            packageId = "async-io 2.3.4";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "async-lock";
            packageId = "async-lock 3.4.0";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "atomic-waker";
            packageId = "atomic-waker";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.37";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
            features = [
              "process"
              "std"
            ];
          }
          {
            name = "signal-hook-registry";
            packageId = "signal-hook-registry";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "slab";
            packageId = "slab";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_System_Console"
            ];
          }
        ];
        devDependencies = [
          {
            name = "async-io";
            packageId = "async-io 2.3.4";
          }
        ];

      };
      "async-task" = rec {
        crateName = "async-task";
        version = "4.7.1";
        edition = "2021";
        sha256 = "1pp3avr4ri2nbh7s6y9ws0397nkx1zymmcr14sq761ljarh3axcb";
        libName = "async_task";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "async-trait" = rec {
        crateName = "async-trait";
        version = "0.1.82";
        edition = "2021";
        sha256 = "1wfz9p7x1hhdw8vj47wlsj319s3j84z6a7xgid6gli0sdqx8lyx2";
        procMacro = true;
        libName = "async_trait";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            usesDefaultFeatures = false;
            features = [
              "full"
              "parsing"
              "printing"
              "proc-macro"
              "visit-mut"
            ];
          }
        ];

      };
      "atomic-waker" = rec {
        crateName = "atomic-waker";
        version = "1.1.2";
        edition = "2018";
        sha256 = "1h5av1lw56m0jf0fd3bchxq8a30xv0b4wv8s4zkp4s0i7mfvs18m";
        libName = "atomic_waker";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Contributors to futures-rs"
        ];
        features = {
          "portable-atomic" = [ "dep:portable-atomic" ];
        };
      };
      "atspi" = rec {
        crateName = "atspi";
        version = "0.19.0";
        edition = "2021";
        sha256 = "1jl7iv3bvnabg5jd4cpf8ba7zz2dbhk39cr70yh3wnbgmd8g6nb0";
        authors = [
          "Michael Connor Buchan <mikey@blindcomputing.org>"
          "Tait Hoyem <tait@tait.tech>"
          "Alberto Tirla <albertotirla@gmail.com>"
          "DataTriny <datatriny@gmail.com>"
          "Luuk van der Duim <luukvanderduim@gmail.com>"
        ];
        dependencies = [
          {
            name = "atspi-common";
            packageId = "atspi-common";
            usesDefaultFeatures = false;
          }
          {
            name = "atspi-connection";
            packageId = "atspi-connection";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "atspi-proxies";
            packageId = "atspi-proxies";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "async-std" = [
            "proxies-async-std"
            "connection-async-std"
          ];
          "atspi-connection" = [ "dep:atspi-connection" ];
          "atspi-proxies" = [ "dep:atspi-proxies" ];
          "connection-async-std" = [
            "atspi-connection/async-std"
            "connection"
          ];
          "connection-tokio" = [
            "atspi-connection/tokio"
            "connection"
          ];
          "default" = [ "async-std" ];
          "proxies-async-std" = [
            "atspi-proxies/async-std"
            "proxies"
          ];
          "proxies-tokio" = [
            "atspi-proxies/tokio"
            "proxies"
          ];
          "tokio" = [
            "proxies-tokio"
            "connection-tokio"
          ];
          "tracing" = [ "atspi-connection/tracing" ];
        };
        resolvedDefaultFeatures = [
          "async-std"
          "atspi-connection"
          "atspi-proxies"
          "connection"
          "connection-async-std"
          "proxies"
          "proxies-async-std"
        ];
      };
      "atspi-common" = rec {
        crateName = "atspi-common";
        version = "0.3.0";
        edition = "2021";
        sha256 = "1xfdn94r697l98669gsq04rpfxysivkc4cn65fb1yhyjcvwrbbwj";
        libName = "atspi_common";
        dependencies = [
          {
            name = "enumflags2";
            packageId = "enumflags2";
          }
          {
            name = "serde";
            packageId = "serde";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "zbus";
            packageId = "zbus 3.15.2";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zbus_names";
            packageId = "zbus_names 2.6.1";
          }
          {
            name = "zvariant";
            packageId = "zvariant 3.15.2";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "zbus";
            packageId = "zbus 3.15.2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "async-std" = [ "zbus/async-io" ];
          "default" = [ "async-std" ];
          "tokio" = [ "zbus/tokio" ];
          "zbus" = [ "dep:zbus" ];
        };
        resolvedDefaultFeatures = [
          "async-std"
          "zbus"
        ];
      };
      "atspi-connection" = rec {
        crateName = "atspi-connection";
        version = "0.3.0";
        edition = "2021";
        sha256 = "0fdrfsgjg3d84mkk6nk3knqz0ygryfdmsn1d7c74qvgqf1ymxim0";
        libName = "atspi_connection";
        dependencies = [
          {
            name = "atspi-common";
            packageId = "atspi-common";
            usesDefaultFeatures = false;
          }
          {
            name = "atspi-proxies";
            packageId = "atspi-proxies";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 1.13.0";
          }
          {
            name = "zbus";
            packageId = "zbus 3.15.2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "async-std" = [
            "zbus/async-io"
            "atspi-proxies/async-std"
            "atspi-common/async-std"
          ];
          "default" = [ "async-std" ];
          "tokio" = [
            "zbus/tokio"
            "atspi-proxies/tokio"
            "atspi-common/tokio"
          ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [ "async-std" ];
      };
      "atspi-proxies" = rec {
        crateName = "atspi-proxies";
        version = "0.3.0";
        edition = "2021";
        sha256 = "0lmvfycsrach6phz1ymcg9lks8iqiy6bxp2njci7lgkhfc96d5b4";
        libName = "atspi_proxies";
        dependencies = [
          {
            name = "atspi-common";
            packageId = "atspi-common";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "zbus";
            packageId = "zbus 3.15.2";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "atspi-common";
            packageId = "atspi-common";
            features = [ "async-std" ];
          }
        ];
        features = {
          "async-std" = [
            "zbus/async-io"
            "atspi-common/async-std"
          ];
          "async-trait" = [ "dep:async-trait" ];
          "default" = [ "async-std" ];
          "futures-lite" = [ "dep:futures-lite" ];
          "gvariant" = [ "zbus/gvariant" ];
          "tokio" = [
            "zbus/tokio"
            "atspi-common/tokio"
          ];
        };
        resolvedDefaultFeatures = [ "async-std" ];
      };
      "autocfg" = rec {
        crateName = "autocfg";
        version = "1.3.0";
        edition = "2015";
        sha256 = "1c3njkfzpil03k92q0mij5y1pkhhfr4j3bf0h53bgl2vs85lsjqc";
        authors = [
          "Josh Stone <cuviper@gmail.com>"
        ];

      };
      "backtrace" = rec {
        crateName = "backtrace";
        version = "0.3.74";
        edition = "2021";
        sha256 = "06pfif7nwx66qf2zaanc2fcq7m64i91ki9imw9xd3bnz5hrwp0ld";
        authors = [
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "addr2line";
            packageId = "addr2line";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                !(
                  (target."windows" or false)
                  && ("msvc" == target."env" or null)
                  && (!("uwp" == target."vendor" or null))
                )
              );
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                !(
                  (target."windows" or false)
                  && ("msvc" == target."env" or null)
                  && (!("uwp" == target."vendor" or null))
                )
              );
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                !(
                  (target."windows" or false)
                  && ("msvc" == target."env" or null)
                  && (!("uwp" == target."vendor" or null))
                )
              );
          }
          {
            name = "object";
            packageId = "object";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                !(
                  (target."windows" or false)
                  && ("msvc" == target."env" or null)
                  && (!("uwp" == target."vendor" or null))
                )
              );
            features = [
              "read_core"
              "elf"
              "macho"
              "pe"
              "xcoff"
              "unaligned"
              "archive"
            ];
          }
          {
            name = "rustc-demangle";
            packageId = "rustc-demangle";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "cpp_demangle" = [ "dep:cpp_demangle" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serialize-serde" = [ "serde" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "bit-set" = rec {
        crateName = "bit-set";
        version = "0.5.3";
        edition = "2015";
        sha256 = "1wcm9vxi00ma4rcxkl3pzzjli6ihrpn9cfdi0c5b4cvga2mxs007";
        libName = "bit_set";
        authors = [
          "Alexis Beingessner <a.beingessner@gmail.com>"
        ];
        dependencies = [
          {
            name = "bit-vec";
            packageId = "bit-vec";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "bit-vec/std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "bit-vec" = rec {
        crateName = "bit-vec";
        version = "0.6.3";
        edition = "2015";
        sha256 = "1ywqjnv60cdh1slhz67psnp422md6jdliji6alq0gmly2xm9p7rl";
        libName = "bit_vec";
        authors = [
          "Alexis Beingessner <a.beingessner@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde_no_std" = [ "serde/alloc" ];
          "serde_std" = [
            "std"
            "serde/std"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "bitflags 1.3.2" = rec {
        crateName = "bitflags";
        version = "1.3.2";
        edition = "2018";
        sha256 = "12ki6w8gn1ldq7yz9y680llwk5gmrhrzszaa17g1sbrw2r2qvwxy";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [
            "core"
            "compiler_builtins"
          ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bitflags 2.6.0" = rec {
        crateName = "bitflags";
        version = "2.6.0";
        edition = "2021";
        sha256 = "1pkidwzn3hnxlsl8zizh0bncgbjnw7c41cx7bby26ncbzmiznj5h";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [
            "core"
            "compiler_builtins"
          ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "bits" = rec {
        crateName = "bits";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./packages/bits;
        };
        dependencies = [
          {
            name = "snafu";
            packageId = "snafu";
            usesDefaultFeatures = false;
          }
        ];

      };
      "bits_macros" = rec {
        crateName = "bits_macros";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./packages/bits_macros;
        };
        procMacro = true;
        dependencies = [
          {
            name = "macro_utils";
            packageId = "macro_utils";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [
              "full"
              "extra-traits"
            ];
          }
        ];

      };
      "block" = rec {
        crateName = "block";
        version = "0.1.6";
        edition = "2015";
        sha256 = "16k9jgll25pzsq14f244q22cdv0zb4bqacldg3kx6h89d7piz30d";
        authors = [
          "Steven Sheldon"
        ];

      };
      "block-buffer" = rec {
        crateName = "block-buffer";
        version = "0.10.4";
        edition = "2018";
        sha256 = "0w9sa2ypmrsqqvc20nhwr75wbb5cjr4kkyhpjm1z1lv2kdicfy1h";
        libName = "block_buffer";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
          }
        ];

      };
      "block-sys 0.1.0-beta.1" = rec {
        crateName = "block-sys";
        version = "0.1.0-beta.1";
        edition = "2021";
        links = "block_0_1";
        sha256 = "0ihiar08hk0das4q0ii1gsmql975z3rslli1h13jb44hxr0mg98g";
        libName = "block_sys";
        authors = [
          "Mads Marquart <mads@marquart.dk>"
        ];
        dependencies = [
          {
            name = "objc-sys";
            packageId = "objc-sys 0.2.0-beta.2";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "objc-sys?/alloc" ];
          "default" = [
            "std"
            "apple"
          ];
          "gnustep-1-7" = [
            "objc-sys"
            "objc-sys/gnustep-1-7"
          ];
          "gnustep-1-8" = [
            "objc-sys/gnustep-1-8"
            "gnustep-1-7"
          ];
          "gnustep-1-9" = [
            "objc-sys/gnustep-1-9"
            "gnustep-1-8"
          ];
          "gnustep-2-0" = [
            "objc-sys/gnustep-2-0"
            "gnustep-1-9"
          ];
          "gnustep-2-1" = [
            "objc-sys/gnustep-2-1"
            "gnustep-2-0"
          ];
          "objc-sys" = [ "dep:objc-sys" ];
          "std" = [
            "alloc"
            "objc-sys?/std"
          ];
          "unstable-docsrs" = [
            "objc-sys"
            "objc-sys/unstable-docsrs"
          ];
          "unstable-winobjc" = [
            "objc-sys/unstable-winobjc"
            "gnustep-1-8"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "apple"
          "std"
        ];
      };
      "block-sys 0.2.1" = rec {
        crateName = "block-sys";
        version = "0.2.1";
        edition = "2021";
        links = "block_0_2";
        sha256 = "1rzp0218mwigdmfd5rhmj5h7c1vp0bq0nxaklhsvi8vydrls11df";
        libName = "block_sys";
        authors = [
          "Mads Marquart <mads@marquart.dk>"
        ];
        dependencies = [
          {
            name = "objc-sys";
            packageId = "objc-sys 0.3.5";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "objc-sys?/alloc" ];
          "default" = [
            "std"
            "apple"
          ];
          "gnustep-1-7" = [
            "objc-sys"
            "objc-sys/gnustep-1-7"
          ];
          "gnustep-1-8" = [
            "objc-sys/gnustep-1-8"
            "gnustep-1-7"
          ];
          "gnustep-1-9" = [
            "objc-sys/gnustep-1-9"
            "gnustep-1-8"
          ];
          "gnustep-2-0" = [
            "objc-sys/gnustep-2-0"
            "gnustep-1-9"
          ];
          "gnustep-2-1" = [
            "objc-sys/gnustep-2-1"
            "gnustep-2-0"
          ];
          "objc-sys" = [ "dep:objc-sys" ];
          "std" = [
            "alloc"
            "objc-sys?/std"
          ];
          "unstable-docsrs" = [
            "objc-sys"
            "objc-sys/unstable-docsrs"
          ];
          "unstable-winobjc" = [
            "objc-sys/unstable-winobjc"
            "gnustep-1-8"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "apple"
          "std"
        ];
      };
      "block2 0.2.0-alpha.6" = rec {
        crateName = "block2";
        version = "0.2.0-alpha.6";
        edition = "2021";
        sha256 = "0hpcdl81rmwvhfni9413hrg1wd4xwf6vhch3yv15bxs42wyfdncd";
        authors = [
          "Steven Sheldon"
          "Mads Marquart <mads@marquart.dk>"
        ];
        dependencies = [
          {
            name = "block-sys";
            packageId = "block-sys 0.1.0-beta.1";
            usesDefaultFeatures = false;
          }
          {
            name = "objc2-encode";
            packageId = "objc2-encode 2.0.0-pre.2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [
            "objc2-encode/alloc"
            "block-sys/alloc"
          ];
          "apple" = [
            "block-sys/apple"
            "objc2-encode/apple"
          ];
          "compiler-rt" = [
            "block-sys/compiler-rt"
            "objc2-encode/apple"
          ];
          "default" = [
            "std"
            "apple"
          ];
          "gnustep-1-7" = [
            "block-sys/gnustep-1-7"
            "objc2-encode/gnustep-1-7"
          ];
          "gnustep-1-8" = [
            "gnustep-1-7"
            "block-sys/gnustep-1-8"
            "objc2-encode/gnustep-1-8"
          ];
          "gnustep-1-9" = [
            "gnustep-1-8"
            "block-sys/gnustep-1-9"
            "objc2-encode/gnustep-1-9"
          ];
          "gnustep-2-0" = [
            "gnustep-1-9"
            "block-sys/gnustep-2-0"
            "objc2-encode/gnustep-2-0"
          ];
          "gnustep-2-1" = [
            "gnustep-2-0"
            "block-sys/gnustep-2-1"
            "objc2-encode/gnustep-2-1"
          ];
          "std" = [
            "alloc"
            "objc2-encode/std"
            "block-sys/std"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "apple"
          "std"
        ];
      };
      "block2 0.3.0" = rec {
        crateName = "block2";
        version = "0.3.0";
        edition = "2021";
        sha256 = "0s2ywcis2xf9444vmdgzr7ankrrkpchn8zimaw950cszm1imdd8m";
        authors = [
          "Steven Sheldon"
          "Mads Marquart <mads@marquart.dk>"
        ];
        dependencies = [
          {
            name = "block-sys";
            packageId = "block-sys 0.2.1";
            usesDefaultFeatures = false;
          }
          {
            name = "objc2";
            packageId = "objc2 0.4.1";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [
            "objc2/alloc"
            "block-sys/alloc"
          ];
          "apple" = [
            "block-sys/apple"
            "objc2/apple"
          ];
          "compiler-rt" = [
            "block-sys/compiler-rt"
            "objc2/unstable-compiler-rt"
          ];
          "default" = [
            "std"
            "apple"
          ];
          "gnustep-1-7" = [
            "block-sys/gnustep-1-7"
            "objc2/gnustep-1-7"
          ];
          "gnustep-1-8" = [
            "gnustep-1-7"
            "block-sys/gnustep-1-8"
            "objc2/gnustep-1-8"
          ];
          "gnustep-1-9" = [
            "gnustep-1-8"
            "block-sys/gnustep-1-9"
            "objc2/gnustep-1-9"
          ];
          "gnustep-2-0" = [
            "gnustep-1-9"
            "block-sys/gnustep-2-0"
            "objc2/gnustep-2-0"
          ];
          "gnustep-2-1" = [
            "gnustep-2-0"
            "block-sys/gnustep-2-1"
            "objc2/gnustep-2-1"
          ];
          "std" = [
            "alloc"
            "objc2/std"
            "block-sys/std"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "apple"
          "std"
        ];
      };
      "block2 0.5.1" = rec {
        crateName = "block2";
        version = "0.5.1";
        edition = "2021";
        sha256 = "0pyiha5his2grzqr3mynmq244laql2j20992i59asp0gy7mjw4rc";
        authors = [
          "Steven Sheldon"
          "Mads Marquart <mads@marquart.dk>"
        ];
        dependencies = [
          {
            name = "objc2";
            packageId = "objc2 0.5.2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "objc2/alloc" ];
          "compiler-rt" = [ "objc2/unstable-compiler-rt" ];
          "default" = [ "std" ];
          "gnustep-1-7" = [ "objc2/gnustep-1-7" ];
          "gnustep-1-8" = [
            "gnustep-1-7"
            "objc2/gnustep-1-8"
          ];
          "gnustep-1-9" = [
            "gnustep-1-8"
            "objc2/gnustep-1-9"
          ];
          "gnustep-2-0" = [
            "gnustep-1-9"
            "objc2/gnustep-2-0"
          ];
          "gnustep-2-1" = [
            "gnustep-2-0"
            "objc2/gnustep-2-1"
          ];
          "std" = [
            "alloc"
            "objc2/std"
          ];
          "unstable-winobjc" = [ "gnustep-1-8" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "blocking" = rec {
        crateName = "blocking";
        version = "1.6.1";
        edition = "2021";
        sha256 = "1si99l8zp7c4zq87y35ayjgc5c9b60jb8h0k14zfcs679z2l2gvh";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "async-channel";
            packageId = "async-channel";
          }
          {
            name = "async-task";
            packageId = "async-task";
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-lite";
            packageId = "futures-lite 2.3.0";
            usesDefaultFeatures = false;
          }
          {
            name = "piper";
            packageId = "piper";
          }
        ];
        devDependencies = [
          {
            name = "futures-lite";
            packageId = "futures-lite 2.3.0";
          }
        ];
        features = {
          "tracing" = [ "dep:tracing" ];
        };
      };
      "bumpalo" = rec {
        crateName = "bumpalo";
        version = "3.16.0";
        edition = "2021";
        sha256 = "0b015qb4knwanbdlp1x48pkb4pm57b8gidbhhhxr900q2wb6fabr";
        authors = [
          "Nick Fitzgerald <fitzgen@gmail.com>"
        ];
        features = {
          "allocator-api2" = [ "dep:allocator-api2" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "bytemuck" = rec {
        crateName = "bytemuck";
        version = "1.18.0";
        edition = "2018";
        sha256 = "1bp2s9wn0gjsaygv21nsbfpf854vl897ll6sqpfn3naaannv1fwl";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytemuck_derive";
            packageId = "bytemuck_derive";
            optional = true;
          }
        ];
        features = {
          "bytemuck_derive" = [ "dep:bytemuck_derive" ];
          "derive" = [ "bytemuck_derive" ];
          "extern_crate_std" = [ "extern_crate_alloc" ];
          "latest_stable_rust" = [
            "aarch64_simd"
            "align_offset"
            "const_zeroed"
            "derive"
            "min_const_generics"
            "must_cast"
            "wasm_simd"
            "zeroable_atomics"
            "zeroable_maybe_uninit"
          ];
        };
        resolvedDefaultFeatures = [
          "aarch64_simd"
          "bytemuck_derive"
          "derive"
          "extern_crate_alloc"
          "min_const_generics"
        ];
      };
      "bytemuck_derive" = rec {
        crateName = "bytemuck_derive";
        version = "1.7.1";
        edition = "2018";
        sha256 = "09mw7fn6ij6y25c7gsxx0m6xji7lqw0ppi4h7nxwybsz755vbj0c";
        procMacro = true;
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
          }
        ];

      };
      "byteorder" = rec {
        crateName = "byteorder";
        version = "1.5.0";
        edition = "2021";
        sha256 = "0jzncxyf404mwqdbspihyzpkndfgda450l0893pz5xj685cg5l0z";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "byteorder-lite" = rec {
        crateName = "byteorder-lite";
        version = "0.1.0";
        edition = "2021";
        sha256 = "15alafmz4b9az56z6x7glcbcb6a8bfgyd109qc3bvx07zx4fj7wg";
        libName = "byteorder_lite";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "bytes" = rec {
        crateName = "bytes";
        version = "1.7.2";
        edition = "2018";
        sha256 = "1wzs7l57iwqmrszdpr2mmqf1b1hgvpxafc30imxhnry0zfl9m3a2";
        authors = [
          "Carl Lerche <me@carllerche.com>"
          "Sean McArthur <sean@seanmonstar.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "calloop 0.12.4" = rec {
        crateName = "calloop";
        version = "0.12.4";
        edition = "2018";
        sha256 = "162jk6j6qgqisyngkiay2qhzcj3i1q0260jiadaqxaasvnsav9zv";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "polling";
            packageId = "polling 3.7.3";
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.37";
            usesDefaultFeatures = false;
            features = [
              "event"
              "fs"
              "pipe"
              "std"
            ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        devDependencies = [
          {
            name = "rustix";
            packageId = "rustix 0.38.37";
            usesDefaultFeatures = false;
            features = [ "net" ];
          }
        ];
        features = {
          "async-task" = [ "dep:async-task" ];
          "block_on" = [ "pin-utils" ];
          "executor" = [ "async-task" ];
          "futures-io" = [ "dep:futures-io" ];
          "nix" = [ "dep:nix" ];
          "pin-utils" = [ "dep:pin-utils" ];
          "signals" = [ "nix" ];
        };
      };
      "calloop 0.13.0" = rec {
        crateName = "calloop";
        version = "0.13.0";
        edition = "2018";
        sha256 = "1v5zgidnhsyml403rzr7vm99f8q6r5bxq5gxyiqkr8lcapwa57dr";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "polling";
            packageId = "polling 3.7.3";
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.37";
            usesDefaultFeatures = false;
            features = [
              "event"
              "fs"
              "pipe"
              "std"
            ];
          }
          {
            name = "slab";
            packageId = "slab";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        devDependencies = [
          {
            name = "rustix";
            packageId = "rustix 0.38.37";
            usesDefaultFeatures = false;
            features = [ "net" ];
          }
        ];
        features = {
          "async-task" = [ "dep:async-task" ];
          "block_on" = [ "pin-utils" ];
          "executor" = [ "async-task" ];
          "futures-io" = [ "dep:futures-io" ];
          "nix" = [ "dep:nix" ];
          "pin-utils" = [ "dep:pin-utils" ];
          "signals" = [ "nix" ];
        };
      };
      "calloop-wayland-source 0.2.0" = rec {
        crateName = "calloop-wayland-source";
        version = "0.2.0";
        edition = "2021";
        sha256 = "00lgxlqnkd150ylfn3wi4464ibif1qwbp38shj1aszvc8ywsj3hg";
        libName = "calloop_wayland_source";
        authors = [
          "Kirill Chibisov <contact@kchibisov.com>"
        ];
        dependencies = [
          {
            name = "calloop";
            packageId = "calloop 0.12.4";
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.37";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
          }
        ];
        features = {
          "log" = [ "dep:log" ];
        };
      };
      "calloop-wayland-source 0.3.0" = rec {
        crateName = "calloop-wayland-source";
        version = "0.3.0";
        edition = "2021";
        sha256 = "086x5mq16prrcwd9k6bw9an0sp8bj9l5daz4ziz5z4snf2c6m9lm";
        libName = "calloop_wayland_source";
        authors = [
          "Kirill Chibisov <contact@kchibisov.com>"
        ];
        dependencies = [
          {
            name = "calloop";
            packageId = "calloop 0.13.0";
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.37";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
          }
        ];
        features = {
          "log" = [ "dep:log" ];
        };
      };
      "cc" = rec {
        crateName = "cc";
        version = "1.1.21";
        edition = "2018";
        sha256 = "1w00h696rxwx7yfj07f9jgsrfc3ymgm5ms6d219wi3vy5ig6kc87";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "jobserver";
            packageId = "jobserver";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "shlex";
            packageId = "shlex";
          }
        ];
        features = {
          "parallel" = [
            "dep:libc"
            "dep:jobserver"
          ];
        };
        resolvedDefaultFeatures = [ "parallel" ];
      };
      "cesu8" = rec {
        crateName = "cesu8";
        version = "1.1.0";
        edition = "2015";
        sha256 = "0g6q58wa7khxrxcxgnqyi9s1z2cjywwwd3hzr5c55wskhx6s0hvd";
        authors = [
          "Eric Kidd <git@randomhacks.net>"
        ];
        features = {
        };
      };
      "cfg-if" = rec {
        crateName = "cfg-if";
        version = "1.0.0";
        edition = "2018";
        sha256 = "1za0vb97n4brpzpv8lsbnzmq5r8f2b0cpqqr0sy8h5bn751xxwds";
        libName = "cfg_if";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [
            "core"
            "compiler_builtins"
          ];
        };
      };
      "cfg_aliases 0.1.1" = rec {
        crateName = "cfg_aliases";
        version = "0.1.1";
        edition = "2018";
        sha256 = "17p821nc6jm830vzl2lmwz60g3a30hcm33nk6l257i1rjdqw85px";
        authors = [
          "Zicklag <zicklag@katharostech.com>"
        ];

      };
      "cfg_aliases 0.2.1" = rec {
        crateName = "cfg_aliases";
        version = "0.2.1";
        edition = "2018";
        sha256 = "092pxdc1dbgjb6qvh83gk56rkic2n2ybm4yvy76cgynmzi3zwfk1";
        authors = [
          "Zicklag <zicklag@katharostech.com>"
        ];

      };
      "cgl" = rec {
        crateName = "cgl";
        version = "0.3.2";
        edition = "2015";
        sha256 = "1zs7skrsyrsm759vfy2cygkx52fx91b567a12bpaz1sf4d8hbv8c";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "clap" = rec {
        crateName = "clap";
        version = "4.5.18";
        edition = "2021";
        crateBin = [ ];
        sha256 = "1lsxa59bgfxaag1q65ndp801h7vw9dffsly0zzx1mb13nd1nm5dh";
        dependencies = [
          {
            name = "clap_builder";
            packageId = "clap_builder";
            usesDefaultFeatures = false;
          }
          {
            name = "clap_derive";
            packageId = "clap_derive";
            optional = true;
          }
        ];
        features = {
          "cargo" = [ "clap_builder/cargo" ];
          "color" = [ "clap_builder/color" ];
          "debug" = [
            "clap_builder/debug"
            "clap_derive?/debug"
          ];
          "default" = [
            "std"
            "color"
            "help"
            "usage"
            "error-context"
            "suggestions"
          ];
          "deprecated" = [
            "clap_builder/deprecated"
            "clap_derive?/deprecated"
          ];
          "derive" = [ "dep:clap_derive" ];
          "env" = [ "clap_builder/env" ];
          "error-context" = [ "clap_builder/error-context" ];
          "help" = [ "clap_builder/help" ];
          "std" = [ "clap_builder/std" ];
          "string" = [ "clap_builder/string" ];
          "suggestions" = [ "clap_builder/suggestions" ];
          "unicode" = [ "clap_builder/unicode" ];
          "unstable-doc" = [
            "clap_builder/unstable-doc"
            "derive"
          ];
          "unstable-ext" = [ "clap_builder/unstable-ext" ];
          "unstable-styles" = [ "clap_builder/unstable-styles" ];
          "unstable-v5" = [
            "clap_builder/unstable-v5"
            "clap_derive?/unstable-v5"
            "deprecated"
          ];
          "usage" = [ "clap_builder/usage" ];
          "wrap_help" = [ "clap_builder/wrap_help" ];
        };
        resolvedDefaultFeatures = [
          "color"
          "default"
          "derive"
          "error-context"
          "help"
          "std"
          "suggestions"
          "usage"
        ];
      };
      "clap_builder" = rec {
        crateName = "clap_builder";
        version = "4.5.18";
        edition = "2021";
        sha256 = "06wnncyif421qgrkd73hhhfych773avpx903b1nhhd0nsinicwjd";
        dependencies = [
          {
            name = "anstream";
            packageId = "anstream";
            optional = true;
          }
          {
            name = "anstyle";
            packageId = "anstyle";
          }
          {
            name = "clap_lex";
            packageId = "clap_lex";
          }
          {
            name = "strsim";
            packageId = "strsim";
            optional = true;
          }
        ];
        features = {
          "color" = [ "dep:anstream" ];
          "debug" = [ "dep:backtrace" ];
          "default" = [
            "std"
            "color"
            "help"
            "usage"
            "error-context"
            "suggestions"
          ];
          "std" = [ "anstyle/std" ];
          "suggestions" = [
            "dep:strsim"
            "error-context"
          ];
          "unicode" = [
            "dep:unicode-width"
            "dep:unicase"
          ];
          "unstable-doc" = [
            "cargo"
            "wrap_help"
            "env"
            "unicode"
            "string"
            "unstable-ext"
          ];
          "unstable-styles" = [ "color" ];
          "unstable-v5" = [ "deprecated" ];
          "wrap_help" = [
            "help"
            "dep:terminal_size"
          ];
        };
        resolvedDefaultFeatures = [
          "color"
          "error-context"
          "help"
          "std"
          "suggestions"
          "usage"
        ];
      };
      "clap_derive" = rec {
        crateName = "clap_derive";
        version = "4.5.18";
        edition = "2021";
        sha256 = "1ardb26bvcpg72q9myr7yir3a8c83gx7vxk1cccabsd9n73s1ija";
        procMacro = true;
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" ];
          }
        ];
        features = {
          "raw-deprecated" = [ "deprecated" ];
          "unstable-v5" = [ "deprecated" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "clap_lex" = rec {
        crateName = "clap_lex";
        version = "0.7.2";
        edition = "2021";
        sha256 = "15zcrc2fa6ycdzaihxghf48180bnvzsivhf0fmah24bnnaf76qhl";

      };
      "clipboard-win" = rec {
        crateName = "clipboard-win";
        version = "5.4.0";
        edition = "2018";
        sha256 = "14n87fc0vzbd0wdhqzvcs1lqgafsncplzcanhpik93xhhalfgvqm";
        libName = "clipboard_win";
        authors = [
          "Douman <douman@gmx.se>"
        ];
        dependencies = [
          {
            name = "error-code";
            packageId = "error-code";
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "monitor" = [ "windows-win" ];
          "std" = [ "error-code/std" ];
          "windows-win" = [ "dep:windows-win" ];
        };
      };
      "cmake" = rec {
        crateName = "cmake";
        version = "0.1.51";
        edition = "2021";
        sha256 = "06prag07c611ancwcwzkgy3d21mkvsy7szvqd3wv2lnigym467pv";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];

      };
      "codespan-reporting" = rec {
        crateName = "codespan-reporting";
        version = "0.11.1";
        edition = "2018";
        sha256 = "0vkfay0aqk73d33kh79k1kqxx06ka22894xhqi89crnc6c6jff1m";
        libName = "codespan_reporting";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
        ];
        dependencies = [
          {
            name = "termcolor";
            packageId = "termcolor";
          }
          {
            name = "unicode-width";
            packageId = "unicode-width";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serialization" = [
            "serde"
            "serde/rc"
          ];
        };
      };
      "colorchoice" = rec {
        crateName = "colorchoice";
        version = "1.0.2";
        edition = "2021";
        sha256 = "1h18ph538y8yjmbpaf8li98l0ifms2xmh3rax9666c5qfjfi3zfk";

      };
      "com" = rec {
        crateName = "com";
        version = "0.6.0";
        edition = "2018";
        sha256 = "1xnryd43mqdyq66qlnagwxrcs9iyr0kcbw9f3ddvclvks5zqh5vy";
        authors = [
          "Microsoft Corp."
        ];
        dependencies = [
          {
            name = "com_macros";
            packageId = "com_macros";
          }
        ];
        features = {
          "default" = [ "std" ];
          "production" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "production"
          "std"
        ];
      };
      "com_macros" = rec {
        crateName = "com_macros";
        version = "0.6.0";
        edition = "2018";
        sha256 = "198k9fqd9rnpv3x6pxav6g636gl6m30iyqx63r4cfs56h0sqhxfk";
        procMacro = true;
        authors = [
          "Microsoft Corp."
        ];
        dependencies = [
          {
            name = "com_macros_support";
            packageId = "com_macros_support";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [ "full" ];
          }
        ];

      };
      "com_macros_support" = rec {
        crateName = "com_macros_support";
        version = "0.6.0";
        edition = "2018";
        sha256 = "033ix2k6j0930b0gpm77r2zc2d4f5fvpqbbr8ib6sad9hw89m2dd";
        authors = [
          "Microsoft Corp."
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [
              "full"
              "extra-traits"
            ];
          }
        ];

      };
      "combine" = rec {
        crateName = "combine";
        version = "4.6.7";
        edition = "2018";
        sha256 = "1z8rh8wp59gf8k23ar010phgs0wgf5i8cx4fg01gwcnzfn5k0nms";
        authors = [
          "Markus Westerlind <marwes91@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytes";
            packageId = "bytes";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "bytes";
            packageId = "bytes";
          }
        ];
        features = {
          "bytes" = [ "dep:bytes" ];
          "bytes_05" = [ "dep:bytes_05" ];
          "default" = [ "std" ];
          "futures-03" = [
            "pin-project"
            "std"
            "futures-core-03"
            "futures-io-03"
            "pin-project-lite"
          ];
          "futures-core-03" = [ "dep:futures-core-03" ];
          "futures-io-03" = [ "dep:futures-io-03" ];
          "pin-project" = [ "pin-project-lite" ];
          "pin-project-lite" = [ "dep:pin-project-lite" ];
          "regex" = [ "dep:regex" ];
          "std" = [
            "memchr/std"
            "bytes"
            "alloc"
          ];
          "tokio" = [
            "tokio-dep"
            "tokio-util/io"
            "futures-core-03"
            "pin-project-lite"
          ];
          "tokio-02" = [
            "pin-project"
            "std"
            "tokio-02-dep"
            "futures-core-03"
            "pin-project-lite"
            "bytes_05"
          ];
          "tokio-02-dep" = [ "dep:tokio-02-dep" ];
          "tokio-03" = [
            "pin-project"
            "std"
            "tokio-03-dep"
            "futures-core-03"
            "pin-project-lite"
          ];
          "tokio-03-dep" = [ "dep:tokio-03-dep" ];
          "tokio-dep" = [ "dep:tokio-dep" ];
          "tokio-util" = [ "dep:tokio-util" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "bytes"
          "default"
          "std"
        ];
      };
      "concurrent-queue" = rec {
        crateName = "concurrent-queue";
        version = "2.5.0";
        edition = "2021";
        sha256 = "0wrr3mzq2ijdkxwndhf79k952cp4zkz35ray8hvsxl96xrx1k82c";
        libName = "concurrent_queue";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Taiki Endo <te316e89@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [ "dep:loom" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "console" = rec {
        crateName = "console";
        version = "0.15.8";
        edition = "2018";
        sha256 = "1sz4nl9nz8pkmapqni6py7jxzi7nzqjxzb3ya4kxvmkb0zy867qf";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
        ];
        dependencies = [
          {
            name = "encode_unicode";
            packageId = "encode_unicode";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_System_Console"
              "Win32_Storage_FileSystem"
              "Win32_UI_Input_KeyboardAndMouse"
            ];
          }
        ];
        features = {
          "default" = [
            "unicode-width"
            "ansi-parsing"
          ];
          "unicode-width" = [ "dep:unicode-width" ];
          "windows-console-colors" = [ "ansi-parsing" ];
        };
      };
      "core-foundation 0.10.0" = rec {
        crateName = "core-foundation";
        version = "0.10.0";
        edition = "2018";
        sha256 = "0qscay14s2rwkg8nd8ljhiaf149hj8sfy95d70zssy64r3jp2lmm";
        libName = "core_foundation";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "default" = [ "link" ];
          "link" = [ "core-foundation-sys/link" ];
          "mac_os_10_7_support" = [ "core-foundation-sys/mac_os_10_7_support" ];
          "mac_os_10_8_features" = [ "core-foundation-sys/mac_os_10_8_features" ];
          "uuid" = [ "dep:uuid" ];
          "with-uuid" = [ "uuid" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "link"
        ];
      };
      "core-foundation 0.9.4" = rec {
        crateName = "core-foundation";
        version = "0.9.4";
        edition = "2018";
        sha256 = "13zvbbj07yk3b61b8fhwfzhy35535a583irf23vlcg59j7h9bqci";
        libName = "core_foundation";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "core-foundation-sys";
            packageId = "core-foundation-sys";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "chrono" = [ "dep:chrono" ];
          "default" = [ "link" ];
          "link" = [ "core-foundation-sys/link" ];
          "mac_os_10_7_support" = [ "core-foundation-sys/mac_os_10_7_support" ];
          "mac_os_10_8_features" = [ "core-foundation-sys/mac_os_10_8_features" ];
          "uuid" = [ "dep:uuid" ];
          "with-chrono" = [ "chrono" ];
          "with-uuid" = [ "uuid" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "link"
        ];
      };
      "core-foundation-sys" = rec {
        crateName = "core-foundation-sys";
        version = "0.8.7";
        edition = "2018";
        sha256 = "12w8j73lazxmr1z0h98hf3z623kl8ms7g07jch7n4p8f9nwlhdkp";
        libName = "core_foundation_sys";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "default" = [ "link" ];
        };
        resolvedDefaultFeatures = [ "link" ];
      };
      "core-graphics" = rec {
        crateName = "core-graphics";
        version = "0.23.2";
        edition = "2018";
        sha256 = "10dhv3gk4kmbzl14xxkrhhky4fdp8h6nzff6h0019qgr6nz84xy0";
        libName = "core_graphics";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation 0.9.4";
            usesDefaultFeatures = false;
          }
          {
            name = "core-graphics-types";
            packageId = "core-graphics-types";
            usesDefaultFeatures = false;
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "default" = [ "link" ];
          "link" = [
            "core-foundation/link"
            "core-graphics-types/link"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "link"
        ];
      };
      "core-graphics-types" = rec {
        crateName = "core-graphics-types";
        version = "0.1.3";
        edition = "2018";
        sha256 = "1bxg8nxc8fk4kxnqyanhf36wq0zrjr552c58qy6733zn2ihhwfa5";
        libName = "core_graphics_types";
        authors = [
          "The Servo Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "core-foundation";
            packageId = "core-foundation 0.9.4";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "default" = [ "link" ];
          "link" = [ "core-foundation/link" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "link"
        ];
      };
      "cpufeatures" = rec {
        crateName = "cpufeatures";
        version = "0.2.14";
        edition = "2018";
        sha256 = "1q3qd9qkw94vs7n5i0y3zz2cqgzcxvdgyb54ryngwmjhfbgrg1k0";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target.name == "aarch64-linux-android");
          }
          {
            name = "libc";
            packageId = "libc";
            target =
              { target, features }: (("aarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            target =
              { target, features }:
              (("aarch64" == target."arch" or null) && ("apple" == target."vendor" or null));
          }
          {
            name = "libc";
            packageId = "libc";
            target =
              { target, features }:
              (("loongarch64" == target."arch" or null) && ("linux" == target."os" or null));
          }
        ];

      };
      "crc32fast" = rec {
        crateName = "crc32fast";
        version = "1.4.2";
        edition = "2015";
        sha256 = "1czp7vif73b8xslr3c9yxysmh9ws2r8824qda7j47ffs9pcnjxx9";
        authors = [
          "Sam Rijs <srijs@airpost.net>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "crossbeam-queue" = rec {
        crateName = "crossbeam-queue";
        version = "0.3.11";
        edition = "2021";
        sha256 = "0d8y8y3z48r9javzj67v3p2yfswd278myz1j9vzc4sp7snslc0yz";
        libName = "crossbeam_queue";
        dependencies = [
          {
            name = "crossbeam-utils";
            packageId = "crossbeam-utils";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "nightly" = [ "crossbeam-utils/nightly" ];
          "std" = [
            "alloc"
            "crossbeam-utils/std"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "crossbeam-utils" = rec {
        crateName = "crossbeam-utils";
        version = "0.8.20";
        edition = "2021";
        sha256 = "100fksq5mm1n7zj242cclkw6yf7a4a8ix3lvpfkhxvdhbda9kv12";
        libName = "crossbeam_utils";
        features = {
          "default" = [ "std" ];
          "loom" = [ "dep:loom" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "crunchy" = rec {
        crateName = "crunchy";
        version = "0.2.2";
        edition = "2015";
        sha256 = "1dx9mypwd5mpfbbajm78xcrg5lirqk7934ik980mmaffg3hdm0bs";
        authors = [
          "Vurich <jackefransham@hotmail.co.uk>"
        ];
        features = {
          "default" = [ "limit_128" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "limit_128"
        ];
      };
      "crypto-common" = rec {
        crateName = "crypto-common";
        version = "0.1.6";
        edition = "2018";
        sha256 = "1cvby95a6xg7kxdz5ln3rl9xh66nz66w46mm3g56ri1z5x815yqv";
        libName = "crypto_common";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "generic-array";
            packageId = "generic-array";
            features = [ "more_lengths" ];
          }
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        features = {
          "getrandom" = [ "rand_core/getrandom" ];
          "rand_core" = [ "dep:rand_core" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "cursor-icon" = rec {
        crateName = "cursor-icon";
        version = "1.1.0";
        edition = "2021";
        sha256 = "14brf4vd6az9hnszwzqj7xyfaymqx9806d4i7xmwlaja3wjsr9ln";
        libName = "cursor_icon";
        authors = [
          "Kirill Chibisov <contact@kchibisov.com>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "custom_debug" = rec {
        crateName = "custom_debug";
        version = "0.6.1";
        edition = "2021";
        sha256 = "0mnj2k1k1mjg34f2zcyyiqp205fjkpim5h3nf2f90gjh1szibrql";
        authors = [
          "panicbit <panicbit.dev@gmail.com>"
        ];
        dependencies = [
          {
            name = "custom_debug_derive";
            packageId = "custom_debug_derive";
          }
        ];

      };
      "custom_debug_derive" = rec {
        crateName = "custom_debug_derive";
        version = "0.6.1";
        edition = "2021";
        sha256 = "0sagiyiw5h0yi0wmc8dgqyrk4xy9zb0mwinbagi10ff7745l8cgp";
        procMacro = true;
        authors = [
          "panicbit <panicbit.dev@gmail.com>"
        ];
        dependencies = [
          {
            name = "darling";
            packageId = "darling";
          }
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
          }
          {
            name = "synstructure";
            packageId = "synstructure";
          }
        ];

      };
      "darling" = rec {
        crateName = "darling";
        version = "0.20.10";
        edition = "2021";
        sha256 = "1299h2z88qn71mizhh05j26yr3ik0wnqmw11ijds89l8i9nbhqvg";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core";
          }
          {
            name = "darling_macro";
            packageId = "darling_macro";
          }
        ];
        features = {
          "default" = [ "suggestions" ];
          "diagnostics" = [ "darling_core/diagnostics" ];
          "suggestions" = [ "darling_core/suggestions" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "suggestions"
        ];
      };
      "darling_core" = rec {
        crateName = "darling_core";
        version = "0.20.10";
        edition = "2021";
        sha256 = "1rgr9nci61ahnim93yh3xy6fkfayh7sk4447hahawah3m1hkh4wm";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "fnv";
            packageId = "fnv";
          }
          {
            name = "ident_case";
            packageId = "ident_case";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "strsim";
            packageId = "strsim";
            optional = true;
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [
              "full"
              "extra-traits"
            ];
          }
        ];
        features = {
          "strsim" = [ "dep:strsim" ];
          "suggestions" = [ "strsim" ];
        };
        resolvedDefaultFeatures = [
          "strsim"
          "suggestions"
        ];
      };
      "darling_macro" = rec {
        crateName = "darling_macro";
        version = "0.20.10";
        edition = "2021";
        sha256 = "01kq3ibbn47czijj39h3vxyw0c2ksd0jvc097smcrk7n2jjs4dnk";
        procMacro = true;
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];
        dependencies = [
          {
            name = "darling_core";
            packageId = "darling_core";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
          }
        ];

      };
      "derivative" = rec {
        crateName = "derivative";
        version = "2.2.0";
        edition = "2015";
        sha256 = "02vpb81wisk2zh1d5f44szzxamzinqgq2k8ydrfjj2wwkrgdvhzw";
        procMacro = true;
        authors = [
          "mcarton <cartonmartin+git@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [
              "visit"
              "extra-traits"
            ];
          }
        ];
        features = {
        };
      };
      "digest" = rec {
        crateName = "digest";
        version = "0.10.7";
        edition = "2018";
        sha256 = "14p2n6ih29x81akj097lvz7wi9b6b9hvls0lwrv7b6xwyy0s5ncy";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "block-buffer";
            packageId = "block-buffer";
            optional = true;
          }
          {
            name = "crypto-common";
            packageId = "crypto-common";
          }
        ];
        features = {
          "blobby" = [ "dep:blobby" ];
          "block-buffer" = [ "dep:block-buffer" ];
          "const-oid" = [ "dep:const-oid" ];
          "core-api" = [ "block-buffer" ];
          "default" = [ "core-api" ];
          "dev" = [ "blobby" ];
          "mac" = [ "subtle" ];
          "oid" = [ "const-oid" ];
          "rand_core" = [ "crypto-common/rand_core" ];
          "std" = [
            "alloc"
            "crypto-common/std"
          ];
          "subtle" = [ "dep:subtle" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "block-buffer"
          "core-api"
          "default"
          "std"
        ];
      };
      "dispatch" = rec {
        crateName = "dispatch";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0fwjr9b7582ic5689zxj8lf7zl94iklhlns3yivrnv8c9fxr635x";
        authors = [
          "Steven Sheldon"
        ];

      };
      "dlib" = rec {
        crateName = "dlib";
        version = "0.5.2";
        edition = "2015";
        sha256 = "04m4zzybx804394dnqs1blz241xcy480bdwf3w9p4k6c3l46031k";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "libloading";
            packageId = "libloading 0.8.5";
          }
        ];

      };
      "document-features" = rec {
        crateName = "document-features";
        version = "0.2.10";
        edition = "2018";
        sha256 = "182h528pjyv4ppil2pd2nir46qrb393x5kvm4y51yhnjmgm6jsfb";
        procMacro = true;
        libName = "document_features";
        libPath = "lib.rs";
        authors = [
          "Slint Developers <info@slint.dev>"
        ];
        dependencies = [
          {
            name = "litrs";
            packageId = "litrs";
            usesDefaultFeatures = false;
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "downcast-rs" = rec {
        crateName = "downcast-rs";
        version = "1.2.1";
        edition = "2015";
        sha256 = "1lmrq383d1yszp7mg5i7i56b17x2lnn3kb91jwsq0zykvg2jbcvm";
        libName = "downcast_rs";
        authors = [
          "Ashish Myles <marcianx@gmail.com>"
          "Runji Wang <wangrunji0408@163.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "ecolor" = rec {
        crateName = "ecolor";
        version = "0.28.1";
        edition = "2021";
        sha256 = "1y4naczxw525dklls43fw1yjrzgciyvg3irzygh6sgqly4glasrf";
        authors = [
          "Emil Ernerfeldt <emil.ernerfeldt@gmail.com>"
          "Andreas Reich <reichandreas@gmx.de>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "emath";
            packageId = "emath";
            usesDefaultFeatures = false;
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        features = {
          "bytemuck" = [ "dep:bytemuck" ];
          "cint" = [ "dep:cint" ];
          "color-hex" = [ "dep:color-hex" ];
          "document-features" = [ "dep:document-features" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [
          "bytemuck"
          "serde"
        ];
      };
      "eframe" = rec {
        crateName = "eframe";
        version = "0.28.1";
        edition = "2021";
        sha256 = "1q0id3xy9qdgl50y465wwczj64zp2nngjchzkc9fwh9f1f0fz434";
        authors = [
          "Emil Ernerfeldt <emil.ernerfeldt@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            usesDefaultFeatures = false;
            features = [
              "no-rng"
              "std"
            ];
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "document-features";
            packageId = "document-features";
          }
          {
            name = "egui";
            packageId = "egui";
            usesDefaultFeatures = false;
            features = [
              "bytemuck"
              "log"
            ];
          }
          {
            name = "egui-wgpu";
            packageId = "egui-wgpu";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "winit" ];
          }
          {
            name = "egui-wgpu";
            packageId = "egui-wgpu";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "egui-winit";
            packageId = "egui-winit";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [
              "clipboard"
              "links"
            ];
          }
          {
            name = "egui_glow";
            packageId = "egui_glow";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "glow";
            packageId = "glow";
            optional = true;
          }
          {
            name = "glutin";
            packageId = "glutin";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "glutin-winit";
            packageId = "glutin-winit";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "image";
            packageId = "image";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "png" ];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "objc2";
            packageId = "objc2 0.5.2";
            target = { target, features }: (("macos" == target."os" or null));
          }
          {
            name = "objc2-app-kit";
            packageId = "objc2-app-kit";
            target = { target, features }: (("macos" == target."os" or null));
            features = [
              "NSApplication"
              "NSImage"
              "NSMenu"
              "NSMenuItem"
              "NSResponder"
            ];
          }
          {
            name = "objc2-foundation";
            packageId = "objc2-foundation";
            target = { target, features }: (("macos" == target."os" or null));
            features = [
              "block2"
              "NSData"
              "NSString"
            ];
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle 0.5.2";
            rename = "rwh_05";
            optional = true;
            features = [ "std" ];
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle 0.6.2";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [
              "BinaryType"
              "Blob"
              "Clipboard"
              "ClipboardEvent"
              "CompositionEvent"
              "console"
              "CssStyleDeclaration"
              "DataTransfer"
              "DataTransferItem"
              "DataTransferItemList"
              "Document"
              "DomRect"
              "DragEvent"
              "Element"
              "Event"
              "EventListener"
              "EventTarget"
              "ExtSRgb"
              "File"
              "FileList"
              "FocusEvent"
              "HtmlCanvasElement"
              "HtmlElement"
              "HtmlInputElement"
              "InputEvent"
              "KeyboardEvent"
              "Location"
              "MediaQueryList"
              "MediaQueryListEvent"
              "MouseEvent"
              "Navigator"
              "Node"
              "NodeList"
              "Performance"
              "ResizeObserver"
              "ResizeObserverBoxOptions"
              "ResizeObserverEntry"
              "ResizeObserverOptions"
              "ResizeObserverSize"
              "Storage"
              "Touch"
              "TouchEvent"
              "TouchList"
              "WebGl2RenderingContext"
              "WebglDebugRendererInfo"
              "WebGlRenderingContext"
              "WheelEvent"
              "Window"
            ];
          }
          {
            name = "web-time";
            packageId = "web-time";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (("windows" == target."os" or null));
            features = [ "winuser" ];
          }
          {
            name = "winit";
            packageId = "winit";
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "rwh_06" ];
          }
        ];
        features = {
          "accesskit" = [
            "egui/accesskit"
            "egui-winit/accesskit"
          ];
          "android-game-activity" = [ "egui-winit/android-game-activity" ];
          "android-native-activity" = [ "egui-winit/android-native-activity" ];
          "default" = [
            "accesskit"
            "default_fonts"
            "glow"
            "wayland"
            "web_screen_reader"
            "winit/default"
            "x11"
          ];
          "default_fonts" = [ "egui/default_fonts" ];
          "directories" = [ "dep:directories" ];
          "glow" = [
            "dep:egui_glow"
            "dep:glow"
            "dep:glutin-winit"
            "dep:glutin"
            "dep:rwh_05"
            "winit/rwh_05"
          ];
          "persistence" = [
            "directories"
            "egui-winit/serde"
            "egui/persistence"
            "ron"
            "serde"
          ];
          "puffin" = [
            "dep:puffin"
            "egui/puffin"
            "egui_glow?/puffin"
            "egui-wgpu?/puffin"
            "egui-winit/puffin"
          ];
          "ron" = [ "dep:ron" ];
          "serde" = [ "dep:serde" ];
          "wayland" = [
            "egui-winit/wayland"
            "egui-wgpu?/wayland"
            "egui_glow?/wayland"
          ];
          "web_screen_reader" = [
            "web-sys/SpeechSynthesis"
            "web-sys/SpeechSynthesisUtterance"
          ];
          "wgpu" = [
            "dep:wgpu"
            "dep:egui-wgpu"
            "dep:pollster"
          ];
          "x11" = [
            "egui-winit/x11"
            "egui-wgpu?/x11"
            "egui_glow?/x11"
          ];
        };
        resolvedDefaultFeatures = [
          "accesskit"
          "default"
          "default_fonts"
          "glow"
          "wayland"
          "web_screen_reader"
          "x11"
        ];
      };
      "egui" = rec {
        crateName = "egui";
        version = "0.28.1";
        edition = "2021";
        sha256 = "165pdkh84bh01vgi93w6fb7lz1ykrf957fv1y4qfd3bnl9q7xj90";
        authors = [
          "Emil Ernerfeldt <emil.ernerfeldt@gmail.com>"
        ];
        dependencies = [
          {
            name = "accesskit";
            packageId = "accesskit";
            optional = true;
          }
          {
            name = "ahash";
            packageId = "ahash";
            usesDefaultFeatures = false;
            features = [
              "no-rng"
              "std"
            ];
          }
          {
            name = "emath";
            packageId = "emath";
            usesDefaultFeatures = false;
          }
          {
            name = "epaint";
            packageId = "epaint";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
            features = [ "std" ];
          }
          {
            name = "nohash-hasher";
            packageId = "nohash-hasher";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [
              "derive"
              "derive"
              "rc"
            ];
          }
        ];
        features = {
          "accesskit" = [ "dep:accesskit" ];
          "bytemuck" = [ "epaint/bytemuck" ];
          "callstack" = [ "dep:backtrace" ];
          "cint" = [ "epaint/cint" ];
          "color-hex" = [ "epaint/color-hex" ];
          "deadlock_detection" = [ "epaint/deadlock_detection" ];
          "default" = [ "default_fonts" ];
          "default_fonts" = [ "epaint/default_fonts" ];
          "document-features" = [ "dep:document-features" ];
          "log" = [
            "dep:log"
            "epaint/log"
          ];
          "mint" = [ "epaint/mint" ];
          "persistence" = [
            "serde"
            "epaint/serde"
            "ron"
          ];
          "puffin" = [
            "dep:puffin"
            "epaint/puffin"
          ];
          "rayon" = [ "epaint/rayon" ];
          "ron" = [ "dep:ron" ];
          "serde" = [
            "dep:serde"
            "epaint/serde"
            "accesskit?/serde"
          ];
          "unity" = [ "epaint/unity" ];
        };
        resolvedDefaultFeatures = [
          "accesskit"
          "bytemuck"
          "default_fonts"
          "log"
          "serde"
        ];
      };
      "egui-wgpu" = rec {
        crateName = "egui-wgpu";
        version = "0.28.1";
        edition = "2021";
        sha256 = "0k4b4700a90nzd2z7svs3yww04g85grv9sr1ldi36z470z3sgis7";
        libName = "egui_wgpu";
        authors = [
          "Nils Hasenbanck <nils@hasenbanck.de>"
          "embotech <opensource@embotech.com>"
          "Emil Ernerfeldt <emil.ernerfeldt@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            usesDefaultFeatures = false;
            features = [
              "no-rng"
              "std"
            ];
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "document-features";
            packageId = "document-features";
          }
          {
            name = "egui";
            packageId = "egui";
            usesDefaultFeatures = false;
          }
          {
            name = "epaint";
            packageId = "epaint";
            usesDefaultFeatures = false;
            features = [ "bytemuck" ];
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "type-map";
            packageId = "type-map";
          }
          {
            name = "web-time";
            packageId = "web-time";
          }
          {
            name = "wgpu";
            packageId = "wgpu";
            usesDefaultFeatures = false;
            features = [
              "fragile-send-sync-non-atomic-wasm"
              "wgsl"
            ];
          }
          {
            name = "winit";
            packageId = "winit";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "rwh_06" ];
          }
        ];
        features = {
          "puffin" = [ "dep:puffin" ];
          "wayland" = [ "winit?/wayland" ];
          "winit" = [ "dep:winit" ];
          "x11" = [ "winit?/x11" ];
        };
        resolvedDefaultFeatures = [
          "wayland"
          "winit"
          "x11"
        ];
      };
      "egui-winit" = rec {
        crateName = "egui-winit";
        version = "0.28.1";
        edition = "2021";
        sha256 = "09j9gbzpk39zbypljls1cg4h6ahb0brbs3gnb4jzj6rlmxkf1i7s";
        libName = "egui_winit";
        authors = [
          "Emil Ernerfeldt <emil.ernerfeldt@gmail.com>"
        ];
        dependencies = [
          {
            name = "accesskit_winit";
            packageId = "accesskit_winit";
            optional = true;
          }
          {
            name = "ahash";
            packageId = "ahash";
            usesDefaultFeatures = false;
            features = [
              "no-rng"
              "std"
            ];
          }
          {
            name = "arboard";
            packageId = "arboard";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("android" == target."os" or null));
          }
          {
            name = "egui";
            packageId = "egui";
            usesDefaultFeatures = false;
            features = [ "log" ];
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle 0.6.2";
          }
          {
            name = "smithay-clipboard";
            packageId = "smithay-clipboard";
            optional = true;
            target =
              { target, features }:
              (
                ("linux" == target."os" or null)
                || ("dragonfly" == target."os" or null)
                || ("freebsd" == target."os" or null)
                || ("netbsd" == target."os" or null)
                || ("openbsd" == target."os" or null)
              );
          }
          {
            name = "web-time";
            packageId = "web-time";
          }
          {
            name = "webbrowser";
            packageId = "webbrowser";
            optional = true;
          }
          {
            name = "winit";
            packageId = "winit";
            usesDefaultFeatures = false;
            features = [ "rwh_06" ];
          }
        ];
        features = {
          "accesskit" = [
            "accesskit_winit"
            "egui/accesskit"
          ];
          "accesskit_winit" = [ "dep:accesskit_winit" ];
          "android-game-activity" = [ "winit/android-game-activity" ];
          "android-native-activity" = [ "winit/android-native-activity" ];
          "arboard" = [ "dep:arboard" ];
          "bytemuck" = [ "egui/bytemuck" ];
          "clipboard" = [
            "arboard"
            "smithay-clipboard"
          ];
          "default" = [
            "clipboard"
            "links"
            "wayland"
            "winit/default"
            "x11"
          ];
          "document-features" = [ "dep:document-features" ];
          "links" = [ "webbrowser" ];
          "puffin" = [
            "dep:puffin"
            "egui/puffin"
          ];
          "serde" = [
            "egui/serde"
            "dep:serde"
          ];
          "smithay-clipboard" = [ "dep:smithay-clipboard" ];
          "wayland" = [
            "winit/wayland"
            "bytemuck"
          ];
          "webbrowser" = [ "dep:webbrowser" ];
          "x11" = [
            "winit/x11"
            "bytemuck"
          ];
        };
        resolvedDefaultFeatures = [
          "accesskit"
          "accesskit_winit"
          "arboard"
          "bytemuck"
          "clipboard"
          "links"
          "smithay-clipboard"
          "wayland"
          "webbrowser"
          "x11"
        ];
      };
      "egui_glow" = rec {
        crateName = "egui_glow";
        version = "0.28.1";
        edition = "2021";
        sha256 = "00wifq10m1n7dphwjqr79k6h076762g0gbn42b3pr8fg725xqasf";
        authors = [
          "Emil Ernerfeldt <emil.ernerfeldt@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            usesDefaultFeatures = false;
            features = [
              "no-rng"
              "std"
            ];
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "egui";
            packageId = "egui";
            usesDefaultFeatures = false;
            features = [ "bytemuck" ];
          }
          {
            name = "glow";
            packageId = "glow";
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "memoffset";
            packageId = "memoffset 0.9.1";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "console" ];
          }
          {
            name = "winit";
            packageId = "winit";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "rwh_06" ];
          }
        ];
        features = {
          "clipboard" = [ "egui-winit?/clipboard" ];
          "document-features" = [ "dep:document-features" ];
          "egui-winit" = [ "dep:egui-winit" ];
          "links" = [ "egui-winit?/links" ];
          "puffin" = [
            "dep:puffin"
            "egui-winit?/puffin"
            "egui/puffin"
          ];
          "wayland" = [ "winit?/wayland" ];
          "winit" = [
            "egui-winit"
            "dep:winit"
          ];
          "x11" = [ "winit?/x11" ];
        };
        resolvedDefaultFeatures = [
          "wayland"
          "x11"
        ];
      };
      "egui_plot" = rec {
        crateName = "egui_plot";
        version = "0.28.1";
        edition = "2021";
        sha256 = "0rakhma45sxj5d6kiy7rfz4ksnvnyln1lk70awfvjhccfzzc9b67";
        authors = [
          "Emil Ernerfeldt <emil.ernerfeldt@gmail.com>"
          "Jan Haller <bromeon@gmail.com>"
          "Sven Niederberger <s-niederberger@outlook.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            usesDefaultFeatures = false;
            features = [
              "no-rng"
              "std"
            ];
          }
          {
            name = "egui";
            packageId = "egui";
            usesDefaultFeatures = false;
          }
          {
            name = "emath";
            packageId = "emath";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "document-features" = [ "dep:document-features" ];
          "serde" = [
            "dep:serde"
            "egui/serde"
          ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "egui_tiles" = rec {
        crateName = "egui_tiles";
        version = "0.9.1";
        edition = "2021";
        sha256 = "0qb50miws3mvyqbm81ayj35ykg5z10ykh3jnzg6amdv5hs6f3hly";
        authors = [
          "Emil Ernerfeldt <emil.ernerfeldt@gmail.com>"
          "rerun.io <opensource@rerun.io>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            usesDefaultFeatures = false;
            features = [
              "no-rng"
              "std"
            ];
          }
          {
            name = "egui";
            packageId = "egui";
            usesDefaultFeatures = false;
          }
          {
            name = "itertools";
            packageId = "itertools 0.13.0";
          }
          {
            name = "log";
            packageId = "log";
            features = [ "std" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        features = {
          "default" = [ "serde" ];
          "serde" = [
            "dep:serde"
            "egui/serde"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "serde"
        ];
      };
      "either" = rec {
        crateName = "either";
        version = "1.13.0";
        edition = "2018";
        sha256 = "1w2c1mybrd7vljyxk77y9f4w9dyjrmp3yp82mk7bcm8848fazcb0";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "use_std" ];
      };
      "emath" = rec {
        crateName = "emath";
        version = "0.28.1";
        edition = "2021";
        sha256 = "1rj92asn6fbxyzkdifcgq95iyhvp9l5na2c37pv8ish5hiq22sha";
        authors = [
          "Emil Ernerfeldt <emil.ernerfeldt@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        features = {
          "bytemuck" = [ "dep:bytemuck" ];
          "document-features" = [ "dep:document-features" ];
          "mint" = [ "dep:mint" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [
          "bytemuck"
          "serde"
        ];
      };
      "encode_unicode" = rec {
        crateName = "encode_unicode";
        version = "0.3.6";
        edition = "2015";
        sha256 = "07w3vzrhxh9lpjgsg2y5bwzfar2aq35mdznvcp3zjl0ssj7d4mx3";
        authors = [
          "Torbjørn Birch Moltu <t.b.moltu@lyse.net>"
        ];
        features = {
          "ascii" = [ "dep:ascii" ];
          "clippy" = [ "dep:clippy" ];
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "endi" = rec {
        crateName = "endi";
        version = "1.1.0";
        edition = "2021";
        sha256 = "1gxp388g2zzbncp3rdn60wxkr49xbhhx94nl9p4a6c41w4ma7n53";
        authors = [
          "Zeeshan Ali Khan <zeenix@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "enumflags2" = rec {
        crateName = "enumflags2";
        version = "0.7.10";
        edition = "2018";
        sha256 = "0g8kmhaqxq44v76wh971biljrgaqbjc8fbyw2d1z3wsnb5zxncnj";
        authors = [
          "maik klein <maikklein@googlemail.com>"
          "Maja Kądziołka <maya@compilercrim.es>"
        ];
        dependencies = [
          {
            name = "enumflags2_derive";
            packageId = "enumflags2_derive";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "serde" ];
      };
      "enumflags2_derive" = rec {
        crateName = "enumflags2_derive";
        version = "0.7.10";
        edition = "2018";
        sha256 = "1s29iqx3gj5l5s19a22lpn0nljhp5l9smqac99126n2qhfhlh3fy";
        procMacro = true;
        authors = [
          "maik klein <maikklein@googlemail.com>"
          "Maja Kądziołka <maya@compilercrim.es>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            usesDefaultFeatures = false;
            features = [
              "parsing"
              "printing"
              "derive"
              "proc-macro"
            ];
          }
        ];

      };
      "enumn" = rec {
        crateName = "enumn";
        version = "0.1.14";
        edition = "2021";
        sha256 = "0f1gagm6841sih4ipw46c7gn1idjgqfay1f5q6hchdwjg2rxd7ig";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
          }
        ];

      };
      "epaint" = rec {
        crateName = "epaint";
        version = "0.28.1";
        edition = "2021";
        sha256 = "00gsnxicbjz24k4c7g89jhxz5j8kpnbvf76djh751rvi0w5cq39z";
        authors = [
          "Emil Ernerfeldt <emil.ernerfeldt@gmail.com>"
        ];
        dependencies = [
          {
            name = "ab_glyph";
            packageId = "ab_glyph";
          }
          {
            name = "ahash";
            packageId = "ahash";
            usesDefaultFeatures = false;
            features = [
              "no-rng"
              "std"
            ];
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
            features = [ "derive" ];
          }
          {
            name = "ecolor";
            packageId = "ecolor";
            usesDefaultFeatures = false;
          }
          {
            name = "emath";
            packageId = "emath";
            usesDefaultFeatures = false;
          }
          {
            name = "log";
            packageId = "log";
            optional = true;
            features = [ "std" ];
          }
          {
            name = "nohash-hasher";
            packageId = "nohash-hasher";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [
              "derive"
              "derive"
              "rc"
            ];
          }
        ];
        features = {
          "bytemuck" = [
            "dep:bytemuck"
            "emath/bytemuck"
            "ecolor/bytemuck"
          ];
          "cint" = [ "ecolor/cint" ];
          "color-hex" = [ "ecolor/color-hex" ];
          "deadlock_detection" = [ "dep:backtrace" ];
          "default" = [ "default_fonts" ];
          "document-features" = [ "dep:document-features" ];
          "log" = [ "dep:log" ];
          "mint" = [ "emath/mint" ];
          "puffin" = [ "dep:puffin" ];
          "rayon" = [ "dep:rayon" ];
          "serde" = [
            "dep:serde"
            "ahash/serde"
            "emath/serde"
            "ecolor/serde"
          ];
        };
        resolvedDefaultFeatures = [
          "bytemuck"
          "default_fonts"
          "log"
          "serde"
        ];
      };
      "equivalent" = rec {
        crateName = "equivalent";
        version = "1.0.1";
        edition = "2015";
        sha256 = "1malmx5f4lkfvqasz319lq6gb3ddg19yzf9s8cykfsgzdmyq0hsl";

      };
      "errno" = rec {
        crateName = "errno";
        version = "0.3.9";
        edition = "2018";
        sha256 = "1fi0m0493maq1jygcf1bya9cymz2pc1mqxj26bdv7yjd37v5qk2k";
        authors = [
          "Chris Wong <lambda.fairy@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasi" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_System_Diagnostics_Debug"
            ];
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "libc/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "error-code" = rec {
        crateName = "error-code";
        version = "3.3.1";
        edition = "2018";
        sha256 = "0bx9hw3pahzqym8jvb0ln4qsabnysgn98mikyh2afhk9rif31nd5";
        libName = "error_code";
        authors = [
          "Douman <douman@gmx.se>"
        ];
        features = {
        };
      };
      "event-listener 2.5.3" = rec {
        crateName = "event-listener";
        version = "2.5.3";
        edition = "2018";
        sha256 = "1q4w3pndc518crld6zsqvvpy9lkzwahp2zgza9kbzmmqh9gif1h2";
        libName = "event_listener";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];

      };
      "event-listener 3.1.0" = rec {
        crateName = "event-listener";
        version = "3.1.0";
        edition = "2021";
        sha256 = "1hihkg6ihvb6p9yi7nq11di8mhd5y0iqv81ij6h0rf0fvsy7ff6r";
        libName = "event_listener";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            usesDefaultFeatures = false;
          }
          {
            name = "parking";
            packageId = "parking";
            optional = true;
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "parking" = [ "dep:parking" ];
          "portable-atomic" = [
            "portable-atomic-util"
            "portable_atomic_crate"
          ];
          "portable-atomic-util" = [ "dep:portable-atomic-util" ];
          "portable_atomic_crate" = [ "dep:portable_atomic_crate" ];
          "std" = [
            "concurrent-queue/std"
            "parking"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "parking"
          "std"
        ];
      };
      "event-listener 5.3.1" = rec {
        crateName = "event-listener";
        version = "5.3.1";
        edition = "2021";
        sha256 = "1fkm6q4hjn61wl52xyqyyxai0x9w0ngrzi0wf1qsf8vhsadvwck0";
        libName = "event_listener";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            usesDefaultFeatures = false;
          }
          {
            name = "parking";
            packageId = "parking";
            optional = true;
            target = { target, features }: (!(builtins.elem "wasm" target."family"));
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "loom" = [
            "concurrent-queue/loom"
            "parking?/loom"
            "dep:loom"
          ];
          "parking" = [ "dep:parking" ];
          "portable-atomic" = [
            "portable-atomic-util"
            "portable_atomic_crate"
            "concurrent-queue/portable-atomic"
          ];
          "portable-atomic-util" = [ "dep:portable-atomic-util" ];
          "portable_atomic_crate" = [ "dep:portable_atomic_crate" ];
          "std" = [
            "concurrent-queue/std"
            "parking"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "parking"
          "std"
        ];
      };
      "event-listener-strategy" = rec {
        crateName = "event-listener-strategy";
        version = "0.5.2";
        edition = "2021";
        sha256 = "18f5ri227khkayhv3ndv7yl4rnasgwksl2jhwgafcxzr7324s88g";
        libName = "event_listener_strategy";
        authors = [
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "event-listener";
            packageId = "event-listener 5.3.1";
            usesDefaultFeatures = false;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "event-listener/std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "extern_traces_viewer" = rec {
        crateName = "extern_traces_viewer";
        version = "0.0.1";
        edition = "2021";
        crateBin = [
          {
            name = "extern_traces_viewer";
            path = "src/main.rs";
            requiredFeatures = [ ];
          }
        ];
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./packages/extern_traces_viewer;
        };
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            features = [ "backtrace" ];
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "derive" ];
          }
          {
            name = "clap";
            packageId = "clap";
            features = [ "derive" ];
          }
          {
            name = "eframe";
            packageId = "eframe";
          }
          {
            name = "egui_plot";
            packageId = "egui_plot";
          }
          {
            name = "egui_tiles";
            packageId = "egui_tiles";
          }
          {
            name = "gcn";
            packageId = "gcn";
          }
          {
            name = "gcn_extract";
            packageId = "gcn_extract";
          }
          {
            name = "gcn_spirv";
            packageId = "gcn_spirv";
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "itertools";
            packageId = "itertools 0.11.0";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "pm4";
            packageId = "pm4";
          }
          {
            name = "ps4libdoc";
            packageId = "ps4libdoc";
          }
          {
            name = "renderdoc";
            packageId = "renderdoc";
            optional = true;
          }
          {
            name = "rfd";
            packageId = "rfd";
          }
          {
            name = "rspirv";
            packageId = "rspirv";
          }
          {
            name = "strum";
            packageId = "strum";
            features = [ "derive" ];
          }
          {
            name = "vulkano";
            packageId = "vulkano";
          }
          {
            name = "vulkano-shaders";
            packageId = "vulkano-shaders";
          }
          {
            name = "zorder";
            packageId = "zorder";
          }
        ];
        features = {
          "renderdoc" = [ "dep:renderdoc" ];
          "renderdoc_hooks" = [ "renderdoc" ];
        };
        resolvedDefaultFeatures = [
          "renderdoc"
          "renderdoc_hooks"
        ];
      };
      "fastrand 1.9.0" = rec {
        crateName = "fastrand";
        version = "1.9.0";
        edition = "2018";
        sha256 = "1gh12m56265ihdbzh46bhh0jf74i197wm51jg1cw75q7ggi96475";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "instant";
            packageId = "instant";
            target =
              { target, features }: (("wasm32" == target."arch" or null) && (!("wasi" == target."os" or null)));
          }
        ];
        devDependencies = [
          {
            name = "instant";
            packageId = "instant";
            target =
              { target, features }: (("wasm32" == target."arch" or null) && (!("wasi" == target."os" or null)));
            features = [ "wasm-bindgen" ];
          }
        ];

      };
      "fastrand 2.1.1" = rec {
        crateName = "fastrand";
        version = "2.1.1";
        edition = "2018";
        sha256 = "19nyzdq3ha4g173364y2wijmd6jlyms8qx40daqkxsnl458jmh78";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
          "getrandom" = [ "dep:getrandom" ];
          "js" = [
            "std"
            "getrandom"
          ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "fdeflate" = rec {
        crateName = "fdeflate";
        version = "0.3.4";
        edition = "2021";
        sha256 = "0ig65nz4wcqaa3y109sh7yv155ldfyph6bs2ifmz1vad1vizx6sg";
        authors = [
          "The image-rs Developers"
        ];
        dependencies = [
          {
            name = "simd-adler32";
            packageId = "simd-adler32";
          }
        ];

      };
      "flate2" = rec {
        crateName = "flate2";
        version = "1.0.33";
        edition = "2018";
        sha256 = "0lzj9cmr1pcwrgr4nnxjihnksqhxmygcqqdqcjnhbvslh3k1njij";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Josh Triplett <josh@joshtriplett.org>"
        ];
        dependencies = [
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "with-alloc" ];
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null)));
            features = [ "with-alloc" ];
          }
        ];
        features = {
          "any_zlib" = [ "any_impl" ];
          "cloudflare-zlib-sys" = [ "dep:cloudflare-zlib-sys" ];
          "cloudflare_zlib" = [
            "any_zlib"
            "cloudflare-zlib-sys"
          ];
          "default" = [ "rust_backend" ];
          "libz-ng-sys" = [ "dep:libz-ng-sys" ];
          "libz-rs-sys" = [ "dep:libz-rs-sys" ];
          "libz-sys" = [ "dep:libz-sys" ];
          "miniz-sys" = [ "rust_backend" ];
          "miniz_oxide" = [ "dep:miniz_oxide" ];
          "rust_backend" = [
            "miniz_oxide"
            "any_impl"
          ];
          "zlib" = [
            "any_zlib"
            "libz-sys"
          ];
          "zlib-default" = [
            "any_zlib"
            "libz-sys/default"
          ];
          "zlib-ng" = [
            "any_zlib"
            "libz-ng-sys"
          ];
          "zlib-ng-compat" = [
            "zlib"
            "libz-sys/zlib-ng"
          ];
          "zlib-rs" = [
            "any_zlib"
            "libz-rs-sys"
          ];
        };
        resolvedDefaultFeatures = [
          "any_impl"
          "default"
          "miniz_oxide"
          "rust_backend"
        ];
      };
      "float-cmp" = rec {
        crateName = "float-cmp";
        version = "0.9.0";
        edition = "2018";
        sha256 = "1i799ksbq7fj9rm9m82g1yqgm6xi3jnrmylddmqknmksajylpplq";
        libName = "float_cmp";
        authors = [
          "Mike Dilger <mike@mikedilger.com>"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "ratio" ];
          "num-traits" = [ "dep:num-traits" ];
          "ratio" = [ "num-traits" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "num-traits"
          "ratio"
        ];
      };
      "fnv" = rec {
        crateName = "fnv";
        version = "1.0.7";
        edition = "2015";
        sha256 = "1hc2mcqha06aibcaza94vbi81j6pr9a1bbxrxjfhc91zin8yr7iz";
        libPath = "lib.rs";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "foreign-types" = rec {
        crateName = "foreign-types";
        version = "0.5.0";
        edition = "2018";
        sha256 = "0rfr2zfxnx9rz3292z5nyk8qs2iirznn5ff3rd4vgdwza6mdjdyp";
        libName = "foreign_types";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "foreign-types-macros";
            packageId = "foreign-types-macros";
          }
          {
            name = "foreign-types-shared";
            packageId = "foreign-types-shared";
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "foreign-types-macros/std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "foreign-types-macros" = rec {
        crateName = "foreign-types-macros";
        version = "0.2.3";
        edition = "2018";
        sha256 = "0hjpii8ny6l7h7jpns2cp9589016l8mlrpaigcnayjn9bdc6qp0s";
        procMacro = true;
        libName = "foreign_types_macros";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "foreign-types-shared" = rec {
        crateName = "foreign-types-shared";
        version = "0.3.1";
        edition = "2018";
        sha256 = "0nykdvv41a3d4py61bylmlwjhhvdm0b3bcj9vxhqgxaxnp5ik6ma";
        libName = "foreign_types_shared";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];

      };
      "form_urlencoded" = rec {
        crateName = "form_urlencoded";
        version = "1.2.1";
        edition = "2018";
        sha256 = "0milh8x7nl4f450s3ddhg57a3flcv6yq8hlkyk6fyr3mcb128dp1";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "percent-encoding/alloc" ];
          "default" = [ "std" ];
          "std" = [
            "alloc"
            "percent-encoding/std"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "futures-channel" = rec {
        crateName = "futures-channel";
        version = "0.3.30";
        edition = "2018";
        sha256 = "0y6b7xxqdjm9hlcjpakcg41qfl7lihf6gavk8fyqijsxhvbzgj7a";
        libName = "futures_channel";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "futures-core/alloc" ];
          "default" = [ "std" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "sink" = [ "futures-sink" ];
          "std" = [
            "alloc"
            "futures-core/std"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "futures-core" = rec {
        crateName = "futures-core";
        version = "0.3.30";
        edition = "2018";
        sha256 = "07aslayrn3lbggj54kci0ishmd1pr367fp7iks7adia1p05miinz";
        libName = "futures_core";
        features = {
          "default" = [ "std" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "futures-io" = rec {
        crateName = "futures-io";
        version = "0.3.30";
        edition = "2018";
        sha256 = "1hgh25isvsr4ybibywhr4dpys8mjnscw4wfxxwca70cn1gi26im4";
        libName = "futures_io";
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "futures-lite 1.13.0" = rec {
        crateName = "futures-lite";
        version = "1.13.0";
        edition = "2018";
        sha256 = "1kkbqhaib68nzmys2dc8j9fl2bwzf2s91jfk13lb2q3nwhfdbaa9";
        libName = "futures_lite";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Contributors to futures-rs"
        ];
        dependencies = [
          {
            name = "fastrand";
            packageId = "fastrand 1.9.0";
            optional = true;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "parking";
            packageId = "parking";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "waker-fn";
            packageId = "waker-fn";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "fastrand" = [ "dep:fastrand" ];
          "futures-io" = [ "dep:futures-io" ];
          "memchr" = [ "dep:memchr" ];
          "parking" = [ "dep:parking" ];
          "std" = [
            "alloc"
            "fastrand"
            "futures-io"
            "parking"
            "memchr"
            "waker-fn"
          ];
          "waker-fn" = [ "dep:waker-fn" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "fastrand"
          "futures-io"
          "memchr"
          "parking"
          "std"
          "waker-fn"
        ];
      };
      "futures-lite 2.3.0" = rec {
        crateName = "futures-lite";
        version = "2.3.0";
        edition = "2021";
        sha256 = "19gk4my8zhfym6gwnpdjiyv2hw8cc098skkbkhryjdaf0yspwljj";
        libName = "futures_lite";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "Contributors to futures-rs"
        ];
        dependencies = [
          {
            name = "fastrand";
            packageId = "fastrand 2.1.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
          {
            name = "parking";
            packageId = "parking";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];
        features = {
          "default" = [
            "race"
            "std"
          ];
          "fastrand" = [ "dep:fastrand" ];
          "futures-io" = [ "dep:futures-io" ];
          "memchr" = [ "dep:memchr" ];
          "parking" = [ "dep:parking" ];
          "race" = [ "fastrand" ];
          "std" = [
            "alloc"
            "fastrand/std"
            "futures-io"
            "parking"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "fastrand"
          "futures-io"
          "parking"
          "race"
          "std"
        ];
      };
      "futures-macro" = rec {
        crateName = "futures-macro";
        version = "0.3.30";
        edition = "2018";
        sha256 = "1b49qh9d402y8nka4q6wvvj0c88qq91wbr192mdn5h54nzs0qxc7";
        procMacro = true;
        libName = "futures_macro";
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" ];
          }
        ];

      };
      "futures-sink" = rec {
        crateName = "futures-sink";
        version = "0.3.30";
        edition = "2018";
        sha256 = "1dag8xyyaya8n8mh8smx7x6w2dpmafg2din145v973a3hw7f1f4z";
        libName = "futures_sink";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "futures-task" = rec {
        crateName = "futures-task";
        version = "0.3.30";
        edition = "2018";
        sha256 = "013h1724454hj8qczp8vvs10qfiqrxr937qsrv6rhii68ahlzn1q";
        libName = "futures_task";
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "std"
        ];
      };
      "futures-util" = rec {
        crateName = "futures-util";
        version = "0.3.30";
        edition = "2018";
        sha256 = "0j0xqhcir1zf2dcbpd421kgw6wvsk0rpxflylcysn1rlp3g02r1x";
        libName = "futures_util";
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "futures-macro";
            packageId = "futures-macro";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "futures-task";
            packageId = "futures-task";
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "pin-utils";
            packageId = "pin-utils";
          }
          {
            name = "slab";
            packageId = "slab";
            optional = true;
          }
        ];
        features = {
          "alloc" = [
            "futures-core/alloc"
            "futures-task/alloc"
          ];
          "async-await-macro" = [
            "async-await"
            "futures-macro"
          ];
          "channel" = [
            "std"
            "futures-channel"
          ];
          "compat" = [
            "std"
            "futures_01"
          ];
          "default" = [
            "std"
            "async-await"
            "async-await-macro"
          ];
          "futures-channel" = [ "dep:futures-channel" ];
          "futures-io" = [ "dep:futures-io" ];
          "futures-macro" = [ "dep:futures-macro" ];
          "futures-sink" = [ "dep:futures-sink" ];
          "futures_01" = [ "dep:futures_01" ];
          "io" = [
            "std"
            "futures-io"
            "memchr"
          ];
          "io-compat" = [
            "io"
            "compat"
            "tokio-io"
          ];
          "memchr" = [ "dep:memchr" ];
          "portable-atomic" = [ "futures-core/portable-atomic" ];
          "sink" = [ "futures-sink" ];
          "slab" = [ "dep:slab" ];
          "std" = [
            "alloc"
            "futures-core/std"
            "futures-task/std"
            "slab"
          ];
          "tokio-io" = [ "dep:tokio-io" ];
          "unstable" = [
            "futures-core/unstable"
            "futures-task/unstable"
          ];
          "write-all-vectored" = [ "io" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "async-await"
          "async-await-macro"
          "default"
          "futures-io"
          "futures-macro"
          "futures-sink"
          "io"
          "memchr"
          "sink"
          "slab"
          "std"
        ];
      };
      "gcn" = rec {
        crateName = "gcn";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./packages/gcn;
        };
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            usesDefaultFeatures = false;
          }
          {
            name = "bits";
            packageId = "bits";
          }
          {
            name = "bits_macros";
            packageId = "bits_macros";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "gcn_internal_macros";
            packageId = "gcn_internal_macros";
          }
          {
            name = "snafu";
            packageId = "snafu";
            usesDefaultFeatures = false;
            features = [ "rust_1_81" ];
          }
          {
            name = "strum";
            packageId = "strum";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        devDependencies = [
          {
            name = "insta";
            packageId = "insta";
          }
          {
            name = "snapshot_test_utils";
            packageId = "snapshot_test_utils";
          }
        ];

      };
      "gcn_extract" = rec {
        crateName = "gcn_extract";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./packages/gcn_extract;
        };
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            usesDefaultFeatures = false;
          }
          {
            name = "bits";
            packageId = "bits";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "gcn";
            packageId = "gcn";
          }
        ];

      };
      "gcn_internal_macros" = rec {
        crateName = "gcn_internal_macros";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./packages/gcn_internal_macros;
        };
        procMacro = true;
        dependencies = [
          {
            name = "macro_utils";
            packageId = "macro_utils";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [
              "full"
              "extra-traits"
            ];
          }
        ];

      };
      "gcn_spirv" = rec {
        crateName = "gcn_spirv";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./packages/gcn_spirv;
        };
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "bits";
            packageId = "bits";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "gcn";
            packageId = "gcn";
          }
          {
            name = "itertools";
            packageId = "itertools 0.12.1";
          }
          {
            name = "pm4";
            packageId = "pm4";
          }
          {
            name = "rspirv";
            packageId = "rspirv";
          }
          {
            name = "vulkano";
            packageId = "vulkano";
          }
        ];
        devDependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "insta";
            packageId = "insta";
          }
          {
            name = "sha2";
            packageId = "sha2";
          }
          {
            name = "snapshot_test_utils";
            packageId = "snapshot_test_utils";
          }
          {
            name = "spirv-tools";
            packageId = "spirv-tools";
          }
        ];

      };
      "generic-array" = rec {
        crateName = "generic-array";
        version = "0.14.7";
        edition = "2015";
        sha256 = "16lyyrzrljfq424c3n8kfwkqihlimmsg5nhshbbp48np3yjrqr45";
        libName = "generic_array";
        authors = [
          "Bartłomiej Kamiński <fizyk20@gmail.com>"
          "Aaron Trent <novacrazy@gmail.com>"
        ];
        dependencies = [
          {
            name = "typenum";
            packageId = "typenum";
          }
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "zeroize" = [ "dep:zeroize" ];
        };
        resolvedDefaultFeatures = [ "more_lengths" ];
      };
      "gethostname" = rec {
        crateName = "gethostname";
        version = "0.4.3";
        edition = "2021";
        sha256 = "063qqhznyckwx9n4z4xrmdv10s0fi6kbr17r6bi1yjifki2y0xh1";
        authors = [
          "Sebastian Wiesner <sebastian@swsnr.de>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(target."windows" or false));
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.48.5";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "getrandom" = rec {
        crateName = "getrandom";
        version = "0.2.15";
        edition = "2018";
        sha256 = "1mzlnrb3dgyd1fb84gvw10pyr8wdqdl4ry4sr64i1s8an66pqmn4";
        authors = [
          "The Rand Project Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "wasi";
            packageId = "wasi";
            usesDefaultFeatures = false;
            target = { target, features }: ("wasi" == target."os" or null);
          }
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "js" = [
            "wasm-bindgen"
            "js-sys"
          ];
          "js-sys" = [ "dep:js-sys" ];
          "rustc-dep-of-std" = [
            "compiler_builtins"
            "core"
            "libc/rustc-dep-of-std"
            "wasi/rustc-dep-of-std"
          ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "gimli" = rec {
        crateName = "gimli";
        version = "0.31.0";
        edition = "2018";
        sha256 = "0r1d55xdi1k2l5ah9p0n23i93pm47cl8apjm8rwgqd1j7yi5w21j";
        features = {
          "default" = [
            "read-all"
            "write"
          ];
          "endian-reader" = [
            "read"
            "dep:stable_deref_trait"
          ];
          "fallible-iterator" = [ "dep:fallible-iterator" ];
          "read" = [ "read-core" ];
          "read-all" = [
            "read"
            "std"
            "fallible-iterator"
            "endian-reader"
          ];
          "rustc-dep-of-std" = [
            "dep:core"
            "dep:alloc"
            "dep:compiler_builtins"
          ];
          "std" = [
            "fallible-iterator?/std"
            "stable_deref_trait?/std"
          ];
          "write" = [ "dep:indexmap" ];
        };
        resolvedDefaultFeatures = [
          "read"
          "read-core"
        ];
      };
      "gl_generator" = rec {
        crateName = "gl_generator";
        version = "0.14.0";
        edition = "2015";
        sha256 = "0k8j1hmfnff312gy7x1aqjzcm8zxid7ij7dlb8prljib7b1dz58s";
        libPath = "lib.rs";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
          "Corey Richardson"
          "Arseny Kapoulkine"
        ];
        dependencies = [
          {
            name = "khronos_api";
            packageId = "khronos_api";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "xml-rs";
            packageId = "xml-rs";
          }
        ];
        features = {
        };
      };
      "glob" = rec {
        crateName = "glob";
        version = "0.3.1";
        edition = "2015";
        sha256 = "16zca52nglanv23q5qrwd5jinw3d3as5ylya6y1pbx47vkxvrynj";
        authors = [
          "The Rust Project Developers"
        ];

      };
      "glow" = rec {
        crateName = "glow";
        version = "0.13.1";
        edition = "2021";
        sha256 = "1c91n554dp4bdp5d86rpl77ryv6rjyrqn7735m7mfcivqh28wd5x";
        authors = [
          "Joshua Groves <josh@joshgroves.com>"
          "Dzmitry Malyshau <kvarkus@gmail.com>"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "slotmap";
            packageId = "slotmap";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            rename = "web_sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [
              "Document"
              "Element"
              "HtmlCanvasElement"
              "HtmlImageElement"
              "HtmlVideoElement"
              "ImageBitmap"
              "VideoFrame"
              "WebGlActiveInfo"
              "WebGlBuffer"
              "WebGlFramebuffer"
              "WebGlProgram"
              "WebGlQuery"
              "WebGlRenderbuffer"
              "WebGlRenderingContext"
              "WebGl2RenderingContext"
              "WebGlSampler"
              "WebGlShader"
              "WebGlSync"
              "WebGlTexture"
              "WebGlTransformFeedback"
              "WebGlUniformLocation"
              "WebGlVertexArrayObject"
              "Window"
              "AngleInstancedArrays"
              "ExtBlendMinmax"
              "ExtColorBufferFloat"
              "ExtColorBufferHalfFloat"
              "ExtDisjointTimerQuery"
              "ExtFragDepth"
              "ExtShaderTextureLod"
              "ExtSRgb"
              "ExtTextureFilterAnisotropic"
              "OesElementIndexUint"
              "OesStandardDerivatives"
              "OesTextureFloat"
              "OesTextureFloatLinear"
              "OesTextureHalfFloat"
              "OesTextureHalfFloatLinear"
              "OesVertexArrayObject"
              "WebglColorBufferFloat"
              "WebglCompressedTextureAstc"
              "WebglCompressedTextureEtc"
              "WebglCompressedTextureEtc1"
              "WebglCompressedTexturePvrtc"
              "WebglCompressedTextureS3tc"
              "WebglCompressedTextureS3tcSrgb"
              "WebglDebugRendererInfo"
              "WebglDebugShaders"
              "WebglDepthTexture"
              "WebglDrawBuffers"
              "WebglLoseContext"
              "OvrMultiview2"
            ];
          }
        ];
        features = {
          "log" = [ "dep:log" ];
        };
      };
      "glutin" = rec {
        crateName = "glutin";
        version = "0.31.3";
        edition = "2021";
        sha256 = "0il7aija3y17p3sz6qqzxyahrgp5crqzbf002fnr3nc69spd9z0q";
        authors = [
          "Kirill Chibisov <contact@kchibisov.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "cgl";
            packageId = "cgl";
            target = { target, features }: (("macos" == target."os" or null));
          }
          {
            name = "core-foundation";
            packageId = "core-foundation 0.9.4";
            target = { target, features }: (("macos" == target."os" or null));
          }
          {
            name = "dispatch";
            packageId = "dispatch";
            target = { target, features }: (("macos" == target."os" or null));
          }
          {
            name = "glutin_egl_sys";
            packageId = "glutin_egl_sys";
            optional = true;
            target =
              { target, features }:
              (
                ("linux" == target."os" or null)
                || ("freebsd" == target."os" or null)
                || ("dragonfly" == target."os" or null)
                || ("netbsd" == target."os" or null)
                || ("openbsd" == target."os" or null)
              );
          }
          {
            name = "glutin_egl_sys";
            packageId = "glutin_egl_sys";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "glutin_egl_sys";
            packageId = "glutin_egl_sys";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "glutin_glx_sys";
            packageId = "glutin_glx_sys";
            optional = true;
            target =
              { target, features }:
              (
                ("linux" == target."os" or null)
                || ("freebsd" == target."os" or null)
                || ("dragonfly" == target."os" or null)
                || ("netbsd" == target."os" or null)
                || ("openbsd" == target."os" or null)
              );
          }
          {
            name = "glutin_wgl_sys";
            packageId = "glutin_wgl_sys";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "icrate";
            packageId = "icrate";
            target = { target, features }: (("macos" == target."os" or null));
            features = [
              "dispatch"
              "Foundation"
              "Foundation_NSArray"
              "Foundation_NSThread"
              "AppKit"
              "AppKit_NSView"
              "AppKit_NSWindow"
            ];
          }
          {
            name = "libloading";
            packageId = "libloading 0.8.5";
            optional = true;
          }
          {
            name = "objc2";
            packageId = "objc2 0.4.1";
            target = { target, features }: (("macos" == target."os" or null));
            features = [ "relax-void-encoding" ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle 0.5.2";
          }
          {
            name = "wayland-sys";
            packageId = "wayland-sys";
            optional = true;
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                ("linux" == target."os" or null)
                || ("freebsd" == target."os" or null)
                || ("dragonfly" == target."os" or null)
                || ("netbsd" == target."os" or null)
                || ("openbsd" == target."os" or null)
              );
            features = [
              "egl"
              "client"
              "dlopen"
            ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            optional = true;
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_Graphics_Gdi"
              "Win32_Graphics_OpenGL"
              "Win32_System_LibraryLoader"
              "Win32_UI_WindowsAndMessaging"
            ];
          }
          {
            name = "x11-dl";
            packageId = "x11-dl";
            optional = true;
            target =
              { target, features }:
              (
                ("linux" == target."os" or null)
                || ("freebsd" == target."os" or null)
                || ("dragonfly" == target."os" or null)
                || ("netbsd" == target."os" or null)
                || ("openbsd" == target."os" or null)
              );
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases 0.1.1";
          }
        ];
        features = {
          "default" = [
            "egl"
            "glx"
            "x11"
            "wayland"
            "wgl"
          ];
          "egl" = [
            "glutin_egl_sys"
            "libloading"
          ];
          "glutin_egl_sys" = [ "dep:glutin_egl_sys" ];
          "glutin_glx_sys" = [ "dep:glutin_glx_sys" ];
          "glutin_wgl_sys" = [ "dep:glutin_wgl_sys" ];
          "glx" = [
            "x11"
            "glutin_glx_sys"
            "libloading"
          ];
          "libloading" = [ "dep:libloading" ];
          "wayland" = [
            "wayland-sys"
            "egl"
          ];
          "wayland-sys" = [ "dep:wayland-sys" ];
          "wgl" = [
            "glutin_wgl_sys"
            "windows-sys"
          ];
          "windows-sys" = [ "dep:windows-sys" ];
          "x11" = [ "x11-dl" ];
          "x11-dl" = [ "dep:x11-dl" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "egl"
          "glutin_egl_sys"
          "glutin_glx_sys"
          "glutin_wgl_sys"
          "glx"
          "libloading"
          "wayland"
          "wayland-sys"
          "wgl"
          "windows-sys"
          "x11"
          "x11-dl"
        ];
      };
      "glutin-winit" = rec {
        crateName = "glutin-winit";
        version = "0.4.2";
        edition = "2021";
        sha256 = "0dbppmj0m2i5df4ww565f5kg3vxmjbq5c7hqql988fzp4jxdzg0y";
        libName = "glutin_winit";
        authors = [
          "Kirill Chibisov <contact@kchibisov.com>"
        ];
        dependencies = [
          {
            name = "glutin";
            packageId = "glutin";
            usesDefaultFeatures = false;
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle 0.5.2";
          }
          {
            name = "winit";
            packageId = "winit";
            usesDefaultFeatures = false;
            features = [ "rwh_05" ];
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases 0.1.1";
          }
        ];
        features = {
          "default" = [
            "egl"
            "glx"
            "x11"
            "wayland"
            "wgl"
          ];
          "egl" = [ "glutin/egl" ];
          "glx" = [
            "glutin/glx"
            "glutin/x11"
            "winit/x11"
            "x11"
          ];
          "wayland" = [
            "glutin/wayland"
            "winit/wayland"
          ];
          "wgl" = [ "glutin/wgl" ];
          "x11" = [
            "glutin/x11"
            "winit/x11"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "egl"
          "glx"
          "wayland"
          "wgl"
          "x11"
        ];
      };
      "glutin_egl_sys" = rec {
        crateName = "glutin_egl_sys";
        version = "0.6.0";
        edition = "2021";
        sha256 = "1kcv5pdpdsyhzpiahga15kk7yd4m64ia2k6xqcrz97ihylimdk3p";
        authors = [
          "Kirill Chibisov <contact@kchibisov.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_Graphics_Gdi"
            ];
          }
        ];
        buildDependencies = [
          {
            name = "gl_generator";
            packageId = "gl_generator";
          }
        ];

      };
      "glutin_glx_sys" = rec {
        crateName = "glutin_glx_sys";
        version = "0.5.0";
        edition = "2021";
        sha256 = "0krv3chf5sy83rsfwq267paczskpwnb5gcw0agac5p0hdilgsrd1";
        authors = [
          "Kirill Chibisov <contact@kchibisov.com>"
        ];
        dependencies = [
          {
            name = "x11-dl";
            packageId = "x11-dl";
            target =
              { target, features }:
              (
                ("linux" == target."os" or null)
                || ("freebsd" == target."os" or null)
                || ("dragonfly" == target."os" or null)
                || ("netbsd" == target."os" or null)
                || ("openbsd" == target."os" or null)
              );
          }
        ];
        buildDependencies = [
          {
            name = "gl_generator";
            packageId = "gl_generator";
          }
        ];

      };
      "glutin_wgl_sys" = rec {
        crateName = "glutin_wgl_sys";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1b9f6qjc8gwhfxac4fpxkvv524l493f6b6q764nslpwmmjnri03c";
        authors = [
          "Kirill Chibisov <contact@kchibisov.com>"
        ];
        buildDependencies = [
          {
            name = "gl_generator";
            packageId = "gl_generator";
          }
        ];

      };
      "gpu-alloc" = rec {
        crateName = "gpu-alloc";
        version = "0.6.0";
        edition = "2018";
        sha256 = "0wd1wq7qs8ja0cp37ajm9p1r526sp6w0kvjp3xx24jsrjfx2vkgv";
        libName = "gpu_alloc";
        authors = [
          "Zakarum <zakarumych@ya.ru>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
            usesDefaultFeatures = false;
          }
          {
            name = "gpu-alloc-types";
            packageId = "gpu-alloc-types";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [
            "dep:serde"
            "bitflags/serde"
          ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "gpu-alloc-types" = rec {
        crateName = "gpu-alloc-types";
        version = "0.3.0";
        edition = "2018";
        sha256 = "190wxsp9q8c59xybkfrlzqqyrxj6z39zamadk1q7v0xad2s07zwq";
        libName = "gpu_alloc_types";
        authors = [
          "Zakarum <zakarumych@ya.ru>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
            usesDefaultFeatures = false;
          }
        ];

      };
      "gpu-allocator" = rec {
        crateName = "gpu-allocator";
        version = "0.25.0";
        edition = "2021";
        sha256 = "11484bhn0p8555gprr58kmz1aqccz1zqbx5ww4c3rl38i4qzcmkg";
        libName = "gpu_allocator";
        authors = [
          "Traverse Research <opensource@traverseresearch.nl>"
        ];
        dependencies = [
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "presser";
            packageId = "presser";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "winapi";
            packageId = "winapi";
            optional = true;
            target = { target, features }: (target."windows" or false);
            features = [
              "d3d12"
              "winerror"
              "impl-default"
              "impl-debug"
            ];
          }
          {
            name = "windows";
            packageId = "windows 0.52.0";
            optional = true;
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_Graphics"
              "Win32_Graphics_Direct3D"
              "Win32_Graphics_Direct3D12"
              "Win32_Graphics_Dxgi"
              "Win32_Graphics_Dxgi_Common"
            ];
          }
        ];
        devDependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [
              "d3d12"
              "d3d12sdklayers"
              "dxgi1_6"
              "winerror"
              "impl-default"
              "impl-debug"
              "winuser"
              "windowsx"
              "libloaderapi"
            ];
          }
          {
            name = "windows";
            packageId = "windows 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_Graphics"
              "Win32_Graphics_Direct3D"
              "Win32_Graphics_Direct3D12"
              "Win32_Graphics_Dxgi"
              "Win32_Graphics_Dxgi_Common"
            ];
          }
        ];
        features = {
          "ash" = [ "dep:ash" ];
          "d3d12" = [ "windows" ];
          "default" = [
            "d3d12"
            "vulkan"
          ];
          "egui" = [ "dep:egui" ];
          "egui_extras" = [ "dep:egui_extras" ];
          "public-winapi" = [ "dep:winapi" ];
          "visualizer" = [
            "egui"
            "egui_extras"
          ];
          "vulkan" = [ "ash" ];
          "windows" = [ "dep:windows" ];
        };
        resolvedDefaultFeatures = [
          "d3d12"
          "public-winapi"
          "windows"
        ];
      };
      "gpu-descriptor" = rec {
        crateName = "gpu-descriptor";
        version = "0.3.0";
        edition = "2018";
        sha256 = "0mw5vp9fs77fvdnv3lzh30b2lrxsn0g857xrp0ibgl584gvc224w";
        libName = "gpu_descriptor";
        authors = [
          "Zakarum <zakarumych@ya.ru>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
            usesDefaultFeatures = false;
          }
          {
            name = "gpu-descriptor-types";
            packageId = "gpu-descriptor-types";
          }
          {
            name = "hashbrown";
            packageId = "hashbrown";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "tracing" = [ "dep:tracing" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "gpu-descriptor-types" = rec {
        crateName = "gpu-descriptor-types";
        version = "0.2.0";
        edition = "2018";
        sha256 = "14ab90klss7w0ybj95fcnqxjsjya17xjhf576dpvi4zq5ml45wpx";
        libName = "gpu_descriptor_types";
        authors = [
          "Zakarum <zakarumych@ya.ru>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
            usesDefaultFeatures = false;
          }
        ];

      };
      "half" = rec {
        crateName = "half";
        version = "2.4.1";
        edition = "2021";
        sha256 = "123q4zzw1x4309961i69igzd1wb7pj04aaii3kwasrz3599qrl3d";
        authors = [
          "Kathryn Long <squeeself@gmail.com>"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "crunchy";
            packageId = "crunchy";
            target = { target, features }: ("spirv" == target."arch" or null);
          }
        ];
        devDependencies = [
          {
            name = "crunchy";
            packageId = "crunchy";
          }
        ];
        features = {
          "bytemuck" = [ "dep:bytemuck" ];
          "default" = [ "std" ];
          "num-traits" = [ "dep:num-traits" ];
          "rand_distr" = [
            "dep:rand"
            "dep:rand_distr"
          ];
          "rkyv" = [ "dep:rkyv" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "zerocopy" = [ "dep:zerocopy" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "bytemuck"
          "default"
          "std"
        ];
      };
      "hashbrown" = rec {
        crateName = "hashbrown";
        version = "0.14.5";
        edition = "2021";
        sha256 = "1wa1vy1xs3mp11bn3z9dv0jricgr6a2j0zkf1g19yz3vw4il89z5";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "allocator-api2";
            packageId = "allocator-api2";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "alloc" ];
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "alloc" = [ "dep:alloc" ];
          "allocator-api2" = [ "dep:allocator-api2" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [
            "ahash"
            "inline-more"
            "allocator-api2"
          ];
          "equivalent" = [ "dep:equivalent" ];
          "nightly" = [
            "allocator-api2?/nightly"
            "bumpalo/allocator_api"
          ];
          "rayon" = [ "dep:rayon" ];
          "rkyv" = [ "dep:rkyv" ];
          "rustc-dep-of-std" = [
            "nightly"
            "core"
            "compiler_builtins"
            "alloc"
            "rustc-internal-api"
          ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [
          "ahash"
          "allocator-api2"
          "default"
          "inline-more"
          "raw"
        ];
      };
      "hassle-rs" = rec {
        crateName = "hassle-rs";
        version = "0.11.0";
        edition = "2018";
        sha256 = "147886vviw14zm2a3yh8gs1r81r5gy88lrpv67d4hk7kw5rpwamg";
        libName = "hassle_rs";
        authors = [
          "Traverse-Research <support@traverseresearch.nl>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "com";
            packageId = "com";
            features = [ "production" ];
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (!(target."windows" or false));
          }
          {
            name = "libloading";
            packageId = "libloading 0.8.5";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "widestring";
            packageId = "widestring";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [
              "wtypes"
              "oleauto"
              "combaseapi"
            ];
          }
        ];

      };
      "heck 0.4.1" = rec {
        crateName = "heck";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1a7mqsnycv5z4z5vnv1k34548jzmc0ajic7c1j8jsaspnhw5ql4m";
        authors = [
          "Without Boats <woboats@gmail.com>"
        ];
        features = {
          "unicode" = [ "unicode-segmentation" ];
          "unicode-segmentation" = [ "dep:unicode-segmentation" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "heck 0.5.0" = rec {
        crateName = "heck";
        version = "0.5.0";
        edition = "2021";
        sha256 = "1sjmpsdl8czyh9ywl3qcsfsq9a307dg4ni2vnlwgnzzqhc4y0113";

      };
      "hermit-abi 0.3.9" = rec {
        crateName = "hermit-abi";
        version = "0.3.9";
        edition = "2021";
        sha256 = "092hxjbjnq5fmz66grd9plxd0sh6ssg5fhgwwwqbrzgzkjwdycfj";
        libName = "hermit_abi";
        authors = [
          "Stefan Lankes"
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [
            "core"
            "alloc"
            "compiler_builtins/rustc-dep-of-std"
          ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hermit-abi 0.4.0" = rec {
        crateName = "hermit-abi";
        version = "0.4.0";
        edition = "2021";
        sha256 = "1k1zwllx6nfq417hy38x4akw1ivlv68ymvnzyxs76ffgsqcskxpv";
        libName = "hermit_abi";
        authors = [
          "Stefan Lankes"
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [
            "core"
            "alloc"
            "compiler_builtins/rustc-dep-of-std"
          ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "hex" = rec {
        crateName = "hex";
        version = "0.4.3";
        edition = "2018";
        sha256 = "0w1a4davm1lgzpamwnba907aysmlrnygbqmfis2mqjx5m552a93z";
        authors = [
          "KokaKiwi <kokakiwi@kokakiwi.net>"
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "hexf-parse" = rec {
        crateName = "hexf-parse";
        version = "0.2.1";
        edition = "2018";
        sha256 = "1pr3a3sk66ddxdyxdxac7q6qaqjcn28v0njy22ghdpfn78l8d9nz";
        libName = "hexf_parse";
        authors = [
          "Kang Seonghoon <public+rust@mearie.org>"
        ];

      };
      "home" = rec {
        crateName = "home";
        version = "0.5.9";
        edition = "2021";
        sha256 = "19grxyg35rqfd802pcc9ys1q3lafzlcjcv2pl2s5q8xpyr5kblg3";
        authors = [
          "Brian Anderson <andersrb@gmail.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_UI_Shell"
              "Win32_System_Com"
            ];
          }
        ];

      };
      "icrate" = rec {
        crateName = "icrate";
        version = "0.0.4";
        edition = "2021";
        sha256 = "06d3g8n6xw3f0ai84mya0dlknp2n33zqdxpxp8272mslibzsmlwr";
        authors = [
          "Mads Marquart <mads@marquart.dk>"
        ];
        dependencies = [
          {
            name = "block2";
            packageId = "block2 0.3.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "dispatch";
            packageId = "dispatch";
            optional = true;
          }
          {
            name = "objc2";
            packageId = "objc2 0.4.1";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "Accessibility" = [ "Foundation" ];
          "Accessibility_all" = [
            "Accessibility"
            "Accessibility_AXBrailleMap"
            "Accessibility_AXCategoricalDataAxisDescriptor"
            "Accessibility_AXChartDescriptor"
            "Accessibility_AXCustomContent"
            "Accessibility_AXDataPoint"
            "Accessibility_AXDataPointValue"
            "Accessibility_AXDataSeriesDescriptor"
            "Accessibility_AXLiveAudioGraph"
            "Accessibility_AXNumericDataAxisDescriptor"
          ];
          "AdServices" = [ "Foundation" ];
          "AdServices_all" = [
            "AdServices"
            "AdServices_AAAttribution"
          ];
          "AdSupport" = [ "Foundation" ];
          "AdSupport_all" = [
            "AdSupport"
            "AdSupport_ASIdentifierManager"
          ];
          "AppKit" = [
            "CoreData"
            "Foundation"
            "AppKit_NSApplication"
            "AppKit_NSCollectionLayoutSection"
            "AppKit_NSCollectionLayoutGroupCustomItem"
            "AppKit_NSCollectionView"
            "AppKit_NSView"
            "AppKit_NSTableView"
            "AppKit_NSTableColumn"
            "AppKit_NSTableRowView"
            "Foundation_NSIndexPath"
            "Foundation_NSArray"
            "Foundation_NSCoder"
          ];
          "AppKit_NSATSTypesetter" = [ "AppKit_NSTypesetter" ];
          "AppKit_NSActionCell" = [ "AppKit_NSCell" ];
          "AppKit_NSApplication" = [ "AppKit_NSResponder" ];
          "AppKit_NSArrayController" = [ "AppKit_NSObjectController" ];
          "AppKit_NSBitmapImageRep" = [ "AppKit_NSImageRep" ];
          "AppKit_NSBox" = [ "AppKit_NSView" ];
          "AppKit_NSBrowser" = [ "AppKit_NSControl" ];
          "AppKit_NSBrowserCell" = [ "AppKit_NSCell" ];
          "AppKit_NSButton" = [ "AppKit_NSControl" ];
          "AppKit_NSButtonCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSButtonTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSCachedImageRep" = [ "AppKit_NSImageRep" ];
          "AppKit_NSCandidateListTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSClickGestureRecognizer" = [ "AppKit_NSGestureRecognizer" ];
          "AppKit_NSClipView" = [ "AppKit_NSView" ];
          "AppKit_NSCollectionLayoutBoundarySupplementaryItem" = [
            "AppKit_NSCollectionLayoutSupplementaryItem"
          ];
          "AppKit_NSCollectionLayoutDecorationItem" = [ "AppKit_NSCollectionLayoutItem" ];
          "AppKit_NSCollectionLayoutGroup" = [ "AppKit_NSCollectionLayoutItem" ];
          "AppKit_NSCollectionLayoutSupplementaryItem" = [ "AppKit_NSCollectionLayoutItem" ];
          "AppKit_NSCollectionView" = [ "AppKit_NSView" ];
          "AppKit_NSCollectionViewCompositionalLayout" = [ "AppKit_NSCollectionViewLayout" ];
          "AppKit_NSCollectionViewFlowLayout" = [ "AppKit_NSCollectionViewLayout" ];
          "AppKit_NSCollectionViewFlowLayoutInvalidationContext" = [
            "AppKit_NSCollectionViewLayoutInvalidationContext"
          ];
          "AppKit_NSCollectionViewGridLayout" = [ "AppKit_NSCollectionViewLayout" ];
          "AppKit_NSCollectionViewItem" = [ "AppKit_NSViewController" ];
          "AppKit_NSCollectionViewTransitionLayout" = [ "AppKit_NSCollectionViewLayout" ];
          "AppKit_NSColorPanel" = [ "AppKit_NSPanel" ];
          "AppKit_NSColorPickerTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSColorWell" = [ "AppKit_NSControl" ];
          "AppKit_NSComboBox" = [ "AppKit_NSTextField" ];
          "AppKit_NSComboBoxCell" = [ "AppKit_NSTextFieldCell" ];
          "AppKit_NSComboButton" = [ "AppKit_NSControl" ];
          "AppKit_NSControl" = [ "AppKit_NSView" ];
          "AppKit_NSCustomImageRep" = [ "AppKit_NSImageRep" ];
          "AppKit_NSCustomTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSDatePicker" = [ "AppKit_NSControl" ];
          "AppKit_NSDatePickerCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSDictionaryController" = [ "AppKit_NSArrayController" ];
          "AppKit_NSDrawer" = [ "AppKit_NSResponder" ];
          "AppKit_NSEPSImageRep" = [ "AppKit_NSImageRep" ];
          "AppKit_NSFontPanel" = [ "AppKit_NSPanel" ];
          "AppKit_NSForm" = [ "AppKit_NSMatrix" ];
          "AppKit_NSFormCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSGridView" = [ "AppKit_NSView" ];
          "AppKit_NSGroupTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSImageCell" = [ "AppKit_NSCell" ];
          "AppKit_NSImageView" = [ "AppKit_NSControl" ];
          "AppKit_NSLayoutDimension" = [ "AppKit_NSLayoutAnchor" ];
          "AppKit_NSLayoutXAxisAnchor" = [ "AppKit_NSLayoutAnchor" ];
          "AppKit_NSLayoutYAxisAnchor" = [ "AppKit_NSLayoutAnchor" ];
          "AppKit_NSLevelIndicator" = [ "AppKit_NSControl" ];
          "AppKit_NSLevelIndicatorCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSMagnificationGestureRecognizer" = [ "AppKit_NSGestureRecognizer" ];
          "AppKit_NSMatrix" = [ "AppKit_NSControl" ];
          "AppKit_NSMenuItemCell" = [ "AppKit_NSButtonCell" ];
          "AppKit_NSMenuToolbarItem" = [ "AppKit_NSToolbarItem" ];
          "AppKit_NSMutableFontCollection" = [ "AppKit_NSFontCollection" ];
          "AppKit_NSMutableParagraphStyle" = [ "AppKit_NSParagraphStyle" ];
          "AppKit_NSObjectController" = [ "AppKit_NSController" ];
          "AppKit_NSOpenPanel" = [ "AppKit_NSSavePanel" ];
          "AppKit_NSOutlineView" = [ "AppKit_NSTableView" ];
          "AppKit_NSPDFImageRep" = [ "AppKit_NSImageRep" ];
          "AppKit_NSPICTImageRep" = [ "AppKit_NSImageRep" ];
          "AppKit_NSPageController" = [ "AppKit_NSViewController" ];
          "AppKit_NSPanGestureRecognizer" = [ "AppKit_NSGestureRecognizer" ];
          "AppKit_NSPanel" = [ "AppKit_NSWindow" ];
          "AppKit_NSPathCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSPathComponentCell" = [ "AppKit_NSTextFieldCell" ];
          "AppKit_NSPathControl" = [ "AppKit_NSControl" ];
          "AppKit_NSPersistentDocument" = [ "AppKit_NSDocument" ];
          "AppKit_NSPickerTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSPopUpButton" = [ "AppKit_NSButton" ];
          "AppKit_NSPopUpButtonCell" = [ "AppKit_NSMenuItemCell" ];
          "AppKit_NSPopover" = [ "AppKit_NSResponder" ];
          "AppKit_NSPopoverTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSPredicateEditor" = [ "AppKit_NSRuleEditor" ];
          "AppKit_NSPressGestureRecognizer" = [ "AppKit_NSGestureRecognizer" ];
          "AppKit_NSProgressIndicator" = [ "AppKit_NSView" ];
          "AppKit_NSRotationGestureRecognizer" = [ "AppKit_NSGestureRecognizer" ];
          "AppKit_NSRuleEditor" = [ "AppKit_NSControl" ];
          "AppKit_NSRulerView" = [ "AppKit_NSView" ];
          "AppKit_NSSavePanel" = [ "AppKit_NSPanel" ];
          "AppKit_NSScrollView" = [ "AppKit_NSView" ];
          "AppKit_NSScroller" = [ "AppKit_NSControl" ];
          "AppKit_NSScrubber" = [ "AppKit_NSView" ];
          "AppKit_NSScrubberArrangedView" = [ "AppKit_NSView" ];
          "AppKit_NSScrubberFlowLayout" = [ "AppKit_NSScrubberLayout" ];
          "AppKit_NSScrubberImageItemView" = [ "AppKit_NSScrubberItemView" ];
          "AppKit_NSScrubberItemView" = [ "AppKit_NSScrubberArrangedView" ];
          "AppKit_NSScrubberProportionalLayout" = [ "AppKit_NSScrubberLayout" ];
          "AppKit_NSScrubberSelectionView" = [ "AppKit_NSScrubberArrangedView" ];
          "AppKit_NSScrubberTextItemView" = [ "AppKit_NSScrubberItemView" ];
          "AppKit_NSSearchField" = [ "AppKit_NSTextField" ];
          "AppKit_NSSearchFieldCell" = [ "AppKit_NSTextFieldCell" ];
          "AppKit_NSSearchToolbarItem" = [ "AppKit_NSToolbarItem" ];
          "AppKit_NSSecureTextField" = [ "AppKit_NSTextField" ];
          "AppKit_NSSecureTextFieldCell" = [ "AppKit_NSTextFieldCell" ];
          "AppKit_NSSegmentedCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSSegmentedControl" = [ "AppKit_NSControl" ];
          "AppKit_NSSharingServicePickerToolbarItem" = [ "AppKit_NSToolbarItem" ];
          "AppKit_NSSharingServicePickerTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSSlider" = [ "AppKit_NSControl" ];
          "AppKit_NSSliderCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSSliderTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSSplitView" = [ "AppKit_NSView" ];
          "AppKit_NSSplitViewController" = [ "AppKit_NSViewController" ];
          "AppKit_NSStackView" = [ "AppKit_NSView" ];
          "AppKit_NSStatusBarButton" = [ "AppKit_NSButton" ];
          "AppKit_NSStepper" = [ "AppKit_NSControl" ];
          "AppKit_NSStepperCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSStepperTouchBarItem" = [ "AppKit_NSTouchBarItem" ];
          "AppKit_NSSwitch" = [ "AppKit_NSControl" ];
          "AppKit_NSTabView" = [ "AppKit_NSView" ];
          "AppKit_NSTabViewController" = [ "AppKit_NSViewController" ];
          "AppKit_NSTableCellView" = [ "AppKit_NSView" ];
          "AppKit_NSTableHeaderCell" = [ "AppKit_NSTextFieldCell" ];
          "AppKit_NSTableHeaderView" = [ "AppKit_NSView" ];
          "AppKit_NSTableRowView" = [ "AppKit_NSView" ];
          "AppKit_NSTableView" = [ "AppKit_NSControl" ];
          "AppKit_NSText" = [ "AppKit_NSView" ];
          "AppKit_NSTextAttachmentCell" = [ "AppKit_NSCell" ];
          "AppKit_NSTextContentStorage" = [ "AppKit_NSTextContentManager" ];
          "AppKit_NSTextField" = [ "AppKit_NSControl" ];
          "AppKit_NSTextFieldCell" = [ "AppKit_NSActionCell" ];
          "AppKit_NSTextListElement" = [ "AppKit_NSTextParagraph" ];
          "AppKit_NSTextParagraph" = [ "AppKit_NSTextElement" ];
          "AppKit_NSTextStorage" = [ "Foundation_NSMutableAttributedString" ];
          "AppKit_NSTextTable" = [ "AppKit_NSTextBlock" ];
          "AppKit_NSTextTableBlock" = [ "AppKit_NSTextBlock" ];
          "AppKit_NSTextView" = [ "AppKit_NSText" ];
          "AppKit_NSTitlebarAccessoryViewController" = [ "AppKit_NSViewController" ];
          "AppKit_NSTokenField" = [ "AppKit_NSTextField" ];
          "AppKit_NSTokenFieldCell" = [ "AppKit_NSTextFieldCell" ];
          "AppKit_NSToolbarItemGroup" = [ "AppKit_NSToolbarItem" ];
          "AppKit_NSTrackingSeparatorToolbarItem" = [ "AppKit_NSToolbarItem" ];
          "AppKit_NSTreeController" = [ "AppKit_NSObjectController" ];
          "AppKit_NSUserDefaultsController" = [ "AppKit_NSController" ];
          "AppKit_NSView" = [ "AppKit_NSResponder" ];
          "AppKit_NSViewAnimation" = [ "AppKit_NSAnimation" ];
          "AppKit_NSViewController" = [ "AppKit_NSResponder" ];
          "AppKit_NSVisualEffectView" = [ "AppKit_NSView" ];
          "AppKit_NSWindow" = [ "AppKit_NSResponder" ];
          "AppKit_NSWindowController" = [ "AppKit_NSResponder" ];
          "AppKit_all" = [
            "AppKit"
            "AppKit_NSATSTypesetter"
            "AppKit_NSAccessibilityCustomAction"
            "AppKit_NSAccessibilityCustomRotor"
            "AppKit_NSAccessibilityCustomRotorItemResult"
            "AppKit_NSAccessibilityCustomRotorSearchParameters"
            "AppKit_NSAccessibilityElement"
            "AppKit_NSActionCell"
            "AppKit_NSAlert"
            "AppKit_NSAlignmentFeedbackFilter"
            "AppKit_NSAnimation"
            "AppKit_NSAnimationContext"
            "AppKit_NSAppearance"
            "AppKit_NSApplication"
            "AppKit_NSArrayController"
            "AppKit_NSBezierPath"
            "AppKit_NSBindingSelectionMarker"
            "AppKit_NSBitmapImageRep"
            "AppKit_NSBox"
            "AppKit_NSBrowser"
            "AppKit_NSBrowserCell"
            "AppKit_NSButton"
            "AppKit_NSButtonCell"
            "AppKit_NSButtonTouchBarItem"
            "AppKit_NSCachedImageRep"
            "AppKit_NSCandidateListTouchBarItem"
            "AppKit_NSCell"
            "AppKit_NSClickGestureRecognizer"
            "AppKit_NSClipView"
            "AppKit_NSCollectionLayoutAnchor"
            "AppKit_NSCollectionLayoutBoundarySupplementaryItem"
            "AppKit_NSCollectionLayoutDecorationItem"
            "AppKit_NSCollectionLayoutDimension"
            "AppKit_NSCollectionLayoutEdgeSpacing"
            "AppKit_NSCollectionLayoutGroup"
            "AppKit_NSCollectionLayoutGroupCustomItem"
            "AppKit_NSCollectionLayoutItem"
            "AppKit_NSCollectionLayoutSection"
            "AppKit_NSCollectionLayoutSize"
            "AppKit_NSCollectionLayoutSpacing"
            "AppKit_NSCollectionLayoutSupplementaryItem"
            "AppKit_NSCollectionView"
            "AppKit_NSCollectionViewCompositionalLayout"
            "AppKit_NSCollectionViewCompositionalLayoutConfiguration"
            "AppKit_NSCollectionViewDiffableDataSource"
            "AppKit_NSCollectionViewFlowLayout"
            "AppKit_NSCollectionViewFlowLayoutInvalidationContext"
            "AppKit_NSCollectionViewGridLayout"
            "AppKit_NSCollectionViewItem"
            "AppKit_NSCollectionViewLayout"
            "AppKit_NSCollectionViewLayoutAttributes"
            "AppKit_NSCollectionViewLayoutInvalidationContext"
            "AppKit_NSCollectionViewTransitionLayout"
            "AppKit_NSCollectionViewUpdateItem"
            "AppKit_NSColor"
            "AppKit_NSColorList"
            "AppKit_NSColorPanel"
            "AppKit_NSColorPicker"
            "AppKit_NSColorPickerTouchBarItem"
            "AppKit_NSColorSampler"
            "AppKit_NSColorSpace"
            "AppKit_NSColorWell"
            "AppKit_NSComboBox"
            "AppKit_NSComboBoxCell"
            "AppKit_NSComboButton"
            "AppKit_NSControl"
            "AppKit_NSController"
            "AppKit_NSCursor"
            "AppKit_NSCustomImageRep"
            "AppKit_NSCustomTouchBarItem"
            "AppKit_NSDataAsset"
            "AppKit_NSDatePicker"
            "AppKit_NSDatePickerCell"
            "AppKit_NSDictionaryController"
            "AppKit_NSDictionaryControllerKeyValuePair"
            "AppKit_NSDiffableDataSourceSnapshot"
            "AppKit_NSDockTile"
            "AppKit_NSDocument"
            "AppKit_NSDocumentController"
            "AppKit_NSDraggingImageComponent"
            "AppKit_NSDraggingItem"
            "AppKit_NSDraggingSession"
            "AppKit_NSDrawer"
            "AppKit_NSEPSImageRep"
            "AppKit_NSEvent"
            "AppKit_NSFilePromiseProvider"
            "AppKit_NSFilePromiseReceiver"
            "AppKit_NSFont"
            "AppKit_NSFontAssetRequest"
            "AppKit_NSFontCollection"
            "AppKit_NSFontDescriptor"
            "AppKit_NSFontManager"
            "AppKit_NSFontPanel"
            "AppKit_NSForm"
            "AppKit_NSFormCell"
            "AppKit_NSGestureRecognizer"
            "AppKit_NSGlyphGenerator"
            "AppKit_NSGlyphInfo"
            "AppKit_NSGradient"
            "AppKit_NSGraphicsContext"
            "AppKit_NSGridCell"
            "AppKit_NSGridColumn"
            "AppKit_NSGridRow"
            "AppKit_NSGridView"
            "AppKit_NSGroupTouchBarItem"
            "AppKit_NSHapticFeedbackManager"
            "AppKit_NSHelpManager"
            "AppKit_NSImage"
            "AppKit_NSImageCell"
            "AppKit_NSImageRep"
            "AppKit_NSImageSymbolConfiguration"
            "AppKit_NSImageView"
            "AppKit_NSInputManager"
            "AppKit_NSInputServer"
            "AppKit_NSLayoutAnchor"
            "AppKit_NSLayoutConstraint"
            "AppKit_NSLayoutDimension"
            "AppKit_NSLayoutGuide"
            "AppKit_NSLayoutManager"
            "AppKit_NSLayoutXAxisAnchor"
            "AppKit_NSLayoutYAxisAnchor"
            "AppKit_NSLevelIndicator"
            "AppKit_NSLevelIndicatorCell"
            "AppKit_NSMagnificationGestureRecognizer"
            "AppKit_NSMatrix"
            "AppKit_NSMediaLibraryBrowserController"
            "AppKit_NSMenu"
            "AppKit_NSMenuItem"
            "AppKit_NSMenuItemCell"
            "AppKit_NSMenuToolbarItem"
            "AppKit_NSMovie"
            "AppKit_NSMutableFontCollection"
            "AppKit_NSMutableParagraphStyle"
            "AppKit_NSNib"
            "AppKit_NSObjectController"
            "AppKit_NSOpenPanel"
            "AppKit_NSOutlineView"
            "AppKit_NSPDFImageRep"
            "AppKit_NSPDFInfo"
            "AppKit_NSPDFPanel"
            "AppKit_NSPICTImageRep"
            "AppKit_NSPageController"
            "AppKit_NSPageLayout"
            "AppKit_NSPanGestureRecognizer"
            "AppKit_NSPanel"
            "AppKit_NSParagraphStyle"
            "AppKit_NSPasteboard"
            "AppKit_NSPasteboardItem"
            "AppKit_NSPathCell"
            "AppKit_NSPathComponentCell"
            "AppKit_NSPathControl"
            "AppKit_NSPathControlItem"
            "AppKit_NSPersistentDocument"
            "AppKit_NSPickerTouchBarItem"
            "AppKit_NSPopUpButton"
            "AppKit_NSPopUpButtonCell"
            "AppKit_NSPopover"
            "AppKit_NSPopoverTouchBarItem"
            "AppKit_NSPredicateEditor"
            "AppKit_NSPredicateEditorRowTemplate"
            "AppKit_NSPressGestureRecognizer"
            "AppKit_NSPressureConfiguration"
            "AppKit_NSPreviewRepresentingActivityItem"
            "AppKit_NSPrintInfo"
            "AppKit_NSPrintOperation"
            "AppKit_NSPrintPanel"
            "AppKit_NSPrinter"
            "AppKit_NSProgressIndicator"
            "AppKit_NSResponder"
            "AppKit_NSRotationGestureRecognizer"
            "AppKit_NSRuleEditor"
            "AppKit_NSRulerMarker"
            "AppKit_NSRulerView"
            "AppKit_NSRunningApplication"
            "AppKit_NSSavePanel"
            "AppKit_NSScreen"
            "AppKit_NSScrollView"
            "AppKit_NSScroller"
            "AppKit_NSScrubber"
            "AppKit_NSScrubberArrangedView"
            "AppKit_NSScrubberFlowLayout"
            "AppKit_NSScrubberImageItemView"
            "AppKit_NSScrubberItemView"
            "AppKit_NSScrubberLayout"
            "AppKit_NSScrubberLayoutAttributes"
            "AppKit_NSScrubberProportionalLayout"
            "AppKit_NSScrubberSelectionStyle"
            "AppKit_NSScrubberSelectionView"
            "AppKit_NSScrubberTextItemView"
            "AppKit_NSSearchField"
            "AppKit_NSSearchFieldCell"
            "AppKit_NSSearchToolbarItem"
            "AppKit_NSSecureTextField"
            "AppKit_NSSecureTextFieldCell"
            "AppKit_NSSegmentedCell"
            "AppKit_NSSegmentedControl"
            "AppKit_NSShadow"
            "AppKit_NSSharingService"
            "AppKit_NSSharingServicePicker"
            "AppKit_NSSharingServicePickerToolbarItem"
            "AppKit_NSSharingServicePickerTouchBarItem"
            "AppKit_NSSlider"
            "AppKit_NSSliderAccessory"
            "AppKit_NSSliderAccessoryBehavior"
            "AppKit_NSSliderCell"
            "AppKit_NSSliderTouchBarItem"
            "AppKit_NSSound"
            "AppKit_NSSpeechRecognizer"
            "AppKit_NSSpeechSynthesizer"
            "AppKit_NSSpellChecker"
            "AppKit_NSSplitView"
            "AppKit_NSSplitViewController"
            "AppKit_NSSplitViewItem"
            "AppKit_NSStackView"
            "AppKit_NSStatusBar"
            "AppKit_NSStatusBarButton"
            "AppKit_NSStatusItem"
            "AppKit_NSStepper"
            "AppKit_NSStepperCell"
            "AppKit_NSStepperTouchBarItem"
            "AppKit_NSStoryboard"
            "AppKit_NSStoryboardSegue"
            "AppKit_NSStringDrawingContext"
            "AppKit_NSSwitch"
            "AppKit_NSTabView"
            "AppKit_NSTabViewController"
            "AppKit_NSTabViewItem"
            "AppKit_NSTableCellView"
            "AppKit_NSTableColumn"
            "AppKit_NSTableHeaderCell"
            "AppKit_NSTableHeaderView"
            "AppKit_NSTableRowView"
            "AppKit_NSTableView"
            "AppKit_NSTableViewDiffableDataSource"
            "AppKit_NSTableViewRowAction"
            "AppKit_NSText"
            "AppKit_NSTextAlternatives"
            "AppKit_NSTextAttachment"
            "AppKit_NSTextAttachmentCell"
            "AppKit_NSTextAttachmentViewProvider"
            "AppKit_NSTextBlock"
            "AppKit_NSTextCheckingController"
            "AppKit_NSTextContainer"
            "AppKit_NSTextContentManager"
            "AppKit_NSTextContentStorage"
            "AppKit_NSTextElement"
            "AppKit_NSTextField"
            "AppKit_NSTextFieldCell"
            "AppKit_NSTextFinder"
            "AppKit_NSTextInputContext"
            "AppKit_NSTextLayoutFragment"
            "AppKit_NSTextLayoutManager"
            "AppKit_NSTextLineFragment"
            "AppKit_NSTextList"
            "AppKit_NSTextListElement"
            "AppKit_NSTextParagraph"
            "AppKit_NSTextRange"
            "AppKit_NSTextSelection"
            "AppKit_NSTextSelectionNavigation"
            "AppKit_NSTextStorage"
            "AppKit_NSTextTab"
            "AppKit_NSTextTable"
            "AppKit_NSTextTableBlock"
            "AppKit_NSTextView"
            "AppKit_NSTextViewportLayoutController"
            "AppKit_NSTintConfiguration"
            "AppKit_NSTitlebarAccessoryViewController"
            "AppKit_NSTokenField"
            "AppKit_NSTokenFieldCell"
            "AppKit_NSToolbar"
            "AppKit_NSToolbarItem"
            "AppKit_NSToolbarItemGroup"
            "AppKit_NSTouch"
            "AppKit_NSTouchBar"
            "AppKit_NSTouchBarItem"
            "AppKit_NSTrackingArea"
            "AppKit_NSTrackingSeparatorToolbarItem"
            "AppKit_NSTreeController"
            "AppKit_NSTreeNode"
            "AppKit_NSTypesetter"
            "AppKit_NSUserDefaultsController"
            "AppKit_NSUserInterfaceCompressionOptions"
            "AppKit_NSView"
            "AppKit_NSViewAnimation"
            "AppKit_NSViewController"
            "AppKit_NSVisualEffectView"
            "AppKit_NSWindow"
            "AppKit_NSWindowController"
            "AppKit_NSWindowTab"
            "AppKit_NSWindowTabGroup"
            "AppKit_NSWorkspace"
            "AppKit_NSWorkspaceAuthorization"
            "AppKit_NSWorkspaceOpenConfiguration"
          ];
          "AuthenticationServices" = [
            "AppKit"
            "Foundation"
            "Foundation_NSURL"
          ];
          "AuthenticationServices_ASAccountAuthenticationModificationExtensionContext" = [
            "Foundation_NSExtensionContext"
          ];
          "AuthenticationServices_ASAccountAuthenticationModificationReplacePasswordWithSignInWithAppleRequest" =
            [ "AuthenticationServices_ASAccountAuthenticationModificationRequest" ];
          "AuthenticationServices_ASAccountAuthenticationModificationUpgradePasswordToStrongPasswordRequest" =
            [ "AuthenticationServices_ASAccountAuthenticationModificationRequest" ];
          "AuthenticationServices_ASAccountAuthenticationModificationViewController" = [
            "AppKit_NSViewController"
          ];
          "AuthenticationServices_ASAuthorizationAppleIDButton" = [ "AppKit_NSControl" ];
          "AuthenticationServices_ASAuthorizationAppleIDRequest" = [
            "AuthenticationServices_ASAuthorizationOpenIDRequest"
          ];
          "AuthenticationServices_ASAuthorizationOpenIDRequest" = [
            "AuthenticationServices_ASAuthorizationRequest"
          ];
          "AuthenticationServices_ASAuthorizationPasswordRequest" = [
            "AuthenticationServices_ASAuthorizationRequest"
          ];
          "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialAssertionRequest" = [
            "AuthenticationServices_ASAuthorizationRequest"
          ];
          "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest" = [
            "AuthenticationServices_ASAuthorizationRequest"
          ];
          "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialAssertionRequest" = [
            "AuthenticationServices_ASAuthorizationRequest"
          ];
          "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationRequest" = [
            "AuthenticationServices_ASAuthorizationRequest"
          ];
          "AuthenticationServices_ASAuthorizationSingleSignOnRequest" = [
            "AuthenticationServices_ASAuthorizationOpenIDRequest"
          ];
          "AuthenticationServices_ASCredentialProviderExtensionContext" = [ "Foundation_NSExtensionContext" ];
          "AuthenticationServices_ASCredentialProviderViewController" = [ "AppKit_NSViewController" ];
          "AuthenticationServices_all" = [
            "AuthenticationServices"
            "AuthenticationServices_ASAccountAuthenticationModificationController"
            "AuthenticationServices_ASAccountAuthenticationModificationExtensionContext"
            "AuthenticationServices_ASAccountAuthenticationModificationReplacePasswordWithSignInWithAppleRequest"
            "AuthenticationServices_ASAccountAuthenticationModificationRequest"
            "AuthenticationServices_ASAccountAuthenticationModificationUpgradePasswordToStrongPasswordRequest"
            "AuthenticationServices_ASAccountAuthenticationModificationViewController"
            "AuthenticationServices_ASAuthorization"
            "AuthenticationServices_ASAuthorizationAppleIDButton"
            "AuthenticationServices_ASAuthorizationAppleIDCredential"
            "AuthenticationServices_ASAuthorizationAppleIDProvider"
            "AuthenticationServices_ASAuthorizationAppleIDRequest"
            "AuthenticationServices_ASAuthorizationController"
            "AuthenticationServices_ASAuthorizationOpenIDRequest"
            "AuthenticationServices_ASAuthorizationPasswordProvider"
            "AuthenticationServices_ASAuthorizationPasswordRequest"
            "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialAssertion"
            "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialAssertionRequest"
            "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialDescriptor"
            "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialProvider"
            "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialRegistration"
            "AuthenticationServices_ASAuthorizationPlatformPublicKeyCredentialRegistrationRequest"
            "AuthenticationServices_ASAuthorizationProviderExtensionAuthorizationRequest"
            "AuthenticationServices_ASAuthorizationProviderExtensionAuthorizationResult"
            "AuthenticationServices_ASAuthorizationProviderExtensionKerberosMapping"
            "AuthenticationServices_ASAuthorizationProviderExtensionLoginConfiguration"
            "AuthenticationServices_ASAuthorizationProviderExtensionLoginManager"
            "AuthenticationServices_ASAuthorizationPublicKeyCredentialParameters"
            "AuthenticationServices_ASAuthorizationRequest"
            "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialAssertion"
            "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialAssertionRequest"
            "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialDescriptor"
            "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialProvider"
            "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialRegistration"
            "AuthenticationServices_ASAuthorizationSecurityKeyPublicKeyCredentialRegistrationRequest"
            "AuthenticationServices_ASAuthorizationSingleSignOnCredential"
            "AuthenticationServices_ASAuthorizationSingleSignOnProvider"
            "AuthenticationServices_ASAuthorizationSingleSignOnRequest"
            "AuthenticationServices_ASCredentialIdentityStore"
            "AuthenticationServices_ASCredentialIdentityStoreState"
            "AuthenticationServices_ASCredentialProviderExtensionContext"
            "AuthenticationServices_ASCredentialProviderViewController"
            "AuthenticationServices_ASCredentialServiceIdentifier"
            "AuthenticationServices_ASPasswordCredential"
            "AuthenticationServices_ASPasswordCredentialIdentity"
            "AuthenticationServices_ASWebAuthenticationSession"
            "AuthenticationServices_ASWebAuthenticationSessionRequest"
            "AuthenticationServices_ASWebAuthenticationSessionWebBrowserSessionManager"
          ];
          "AutomaticAssessmentConfiguration" = [ "Foundation" ];
          "AutomaticAssessmentConfiguration_all" = [
            "AutomaticAssessmentConfiguration"
            "AutomaticAssessmentConfiguration_AEAssessmentApplication"
            "AutomaticAssessmentConfiguration_AEAssessmentConfiguration"
            "AutomaticAssessmentConfiguration_AEAssessmentParticipantConfiguration"
            "AutomaticAssessmentConfiguration_AEAssessmentSession"
          ];
          "Automator" = [
            "AppKit"
            "Foundation"
            "OSAKit"
          ];
          "Automator_AMAppleScriptAction" = [ "Automator_AMBundleAction" ];
          "Automator_AMBundleAction" = [ "Automator_AMAction" ];
          "Automator_AMShellScriptAction" = [ "Automator_AMBundleAction" ];
          "Automator_AMWorkflowController" = [ "AppKit_NSController" ];
          "Automator_AMWorkflowView" = [ "AppKit_NSView" ];
          "Automator_all" = [
            "Automator"
            "Automator_AMAction"
            "Automator_AMAppleScriptAction"
            "Automator_AMBundleAction"
            "Automator_AMShellScriptAction"
            "Automator_AMWorkflow"
            "Automator_AMWorkflowController"
            "Automator_AMWorkflowView"
            "Automator_AMWorkspace"
          ];
          "BackgroundAssets" = [ "Foundation" ];
          "BackgroundAssets_BAURLDownload" = [ "BackgroundAssets_BADownload" ];
          "BackgroundAssets_all" = [
            "BackgroundAssets"
            "BackgroundAssets_BAAppExtensionInfo"
            "BackgroundAssets_BADownload"
            "BackgroundAssets_BADownloadManager"
            "BackgroundAssets_BAURLDownload"
          ];
          "BackgroundTasks" = [ "Foundation" ];
          "BackgroundTasks_BGAppRefreshTask" = [ "BackgroundTasks_BGTask" ];
          "BackgroundTasks_BGAppRefreshTaskRequest" = [ "BackgroundTasks_BGTaskRequest" ];
          "BackgroundTasks_BGProcessingTask" = [ "BackgroundTasks_BGTask" ];
          "BackgroundTasks_BGProcessingTaskRequest" = [ "BackgroundTasks_BGTaskRequest" ];
          "BackgroundTasks_all" = [
            "BackgroundTasks"
            "BackgroundTasks_BGAppRefreshTask"
            "BackgroundTasks_BGAppRefreshTaskRequest"
            "BackgroundTasks_BGProcessingTask"
            "BackgroundTasks_BGProcessingTaskRequest"
            "BackgroundTasks_BGTask"
            "BackgroundTasks_BGTaskRequest"
            "BackgroundTasks_BGTaskScheduler"
          ];
          "BusinessChat" = [
            "AppKit"
            "Foundation"
          ];
          "BusinessChat_BCChatButton" = [ "AppKit_NSControl" ];
          "BusinessChat_all" = [
            "BusinessChat"
            "BusinessChat_BCChatAction"
            "BusinessChat_BCChatButton"
          ];
          "CallKit" = [ "Foundation" ];
          "CallKit_CXAnswerCallAction" = [ "CallKit_CXCallAction" ];
          "CallKit_CXCallAction" = [ "CallKit_CXAction" ];
          "CallKit_CXCallDirectoryExtensionContext" = [ "Foundation_NSExtensionContext" ];
          "CallKit_CXEndCallAction" = [ "CallKit_CXCallAction" ];
          "CallKit_CXPlayDTMFCallAction" = [ "CallKit_CXCallAction" ];
          "CallKit_CXSetGroupCallAction" = [ "CallKit_CXCallAction" ];
          "CallKit_CXSetHeldCallAction" = [ "CallKit_CXCallAction" ];
          "CallKit_CXSetMutedCallAction" = [ "CallKit_CXCallAction" ];
          "CallKit_CXStartCallAction" = [ "CallKit_CXCallAction" ];
          "CallKit_all" = [
            "CallKit"
            "CallKit_CXAction"
            "CallKit_CXAnswerCallAction"
            "CallKit_CXCall"
            "CallKit_CXCallAction"
            "CallKit_CXCallController"
            "CallKit_CXCallDirectoryExtensionContext"
            "CallKit_CXCallDirectoryManager"
            "CallKit_CXCallDirectoryProvider"
            "CallKit_CXCallObserver"
            "CallKit_CXCallUpdate"
            "CallKit_CXEndCallAction"
            "CallKit_CXHandle"
            "CallKit_CXPlayDTMFCallAction"
            "CallKit_CXProvider"
            "CallKit_CXProviderConfiguration"
            "CallKit_CXSetGroupCallAction"
            "CallKit_CXSetHeldCallAction"
            "CallKit_CXSetMutedCallAction"
            "CallKit_CXStartCallAction"
            "CallKit_CXTransaction"
          ];
          "ClassKit" = [ "Foundation" ];
          "ClassKit_CLSActivity" = [ "ClassKit_CLSObject" ];
          "ClassKit_CLSActivityItem" = [ "ClassKit_CLSObject" ];
          "ClassKit_CLSBinaryItem" = [ "ClassKit_CLSActivityItem" ];
          "ClassKit_CLSContext" = [ "ClassKit_CLSObject" ];
          "ClassKit_CLSProgressReportingCapability" = [ "ClassKit_CLSObject" ];
          "ClassKit_CLSQuantityItem" = [ "ClassKit_CLSActivityItem" ];
          "ClassKit_CLSScoreItem" = [ "ClassKit_CLSActivityItem" ];
          "ClassKit_all" = [
            "ClassKit"
            "ClassKit_CLSActivity"
            "ClassKit_CLSActivityItem"
            "ClassKit_CLSBinaryItem"
            "ClassKit_CLSContext"
            "ClassKit_CLSDataStore"
            "ClassKit_CLSObject"
            "ClassKit_CLSProgressReportingCapability"
            "ClassKit_CLSQuantityItem"
            "ClassKit_CLSScoreItem"
          ];
          "CloudKit" = [
            "CoreLocation"
            "Foundation"
            "CloudKit_CKShare"
          ];
          "CloudKit_CKAcceptSharesOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKDatabaseNotification" = [ "CloudKit_CKNotification" ];
          "CloudKit_CKDatabaseOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKDatabaseSubscription" = [ "CloudKit_CKSubscription" ];
          "CloudKit_CKDiscoverAllUserIdentitiesOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKDiscoverUserIdentitiesOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKFetchDatabaseChangesOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKFetchNotificationChangesOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKFetchRecordChangesOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKFetchRecordZoneChangesOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKFetchRecordZonesOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKFetchRecordsOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKFetchShareMetadataOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKFetchShareParticipantsOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKFetchSubscriptionsOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKFetchWebAuthTokenOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKLocationSortDescriptor" = [ "Foundation_NSSortDescriptor" ];
          "CloudKit_CKMarkNotificationsReadOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKModifyBadgeOperation" = [ "CloudKit_CKOperation" ];
          "CloudKit_CKModifyRecordZonesOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKModifyRecordsOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKModifySubscriptionsOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKOperation" = [ "Foundation_NSOperation" ];
          "CloudKit_CKQueryNotification" = [ "CloudKit_CKNotification" ];
          "CloudKit_CKQueryOperation" = [ "CloudKit_CKDatabaseOperation" ];
          "CloudKit_CKQuerySubscription" = [ "CloudKit_CKSubscription" ];
          "CloudKit_CKRecordZoneNotification" = [ "CloudKit_CKNotification" ];
          "CloudKit_CKRecordZoneSubscription" = [ "CloudKit_CKSubscription" ];
          "CloudKit_CKShare" = [ "CloudKit_CKRecord" ];
          "CloudKit_all" = [
            "CloudKit"
            "CloudKit_CKAcceptSharesOperation"
            "CloudKit_CKAllowedSharingOptions"
            "CloudKit_CKAsset"
            "CloudKit_CKContainer"
            "CloudKit_CKDatabase"
            "CloudKit_CKDatabaseNotification"
            "CloudKit_CKDatabaseOperation"
            "CloudKit_CKDatabaseSubscription"
            "CloudKit_CKDiscoverAllUserIdentitiesOperation"
            "CloudKit_CKDiscoverUserIdentitiesOperation"
            "CloudKit_CKFetchDatabaseChangesOperation"
            "CloudKit_CKFetchNotificationChangesOperation"
            "CloudKit_CKFetchRecordChangesOperation"
            "CloudKit_CKFetchRecordZoneChangesConfiguration"
            "CloudKit_CKFetchRecordZoneChangesOperation"
            "CloudKit_CKFetchRecordZoneChangesOptions"
            "CloudKit_CKFetchRecordZonesOperation"
            "CloudKit_CKFetchRecordsOperation"
            "CloudKit_CKFetchShareMetadataOperation"
            "CloudKit_CKFetchShareParticipantsOperation"
            "CloudKit_CKFetchSubscriptionsOperation"
            "CloudKit_CKFetchWebAuthTokenOperation"
            "CloudKit_CKLocationSortDescriptor"
            "CloudKit_CKMarkNotificationsReadOperation"
            "CloudKit_CKModifyBadgeOperation"
            "CloudKit_CKModifyRecordZonesOperation"
            "CloudKit_CKModifyRecordsOperation"
            "CloudKit_CKModifySubscriptionsOperation"
            "CloudKit_CKNotification"
            "CloudKit_CKNotificationID"
            "CloudKit_CKNotificationInfo"
            "CloudKit_CKOperation"
            "CloudKit_CKOperationConfiguration"
            "CloudKit_CKOperationGroup"
            "CloudKit_CKQuery"
            "CloudKit_CKQueryCursor"
            "CloudKit_CKQueryNotification"
            "CloudKit_CKQueryOperation"
            "CloudKit_CKQuerySubscription"
            "CloudKit_CKRecord"
            "CloudKit_CKRecordID"
            "CloudKit_CKRecordZone"
            "CloudKit_CKRecordZoneID"
            "CloudKit_CKRecordZoneNotification"
            "CloudKit_CKRecordZoneSubscription"
            "CloudKit_CKReference"
            "CloudKit_CKServerChangeToken"
            "CloudKit_CKShare"
            "CloudKit_CKShareMetadata"
            "CloudKit_CKShareParticipant"
            "CloudKit_CKSubscription"
            "CloudKit_CKSystemSharingUIObserver"
            "CloudKit_CKUserIdentity"
            "CloudKit_CKUserIdentityLookupInfo"
          ];
          "Contacts" = [ "Foundation" ];
          "Contacts_CNChangeHistoryAddContactEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryAddGroupEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryAddMemberToGroupEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryAddSubgroupToGroupEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryDeleteContactEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryDeleteGroupEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryDropEverythingEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryFetchRequest" = [ "Contacts_CNFetchRequest" ];
          "Contacts_CNChangeHistoryRemoveMemberFromGroupEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryRemoveSubgroupFromGroupEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryUpdateContactEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNChangeHistoryUpdateGroupEvent" = [ "Contacts_CNChangeHistoryEvent" ];
          "Contacts_CNContactFetchRequest" = [ "Contacts_CNFetchRequest" ];
          "Contacts_CNContactFormatter" = [ "Foundation_NSFormatter" ];
          "Contacts_CNMutableContact" = [ "Contacts_CNContact" ];
          "Contacts_CNMutableGroup" = [ "Contacts_CNGroup" ];
          "Contacts_CNMutablePostalAddress" = [ "Contacts_CNPostalAddress" ];
          "Contacts_CNPostalAddressFormatter" = [ "Foundation_NSFormatter" ];
          "Contacts_all" = [
            "Contacts"
            "Contacts_CNChangeHistoryAddContactEvent"
            "Contacts_CNChangeHistoryAddGroupEvent"
            "Contacts_CNChangeHistoryAddMemberToGroupEvent"
            "Contacts_CNChangeHistoryAddSubgroupToGroupEvent"
            "Contacts_CNChangeHistoryDeleteContactEvent"
            "Contacts_CNChangeHistoryDeleteGroupEvent"
            "Contacts_CNChangeHistoryDropEverythingEvent"
            "Contacts_CNChangeHistoryEvent"
            "Contacts_CNChangeHistoryFetchRequest"
            "Contacts_CNChangeHistoryRemoveMemberFromGroupEvent"
            "Contacts_CNChangeHistoryRemoveSubgroupFromGroupEvent"
            "Contacts_CNChangeHistoryUpdateContactEvent"
            "Contacts_CNChangeHistoryUpdateGroupEvent"
            "Contacts_CNContact"
            "Contacts_CNContactFetchRequest"
            "Contacts_CNContactFormatter"
            "Contacts_CNContactProperty"
            "Contacts_CNContactRelation"
            "Contacts_CNContactStore"
            "Contacts_CNContactVCardSerialization"
            "Contacts_CNContactsUserDefaults"
            "Contacts_CNContainer"
            "Contacts_CNFetchRequest"
            "Contacts_CNFetchResult"
            "Contacts_CNGroup"
            "Contacts_CNInstantMessageAddress"
            "Contacts_CNLabeledValue"
            "Contacts_CNMutableContact"
            "Contacts_CNMutableGroup"
            "Contacts_CNMutablePostalAddress"
            "Contacts_CNPhoneNumber"
            "Contacts_CNPostalAddress"
            "Contacts_CNPostalAddressFormatter"
            "Contacts_CNSaveRequest"
            "Contacts_CNSocialProfile"
          ];
          "CoreAnimation" = [ "Foundation" ];
          "CoreAnimation_CAAnimationGroup" = [ "CoreAnimation_CAAnimation" ];
          "CoreAnimation_CABasicAnimation" = [ "CoreAnimation_CAPropertyAnimation" ];
          "CoreAnimation_CAEmitterLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CAGradientLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CAKeyframeAnimation" = [ "CoreAnimation_CAPropertyAnimation" ];
          "CoreAnimation_CAPropertyAnimation" = [ "CoreAnimation_CAAnimation" ];
          "CoreAnimation_CAReplicatorLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CAScrollLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CAShapeLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CASpringAnimation" = [ "CoreAnimation_CABasicAnimation" ];
          "CoreAnimation_CATextLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CATiledLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CATransformLayer" = [ "CoreAnimation_CALayer" ];
          "CoreAnimation_CATransition" = [ "CoreAnimation_CAAnimation" ];
          "CoreAnimation_all" = [
            "CoreAnimation"
            "CoreAnimation_CAAnimation"
            "CoreAnimation_CAAnimationGroup"
            "CoreAnimation_CABasicAnimation"
            "CoreAnimation_CAConstraint"
            "CoreAnimation_CAConstraintLayoutManager"
            "CoreAnimation_CADisplayLink"
            "CoreAnimation_CAEDRMetadata"
            "CoreAnimation_CAEmitterCell"
            "CoreAnimation_CAEmitterLayer"
            "CoreAnimation_CAGradientLayer"
            "CoreAnimation_CAKeyframeAnimation"
            "CoreAnimation_CALayer"
            "CoreAnimation_CAMediaTimingFunction"
            "CoreAnimation_CAPropertyAnimation"
            "CoreAnimation_CARemoteLayerClient"
            "CoreAnimation_CARemoteLayerServer"
            "CoreAnimation_CARenderer"
            "CoreAnimation_CAReplicatorLayer"
            "CoreAnimation_CAScrollLayer"
            "CoreAnimation_CAShapeLayer"
            "CoreAnimation_CASpringAnimation"
            "CoreAnimation_CATextLayer"
            "CoreAnimation_CATiledLayer"
            "CoreAnimation_CATransaction"
            "CoreAnimation_CATransformLayer"
            "CoreAnimation_CATransition"
            "CoreAnimation_CAValueFunction"
          ];
          "CoreData" = [
            "Foundation"
            "CoreData_NSAsynchronousFetchResult"
          ];
          "CoreData_NSAsynchronousFetchRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_NSAsynchronousFetchResult" = [ "CoreData_NSPersistentStoreAsynchronousResult" ];
          "CoreData_NSAtomicStore" = [ "CoreData_NSPersistentStore" ];
          "CoreData_NSAttributeDescription" = [ "CoreData_NSPropertyDescription" ];
          "CoreData_NSBatchDeleteRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_NSBatchDeleteResult" = [ "CoreData_NSPersistentStoreResult" ];
          "CoreData_NSBatchInsertRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_NSBatchInsertResult" = [ "CoreData_NSPersistentStoreResult" ];
          "CoreData_NSBatchUpdateRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_NSBatchUpdateResult" = [ "CoreData_NSPersistentStoreResult" ];
          "CoreData_NSDerivedAttributeDescription" = [ "CoreData_NSAttributeDescription" ];
          "CoreData_NSExpressionDescription" = [ "CoreData_NSPropertyDescription" ];
          "CoreData_NSFetchRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_NSFetchRequestExpression" = [ "Foundation_NSExpression" ];
          "CoreData_NSFetchedPropertyDescription" = [ "CoreData_NSPropertyDescription" ];
          "CoreData_NSIncrementalStore" = [ "CoreData_NSPersistentStore" ];
          "CoreData_NSPersistentCloudKitContainer" = [ "CoreData_NSPersistentContainer" ];
          "CoreData_NSPersistentCloudKitContainerEventRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_NSPersistentCloudKitContainerEventResult" = [ "CoreData_NSPersistentStoreResult" ];
          "CoreData_NSPersistentHistoryChangeRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_NSPersistentHistoryResult" = [ "CoreData_NSPersistentStoreResult" ];
          "CoreData_NSPersistentStoreAsynchronousResult" = [ "CoreData_NSPersistentStoreResult" ];
          "CoreData_NSRelationshipDescription" = [ "CoreData_NSPropertyDescription" ];
          "CoreData_NSSaveChangesRequest" = [ "CoreData_NSPersistentStoreRequest" ];
          "CoreData_all" = [
            "CoreData"
            "CoreData_NSAsynchronousFetchRequest"
            "CoreData_NSAsynchronousFetchResult"
            "CoreData_NSAtomicStore"
            "CoreData_NSAtomicStoreCacheNode"
            "CoreData_NSAttributeDescription"
            "CoreData_NSBatchDeleteRequest"
            "CoreData_NSBatchDeleteResult"
            "CoreData_NSBatchInsertRequest"
            "CoreData_NSBatchInsertResult"
            "CoreData_NSBatchUpdateRequest"
            "CoreData_NSBatchUpdateResult"
            "CoreData_NSConstraintConflict"
            "CoreData_NSCoreDataCoreSpotlightDelegate"
            "CoreData_NSDerivedAttributeDescription"
            "CoreData_NSEntityDescription"
            "CoreData_NSEntityMapping"
            "CoreData_NSEntityMigrationPolicy"
            "CoreData_NSExpressionDescription"
            "CoreData_NSFetchIndexDescription"
            "CoreData_NSFetchIndexElementDescription"
            "CoreData_NSFetchRequest"
            "CoreData_NSFetchRequestExpression"
            "CoreData_NSFetchedPropertyDescription"
            "CoreData_NSFetchedResultsController"
            "CoreData_NSIncrementalStore"
            "CoreData_NSIncrementalStoreNode"
            "CoreData_NSManagedObject"
            "CoreData_NSManagedObjectContext"
            "CoreData_NSManagedObjectID"
            "CoreData_NSManagedObjectModel"
            "CoreData_NSMappingModel"
            "CoreData_NSMergeConflict"
            "CoreData_NSMergePolicy"
            "CoreData_NSMigrationManager"
            "CoreData_NSPersistentCloudKitContainer"
            "CoreData_NSPersistentCloudKitContainerEvent"
            "CoreData_NSPersistentCloudKitContainerEventRequest"
            "CoreData_NSPersistentCloudKitContainerEventResult"
            "CoreData_NSPersistentCloudKitContainerOptions"
            "CoreData_NSPersistentContainer"
            "CoreData_NSPersistentHistoryChange"
            "CoreData_NSPersistentHistoryChangeRequest"
            "CoreData_NSPersistentHistoryResult"
            "CoreData_NSPersistentHistoryToken"
            "CoreData_NSPersistentHistoryTransaction"
            "CoreData_NSPersistentStore"
            "CoreData_NSPersistentStoreAsynchronousResult"
            "CoreData_NSPersistentStoreCoordinator"
            "CoreData_NSPersistentStoreDescription"
            "CoreData_NSPersistentStoreRequest"
            "CoreData_NSPersistentStoreResult"
            "CoreData_NSPropertyDescription"
            "CoreData_NSPropertyMapping"
            "CoreData_NSQueryGenerationToken"
            "CoreData_NSRelationshipDescription"
            "CoreData_NSSaveChangesRequest"
          ];
          "CoreLocation" = [
            "Contacts"
            "Foundation"
            "CoreLocation_CLPlacemark"
          ];
          "CoreLocation_CLBeaconRegion" = [ "CoreLocation_CLRegion" ];
          "CoreLocation_CLCircularRegion" = [ "CoreLocation_CLRegion" ];
          "CoreLocation_all" = [
            "CoreLocation"
            "CoreLocation_CLBeacon"
            "CoreLocation_CLBeaconIdentityConstraint"
            "CoreLocation_CLBeaconRegion"
            "CoreLocation_CLCircularRegion"
            "CoreLocation_CLFloor"
            "CoreLocation_CLGeocoder"
            "CoreLocation_CLHeading"
            "CoreLocation_CLLocation"
            "CoreLocation_CLLocationManager"
            "CoreLocation_CLLocationSourceInformation"
            "CoreLocation_CLPlacemark"
            "CoreLocation_CLRegion"
            "CoreLocation_CLVisit"
          ];
          "DataDetection" = [ "Foundation" ];
          "DataDetection_DDMatchCalendarEvent" = [ "DataDetection_DDMatch" ];
          "DataDetection_DDMatchEmailAddress" = [ "DataDetection_DDMatch" ];
          "DataDetection_DDMatchFlightNumber" = [ "DataDetection_DDMatch" ];
          "DataDetection_DDMatchLink" = [ "DataDetection_DDMatch" ];
          "DataDetection_DDMatchMoneyAmount" = [ "DataDetection_DDMatch" ];
          "DataDetection_DDMatchPhoneNumber" = [ "DataDetection_DDMatch" ];
          "DataDetection_DDMatchPostalAddress" = [ "DataDetection_DDMatch" ];
          "DataDetection_DDMatchShipmentTrackingNumber" = [ "DataDetection_DDMatch" ];
          "DataDetection_all" = [
            "DataDetection"
            "DataDetection_DDMatch"
            "DataDetection_DDMatchCalendarEvent"
            "DataDetection_DDMatchEmailAddress"
            "DataDetection_DDMatchFlightNumber"
            "DataDetection_DDMatchLink"
            "DataDetection_DDMatchMoneyAmount"
            "DataDetection_DDMatchPhoneNumber"
            "DataDetection_DDMatchPostalAddress"
            "DataDetection_DDMatchShipmentTrackingNumber"
          ];
          "DeviceCheck" = [ "Foundation" ];
          "DeviceCheck_all" = [
            "DeviceCheck"
            "DeviceCheck_DCAppAttestService"
            "DeviceCheck_DCDevice"
          ];
          "EventKit" = [
            "AppKit"
            "CoreLocation"
            "Foundation"
            "MapKit"
            "EventKit_EKEvent"
          ];
          "EventKit_EKAlarm" = [ "EventKit_EKObject" ];
          "EventKit_EKCalendar" = [ "EventKit_EKObject" ];
          "EventKit_EKCalendarItem" = [ "EventKit_EKObject" ];
          "EventKit_EKEvent" = [ "EventKit_EKCalendarItem" ];
          "EventKit_EKParticipant" = [ "EventKit_EKObject" ];
          "EventKit_EKRecurrenceRule" = [ "EventKit_EKObject" ];
          "EventKit_EKReminder" = [ "EventKit_EKCalendarItem" ];
          "EventKit_EKSource" = [ "EventKit_EKObject" ];
          "EventKit_EKStructuredLocation" = [ "EventKit_EKObject" ];
          "EventKit_all" = [
            "EventKit"
            "EventKit_EKAlarm"
            "EventKit_EKCalendar"
            "EventKit_EKCalendarItem"
            "EventKit_EKEvent"
            "EventKit_EKEventStore"
            "EventKit_EKObject"
            "EventKit_EKParticipant"
            "EventKit_EKRecurrenceDayOfWeek"
            "EventKit_EKRecurrenceEnd"
            "EventKit_EKRecurrenceRule"
            "EventKit_EKReminder"
            "EventKit_EKSource"
            "EventKit_EKStructuredLocation"
            "EventKit_EKVirtualConferenceDescriptor"
            "EventKit_EKVirtualConferenceProvider"
            "EventKit_EKVirtualConferenceRoomTypeDescriptor"
            "EventKit_EKVirtualConferenceURLDescriptor"
          ];
          "ExceptionHandling" = [ "Foundation" ];
          "ExceptionHandling_all" = [
            "ExceptionHandling"
            "ExceptionHandling_NSExceptionHandler"
          ];
          "ExtensionKit" = [
            "AppKit"
            "Foundation"
          ];
          "ExtensionKit_EXAppExtensionBrowserViewController" = [ "AppKit_NSViewController" ];
          "ExtensionKit_EXHostViewController" = [ "AppKit_NSViewController" ];
          "ExtensionKit_all" = [
            "ExtensionKit"
            "ExtensionKit_EXAppExtensionBrowserViewController"
            "ExtensionKit_EXHostViewController"
          ];
          "ExternalAccessory" = [ "Foundation" ];
          "ExternalAccessory_all" = [
            "ExternalAccessory"
            "ExternalAccessory_EAAccessory"
            "ExternalAccessory_EAAccessoryManager"
            "ExternalAccessory_EASession"
            "ExternalAccessory_EAWiFiUnconfiguredAccessory"
            "ExternalAccessory_EAWiFiUnconfiguredAccessoryBrowser"
          ];
          "FileProvider" = [
            "AppKit"
            "Foundation"
            "UniformTypeIdentifiers"
          ];
          "FileProviderUI" = [
            "AppKit"
            "FileProvider"
            "Foundation"
          ];
          "FileProviderUI_FPUIActionExtensionContext" = [ "Foundation_NSExtensionContext" ];
          "FileProviderUI_FPUIActionExtensionViewController" = [ "AppKit_NSViewController" ];
          "FileProviderUI_all" = [
            "FileProviderUI"
            "FileProviderUI_FPUIActionExtensionContext"
            "FileProviderUI_FPUIActionExtensionViewController"
          ];
          "FileProvider_all" = [
            "FileProvider"
            "FileProvider_NSFileProviderDomain"
            "FileProvider_NSFileProviderDomainVersion"
            "FileProvider_NSFileProviderExtension"
            "FileProvider_NSFileProviderItemVersion"
            "FileProvider_NSFileProviderManager"
            "FileProvider_NSFileProviderRequest"
          ];
          "Foundation" = [
            "objective-c"
            "block"
            "Foundation_NSError"
            "Foundation_NSAppleEventDescriptor"
            "Foundation_NSHashTable"
            "Foundation_NSMapTable"
            "Foundation_NSProgress"
            "Foundation_NSString"
            "Foundation_NSDictionary"
            "Foundation_NSEnumerator"
          ];
          "Foundation_NSArchiver" = [ "Foundation_NSCoder" ];
          "Foundation_NSBlockOperation" = [ "Foundation_NSOperation" ];
          "Foundation_NSByteCountFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSCalendarDate" = [ "Foundation_NSDate" ];
          "Foundation_NSCloneCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSCloseCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSComparisonPredicate" = [ "Foundation_NSPredicate" ];
          "Foundation_NSCompoundPredicate" = [ "Foundation_NSPredicate" ];
          "Foundation_NSConstantString" = [ "Foundation_NSSimpleCString" ];
          "Foundation_NSCountCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSCountedSet" = [ "Foundation_NSMutableSet" ];
          "Foundation_NSCreateCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSDataDetector" = [ "Foundation_NSRegularExpression" ];
          "Foundation_NSDateComponentsFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSDateFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSDateIntervalFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSDecimalNumber" = [ "Foundation_NSNumber" ];
          "Foundation_NSDeleteCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSDimension" = [ "Foundation_NSUnit" ];
          "Foundation_NSDirectoryEnumerator" = [ "Foundation_NSEnumerator" ];
          "Foundation_NSDistantObject" = [ "Foundation_NSProxy" ];
          "Foundation_NSDistributedNotificationCenter" = [ "Foundation_NSNotificationCenter" ];
          "Foundation_NSEnergyFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSExistsCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSGetCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSHTTPURLResponse" = [ "Foundation_NSURLResponse" ];
          "Foundation_NSISO8601DateFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSIndexSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSInflectionRuleExplicit" = [ "Foundation_NSInflectionRule" ];
          "Foundation_NSInputStream" = [ "Foundation_NSStream" ];
          "Foundation_NSInvocationOperation" = [ "Foundation_NSOperation" ];
          "Foundation_NSKeyedArchiver" = [ "Foundation_NSCoder" ];
          "Foundation_NSKeyedUnarchiver" = [ "Foundation_NSCoder" ];
          "Foundation_NSLengthFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSListFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSLogicalTest" = [ "Foundation_NSScriptWhoseTest" ];
          "Foundation_NSMachBootstrapServer" = [ "Foundation_NSPortNameServer" ];
          "Foundation_NSMachPort" = [ "Foundation_NSPort" ];
          "Foundation_NSMassFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSMeasurementFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSMessagePort" = [ "Foundation_NSPort" ];
          "Foundation_NSMessagePortNameServer" = [ "Foundation_NSPortNameServer" ];
          "Foundation_NSMiddleSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSMoveCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSMutableArray" = [ "Foundation_NSArray" ];
          "Foundation_NSMutableAttributedString" = [ "Foundation_NSAttributedString" ];
          "Foundation_NSMutableCharacterSet" = [ "Foundation_NSCharacterSet" ];
          "Foundation_NSMutableData" = [ "Foundation_NSData" ];
          "Foundation_NSMutableDictionary" = [ "Foundation_NSDictionary" ];
          "Foundation_NSMutableIndexSet" = [ "Foundation_NSIndexSet" ];
          "Foundation_NSMutableOrderedSet" = [ "Foundation_NSOrderedSet" ];
          "Foundation_NSMutableSet" = [ "Foundation_NSSet" ];
          "Foundation_NSMutableString" = [ "Foundation_NSString" ];
          "Foundation_NSMutableURLRequest" = [ "Foundation_NSURLRequest" ];
          "Foundation_NSNameSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSNumber" = [ "Foundation_NSValue" ];
          "Foundation_NSNumberFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSOutputStream" = [ "Foundation_NSStream" ];
          "Foundation_NSPersonNameComponentsFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSPortCoder" = [ "Foundation_NSCoder" ];
          "Foundation_NSPropertySpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSProtocolChecker" = [ "Foundation_NSProxy" ];
          "Foundation_NSPurgeableData" = [ "Foundation_NSMutableData" ];
          "Foundation_NSQuitCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSRandomSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSRangeSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSRelativeDateTimeFormatter" = [ "Foundation_NSFormatter" ];
          "Foundation_NSRelativeSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSScriptClassDescription" = [ "Foundation_NSClassDescription" ];
          "Foundation_NSSecureUnarchiveFromDataTransformer" = [ "Foundation_NSValueTransformer" ];
          "Foundation_NSSetCommand" = [ "Foundation_NSScriptCommand" ];
          "Foundation_NSSimpleCString" = [ "Foundation_NSString" ];
          "Foundation_NSSocketPort" = [ "Foundation_NSPort" ];
          "Foundation_NSSocketPortNameServer" = [ "Foundation_NSPortNameServer" ];
          "Foundation_NSSpecifierTest" = [ "Foundation_NSScriptWhoseTest" ];
          "Foundation_NSURLSessionDataTask" = [ "Foundation_NSURLSessionTask" ];
          "Foundation_NSURLSessionDownloadTask" = [ "Foundation_NSURLSessionTask" ];
          "Foundation_NSURLSessionStreamTask" = [ "Foundation_NSURLSessionTask" ];
          "Foundation_NSURLSessionUploadTask" = [ "Foundation_NSURLSessionDataTask" ];
          "Foundation_NSURLSessionWebSocketTask" = [ "Foundation_NSURLSessionTask" ];
          "Foundation_NSUnarchiver" = [ "Foundation_NSCoder" ];
          "Foundation_NSUniqueIDSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSUnitAcceleration" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitAngle" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitArea" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitConcentrationMass" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitConverterLinear" = [ "Foundation_NSUnitConverter" ];
          "Foundation_NSUnitDispersion" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitDuration" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitElectricCharge" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitElectricCurrent" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitElectricPotentialDifference" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitElectricResistance" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitEnergy" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitFrequency" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitFuelEfficiency" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitIlluminance" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitInformationStorage" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitLength" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitMass" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitPower" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitPressure" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitSpeed" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitTemperature" = [ "Foundation_NSDimension" ];
          "Foundation_NSUnitVolume" = [ "Foundation_NSDimension" ];
          "Foundation_NSUserAppleScriptTask" = [ "Foundation_NSUserScriptTask" ];
          "Foundation_NSUserAutomatorTask" = [ "Foundation_NSUserScriptTask" ];
          "Foundation_NSUserUnixTask" = [ "Foundation_NSUserScriptTask" ];
          "Foundation_NSWhoseSpecifier" = [ "Foundation_NSScriptObjectSpecifier" ];
          "Foundation_NSXMLDTD" = [ "Foundation_NSXMLNode" ];
          "Foundation_NSXMLDTDNode" = [ "Foundation_NSXMLNode" ];
          "Foundation_NSXMLDocument" = [ "Foundation_NSXMLNode" ];
          "Foundation_NSXMLElement" = [ "Foundation_NSXMLNode" ];
          "Foundation_NSXPCCoder" = [ "Foundation_NSCoder" ];
          "Foundation_all" = [
            "Foundation"
            "Foundation_NSAffineTransform"
            "Foundation_NSAppleEventDescriptor"
            "Foundation_NSAppleEventManager"
            "Foundation_NSAppleScript"
            "Foundation_NSArchiver"
            "Foundation_NSArray"
            "Foundation_NSAssertionHandler"
            "Foundation_NSAttributedString"
            "Foundation_NSAttributedStringMarkdownParsingOptions"
            "Foundation_NSAttributedStringMarkdownSourcePosition"
            "Foundation_NSAutoreleasePool"
            "Foundation_NSBackgroundActivityScheduler"
            "Foundation_NSBlockOperation"
            "Foundation_NSBundle"
            "Foundation_NSBundleResourceRequest"
            "Foundation_NSByteCountFormatter"
            "Foundation_NSCache"
            "Foundation_NSCachedURLResponse"
            "Foundation_NSCalendar"
            "Foundation_NSCalendarDate"
            "Foundation_NSCharacterSet"
            "Foundation_NSClassDescription"
            "Foundation_NSCloneCommand"
            "Foundation_NSCloseCommand"
            "Foundation_NSCoder"
            "Foundation_NSComparisonPredicate"
            "Foundation_NSCompoundPredicate"
            "Foundation_NSCondition"
            "Foundation_NSConditionLock"
            "Foundation_NSConnection"
            "Foundation_NSConstantString"
            "Foundation_NSCountCommand"
            "Foundation_NSCountedSet"
            "Foundation_NSCreateCommand"
            "Foundation_NSData"
            "Foundation_NSDataDetector"
            "Foundation_NSDate"
            "Foundation_NSDateComponents"
            "Foundation_NSDateComponentsFormatter"
            "Foundation_NSDateFormatter"
            "Foundation_NSDateInterval"
            "Foundation_NSDateIntervalFormatter"
            "Foundation_NSDecimalNumber"
            "Foundation_NSDecimalNumberHandler"
            "Foundation_NSDeleteCommand"
            "Foundation_NSDictionary"
            "Foundation_NSDimension"
            "Foundation_NSDirectoryEnumerator"
            "Foundation_NSDistantObject"
            "Foundation_NSDistantObjectRequest"
            "Foundation_NSDistributedLock"
            "Foundation_NSDistributedNotificationCenter"
            "Foundation_NSEnergyFormatter"
            "Foundation_NSEnumerator"
            "Foundation_NSError"
            "Foundation_NSException"
            "Foundation_NSExistsCommand"
            "Foundation_NSExpression"
            "Foundation_NSExtensionContext"
            "Foundation_NSExtensionItem"
            "Foundation_NSFileAccessIntent"
            "Foundation_NSFileCoordinator"
            "Foundation_NSFileHandle"
            "Foundation_NSFileManager"
            "Foundation_NSFileProviderService"
            "Foundation_NSFileSecurity"
            "Foundation_NSFileVersion"
            "Foundation_NSFileWrapper"
            "Foundation_NSFormatter"
            "Foundation_NSGarbageCollector"
            "Foundation_NSGetCommand"
            "Foundation_NSHTTPCookie"
            "Foundation_NSHTTPCookieStorage"
            "Foundation_NSHTTPURLResponse"
            "Foundation_NSHashTable"
            "Foundation_NSHost"
            "Foundation_NSISO8601DateFormatter"
            "Foundation_NSIndexPath"
            "Foundation_NSIndexSet"
            "Foundation_NSIndexSpecifier"
            "Foundation_NSInflectionRule"
            "Foundation_NSInflectionRuleExplicit"
            "Foundation_NSInputStream"
            "Foundation_NSInvocation"
            "Foundation_NSInvocationOperation"
            "Foundation_NSItemProvider"
            "Foundation_NSJSONSerialization"
            "Foundation_NSKeyedArchiver"
            "Foundation_NSKeyedUnarchiver"
            "Foundation_NSLengthFormatter"
            "Foundation_NSLinguisticTagger"
            "Foundation_NSListFormatter"
            "Foundation_NSLocale"
            "Foundation_NSLock"
            "Foundation_NSLogicalTest"
            "Foundation_NSMachBootstrapServer"
            "Foundation_NSMachPort"
            "Foundation_NSMapTable"
            "Foundation_NSMassFormatter"
            "Foundation_NSMeasurement"
            "Foundation_NSMeasurementFormatter"
            "Foundation_NSMessagePort"
            "Foundation_NSMessagePortNameServer"
            "Foundation_NSMetadataItem"
            "Foundation_NSMetadataQuery"
            "Foundation_NSMetadataQueryAttributeValueTuple"
            "Foundation_NSMetadataQueryResultGroup"
            "Foundation_NSMethodSignature"
            "Foundation_NSMiddleSpecifier"
            "Foundation_NSMorphology"
            "Foundation_NSMorphologyCustomPronoun"
            "Foundation_NSMoveCommand"
            "Foundation_NSMutableArray"
            "Foundation_NSMutableAttributedString"
            "Foundation_NSMutableCharacterSet"
            "Foundation_NSMutableData"
            "Foundation_NSMutableDictionary"
            "Foundation_NSMutableIndexSet"
            "Foundation_NSMutableOrderedSet"
            "Foundation_NSMutableSet"
            "Foundation_NSMutableString"
            "Foundation_NSMutableURLRequest"
            "Foundation_NSNameSpecifier"
            "Foundation_NSNetService"
            "Foundation_NSNetServiceBrowser"
            "Foundation_NSNotification"
            "Foundation_NSNotificationCenter"
            "Foundation_NSNotificationQueue"
            "Foundation_NSNull"
            "Foundation_NSNumber"
            "Foundation_NSNumberFormatter"
            "Foundation_NSOperation"
            "Foundation_NSOperationQueue"
            "Foundation_NSOrderedCollectionChange"
            "Foundation_NSOrderedCollectionDifference"
            "Foundation_NSOrderedSet"
            "Foundation_NSOrthography"
            "Foundation_NSOutputStream"
            "Foundation_NSPersonNameComponents"
            "Foundation_NSPersonNameComponentsFormatter"
            "Foundation_NSPipe"
            "Foundation_NSPointerArray"
            "Foundation_NSPointerFunctions"
            "Foundation_NSPort"
            "Foundation_NSPortCoder"
            "Foundation_NSPortMessage"
            "Foundation_NSPortNameServer"
            "Foundation_NSPositionalSpecifier"
            "Foundation_NSPredicate"
            "Foundation_NSPresentationIntent"
            "Foundation_NSProcessInfo"
            "Foundation_NSProgress"
            "Foundation_NSPropertyListSerialization"
            "Foundation_NSPropertySpecifier"
            "Foundation_NSProtocolChecker"
            "Foundation_NSPurgeableData"
            "Foundation_NSQuitCommand"
            "Foundation_NSRandomSpecifier"
            "Foundation_NSRangeSpecifier"
            "Foundation_NSRecursiveLock"
            "Foundation_NSRegularExpression"
            "Foundation_NSRelativeDateTimeFormatter"
            "Foundation_NSRelativeSpecifier"
            "Foundation_NSRunLoop"
            "Foundation_NSScanner"
            "Foundation_NSScriptClassDescription"
            "Foundation_NSScriptCoercionHandler"
            "Foundation_NSScriptCommand"
            "Foundation_NSScriptCommandDescription"
            "Foundation_NSScriptExecutionContext"
            "Foundation_NSScriptObjectSpecifier"
            "Foundation_NSScriptSuiteRegistry"
            "Foundation_NSScriptWhoseTest"
            "Foundation_NSSecureUnarchiveFromDataTransformer"
            "Foundation_NSSet"
            "Foundation_NSSetCommand"
            "Foundation_NSSimpleCString"
            "Foundation_NSSocketPort"
            "Foundation_NSSocketPortNameServer"
            "Foundation_NSSortDescriptor"
            "Foundation_NSSpecifierTest"
            "Foundation_NSSpellServer"
            "Foundation_NSStream"
            "Foundation_NSString"
            "Foundation_NSTask"
            "Foundation_NSTextCheckingResult"
            "Foundation_NSThread"
            "Foundation_NSTimeZone"
            "Foundation_NSTimer"
            "Foundation_NSURL"
            "Foundation_NSURLAuthenticationChallenge"
            "Foundation_NSURLCache"
            "Foundation_NSURLComponents"
            "Foundation_NSURLConnection"
            "Foundation_NSURLCredential"
            "Foundation_NSURLCredentialStorage"
            "Foundation_NSURLDownload"
            "Foundation_NSURLHandle"
            "Foundation_NSURLProtectionSpace"
            "Foundation_NSURLProtocol"
            "Foundation_NSURLQueryItem"
            "Foundation_NSURLRequest"
            "Foundation_NSURLResponse"
            "Foundation_NSURLSession"
            "Foundation_NSURLSessionConfiguration"
            "Foundation_NSURLSessionDataTask"
            "Foundation_NSURLSessionDownloadTask"
            "Foundation_NSURLSessionStreamTask"
            "Foundation_NSURLSessionTask"
            "Foundation_NSURLSessionTaskMetrics"
            "Foundation_NSURLSessionTaskTransactionMetrics"
            "Foundation_NSURLSessionUploadTask"
            "Foundation_NSURLSessionWebSocketMessage"
            "Foundation_NSURLSessionWebSocketTask"
            "Foundation_NSUUID"
            "Foundation_NSUbiquitousKeyValueStore"
            "Foundation_NSUnarchiver"
            "Foundation_NSUndoManager"
            "Foundation_NSUniqueIDSpecifier"
            "Foundation_NSUnit"
            "Foundation_NSUnitAcceleration"
            "Foundation_NSUnitAngle"
            "Foundation_NSUnitArea"
            "Foundation_NSUnitConcentrationMass"
            "Foundation_NSUnitConverter"
            "Foundation_NSUnitConverterLinear"
            "Foundation_NSUnitDispersion"
            "Foundation_NSUnitDuration"
            "Foundation_NSUnitElectricCharge"
            "Foundation_NSUnitElectricCurrent"
            "Foundation_NSUnitElectricPotentialDifference"
            "Foundation_NSUnitElectricResistance"
            "Foundation_NSUnitEnergy"
            "Foundation_NSUnitFrequency"
            "Foundation_NSUnitFuelEfficiency"
            "Foundation_NSUnitIlluminance"
            "Foundation_NSUnitInformationStorage"
            "Foundation_NSUnitLength"
            "Foundation_NSUnitMass"
            "Foundation_NSUnitPower"
            "Foundation_NSUnitPressure"
            "Foundation_NSUnitSpeed"
            "Foundation_NSUnitTemperature"
            "Foundation_NSUnitVolume"
            "Foundation_NSUserActivity"
            "Foundation_NSUserAppleScriptTask"
            "Foundation_NSUserAutomatorTask"
            "Foundation_NSUserDefaults"
            "Foundation_NSUserNotification"
            "Foundation_NSUserNotificationAction"
            "Foundation_NSUserNotificationCenter"
            "Foundation_NSUserScriptTask"
            "Foundation_NSUserUnixTask"
            "Foundation_NSValue"
            "Foundation_NSValueTransformer"
            "Foundation_NSWhoseSpecifier"
            "Foundation_NSXMLDTD"
            "Foundation_NSXMLDTDNode"
            "Foundation_NSXMLDocument"
            "Foundation_NSXMLElement"
            "Foundation_NSXMLNode"
            "Foundation_NSXMLParser"
            "Foundation_NSXPCCoder"
            "Foundation_NSXPCConnection"
            "Foundation_NSXPCInterface"
            "Foundation_NSXPCListener"
            "Foundation_NSXPCListenerEndpoint"
          ];
          "GameController" = [
            "AppKit"
            "Foundation"
            "GameController_GCControllerAxisInput"
            "GameController_GCControllerButtonInput"
            "GameController_GCControllerDirectionPad"
            "GameController_GCControllerTouchpad"
            "GameController_GCExtendedGamepad"
            "GameController_GCControllerElement"
            "GameController_GCGamepad"
            "GameController_GCKeyboardInput"
            "GameController_GCMicroGamepad"
            "GameController_GCMotion"
            "GameController_GCMouseInput"
          ];
          "GameController_GCControllerAxisInput" = [ "GameController_GCControllerElement" ];
          "GameController_GCControllerButtonInput" = [ "GameController_GCControllerElement" ];
          "GameController_GCControllerDirectionPad" = [ "GameController_GCControllerElement" ];
          "GameController_GCControllerTouchpad" = [ "GameController_GCControllerElement" ];
          "GameController_GCDeviceCursor" = [ "GameController_GCControllerDirectionPad" ];
          "GameController_GCDirectionalGamepad" = [ "GameController_GCMicroGamepad" ];
          "GameController_GCDualSenseAdaptiveTrigger" = [ "GameController_GCControllerButtonInput" ];
          "GameController_GCDualSenseGamepad" = [ "GameController_GCExtendedGamepad" ];
          "GameController_GCDualShockGamepad" = [ "GameController_GCExtendedGamepad" ];
          "GameController_GCEventViewController" = [ "AppKit_NSViewController" ];
          "GameController_GCExtendedGamepad" = [ "GameController_GCPhysicalInputProfile" ];
          "GameController_GCExtendedGamepadSnapshot" = [ "GameController_GCExtendedGamepad" ];
          "GameController_GCGamepad" = [ "GameController_GCPhysicalInputProfile" ];
          "GameController_GCGamepadSnapshot" = [ "GameController_GCGamepad" ];
          "GameController_GCKeyboardInput" = [ "GameController_GCPhysicalInputProfile" ];
          "GameController_GCMicroGamepad" = [ "GameController_GCPhysicalInputProfile" ];
          "GameController_GCMicroGamepadSnapshot" = [ "GameController_GCMicroGamepad" ];
          "GameController_GCMouseInput" = [ "GameController_GCPhysicalInputProfile" ];
          "GameController_GCRacingWheelInput" = [ "GameController_GCRacingWheelInputState" ];
          "GameController_GCXboxGamepad" = [ "GameController_GCExtendedGamepad" ];
          "GameController_all" = [
            "GameController"
            "GameController_GCColor"
            "GameController_GCController"
            "GameController_GCControllerAxisInput"
            "GameController_GCControllerButtonInput"
            "GameController_GCControllerDirectionPad"
            "GameController_GCControllerElement"
            "GameController_GCControllerTouchpad"
            "GameController_GCDeviceBattery"
            "GameController_GCDeviceCursor"
            "GameController_GCDeviceHaptics"
            "GameController_GCDeviceLight"
            "GameController_GCDirectionalGamepad"
            "GameController_GCDualSenseAdaptiveTrigger"
            "GameController_GCDualSenseGamepad"
            "GameController_GCDualShockGamepad"
            "GameController_GCEventViewController"
            "GameController_GCExtendedGamepad"
            "GameController_GCExtendedGamepadSnapshot"
            "GameController_GCGamepad"
            "GameController_GCGamepadSnapshot"
            "GameController_GCGearShifterElement"
            "GameController_GCKeyboard"
            "GameController_GCKeyboardInput"
            "GameController_GCMicroGamepad"
            "GameController_GCMicroGamepadSnapshot"
            "GameController_GCMotion"
            "GameController_GCMouse"
            "GameController_GCMouseInput"
            "GameController_GCPhysicalInputElementCollection"
            "GameController_GCPhysicalInputProfile"
            "GameController_GCRacingWheel"
            "GameController_GCRacingWheelInput"
            "GameController_GCRacingWheelInputState"
            "GameController_GCSteeringWheelElement"
            "GameController_GCXboxGamepad"
          ];
          "GameKit" = [
            "AppKit"
            "Foundation"
            "AppKit_NSViewController"
          ];
          "GameKit_GKAchievementChallenge" = [ "GameKit_GKChallenge" ];
          "GameKit_GKAchievementViewController" = [ "GameKit_GKGameCenterViewController" ];
          "GameKit_GKChallengesViewController" = [ "AppKit_NSViewController" ];
          "GameKit_GKCloudPlayer" = [ "GameKit_GKBasePlayer" ];
          "GameKit_GKDialogController" = [ "AppKit_NSResponder" ];
          "GameKit_GKFriendRequestComposeViewController" = [ "AppKit_NSViewController" ];
          "GameKit_GKGameCenterViewController" = [ "AppKit_NSViewController" ];
          "GameKit_GKLeaderboardViewController" = [ "GameKit_GKGameCenterViewController" ];
          "GameKit_GKLocalPlayer" = [ "GameKit_GKPlayer" ];
          "GameKit_GKMatchmakerViewController" = [ "AppKit_NSViewController" ];
          "GameKit_GKPlayer" = [ "GameKit_GKBasePlayer" ];
          "GameKit_GKScoreChallenge" = [ "GameKit_GKChallenge" ];
          "GameKit_GKTurnBasedMatchmakerViewController" = [ "AppKit_NSViewController" ];
          "GameKit_all" = [
            "GameKit"
            "GameKit_GKAccessPoint"
            "GameKit_GKAchievement"
            "GameKit_GKAchievementChallenge"
            "GameKit_GKAchievementDescription"
            "GameKit_GKAchievementViewController"
            "GameKit_GKBasePlayer"
            "GameKit_GKChallenge"
            "GameKit_GKChallengeEventHandler"
            "GameKit_GKChallengesViewController"
            "GameKit_GKCloudPlayer"
            "GameKit_GKDialogController"
            "GameKit_GKFriendRequestComposeViewController"
            "GameKit_GKGameCenterViewController"
            "GameKit_GKGameSession"
            "GameKit_GKInvite"
            "GameKit_GKLeaderboard"
            "GameKit_GKLeaderboardEntry"
            "GameKit_GKLeaderboardScore"
            "GameKit_GKLeaderboardSet"
            "GameKit_GKLeaderboardViewController"
            "GameKit_GKLocalPlayer"
            "GameKit_GKMatch"
            "GameKit_GKMatchRequest"
            "GameKit_GKMatchmaker"
            "GameKit_GKMatchmakerViewController"
            "GameKit_GKNotificationBanner"
            "GameKit_GKPlayer"
            "GameKit_GKSavedGame"
            "GameKit_GKScore"
            "GameKit_GKScoreChallenge"
            "GameKit_GKSession"
            "GameKit_GKTurnBasedEventHandler"
            "GameKit_GKTurnBasedExchange"
            "GameKit_GKTurnBasedExchangeReply"
            "GameKit_GKTurnBasedMatch"
            "GameKit_GKTurnBasedMatchmakerViewController"
            "GameKit_GKTurnBasedParticipant"
            "GameKit_GKVoiceChat"
            "GameKit_GKVoiceChatService"
          ];
          "HealthKit" = [
            "CoreLocation"
            "Foundation"
            "UniformTypeIdentifiers"
          ];
          "HealthKit_HKActivitySummaryQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKActivitySummaryType" = [ "HealthKit_HKObjectType" ];
          "HealthKit_HKAnchoredObjectQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKAudiogramSample" = [ "HealthKit_HKSample" ];
          "HealthKit_HKAudiogramSampleType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKCDADocumentSample" = [ "HealthKit_HKDocumentSample" ];
          "HealthKit_HKCategorySample" = [ "HealthKit_HKSample" ];
          "HealthKit_HKCategoryType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKCharacteristicType" = [ "HealthKit_HKObjectType" ];
          "HealthKit_HKClinicalRecord" = [ "HealthKit_HKSample" ];
          "HealthKit_HKClinicalType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKContactsLensSpecification" = [ "HealthKit_HKLensSpecification" ];
          "HealthKit_HKContactsPrescription" = [ "HealthKit_HKVisionPrescription" ];
          "HealthKit_HKCorrelation" = [ "HealthKit_HKSample" ];
          "HealthKit_HKCorrelationQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKCorrelationType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKCumulativeQuantitySample" = [ "HealthKit_HKQuantitySample" ];
          "HealthKit_HKCumulativeQuantitySeriesSample" = [ "HealthKit_HKCumulativeQuantitySample" ];
          "HealthKit_HKDiscreteQuantitySample" = [ "HealthKit_HKQuantitySample" ];
          "HealthKit_HKDocumentQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKDocumentSample" = [ "HealthKit_HKSample" ];
          "HealthKit_HKDocumentType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKElectrocardiogram" = [ "HealthKit_HKSample" ];
          "HealthKit_HKElectrocardiogramQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKElectrocardiogramType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKGlassesLensSpecification" = [ "HealthKit_HKLensSpecification" ];
          "HealthKit_HKGlassesPrescription" = [ "HealthKit_HKVisionPrescription" ];
          "HealthKit_HKHeartbeatSeriesBuilder" = [ "HealthKit_HKSeriesBuilder" ];
          "HealthKit_HKHeartbeatSeriesQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKHeartbeatSeriesSample" = [ "HealthKit_HKSeriesSample" ];
          "HealthKit_HKLiveWorkoutBuilder" = [ "HealthKit_HKWorkoutBuilder" ];
          "HealthKit_HKObserverQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKPrescriptionType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKQuantitySample" = [ "HealthKit_HKSample" ];
          "HealthKit_HKQuantitySeriesSampleQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKQuantityType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKSample" = [ "HealthKit_HKObject" ];
          "HealthKit_HKSampleQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKSampleType" = [ "HealthKit_HKObjectType" ];
          "HealthKit_HKSeriesSample" = [ "HealthKit_HKSample" ];
          "HealthKit_HKSeriesType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_HKSourceQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKStatisticsCollectionQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKStatisticsQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKVerifiableClinicalRecord" = [ "HealthKit_HKSample" ];
          "HealthKit_HKVerifiableClinicalRecordQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKVisionPrescription" = [ "HealthKit_HKSample" ];
          "HealthKit_HKWorkout" = [ "HealthKit_HKSample" ];
          "HealthKit_HKWorkoutRoute" = [ "HealthKit_HKSeriesSample" ];
          "HealthKit_HKWorkoutRouteBuilder" = [ "HealthKit_HKSeriesBuilder" ];
          "HealthKit_HKWorkoutRouteQuery" = [ "HealthKit_HKQuery" ];
          "HealthKit_HKWorkoutType" = [ "HealthKit_HKSampleType" ];
          "HealthKit_all" = [
            "HealthKit"
            "HealthKit_HKActivityMoveModeObject"
            "HealthKit_HKActivitySummary"
            "HealthKit_HKActivitySummaryQuery"
            "HealthKit_HKActivitySummaryType"
            "HealthKit_HKAnchoredObjectQuery"
            "HealthKit_HKAttachment"
            "HealthKit_HKAttachmentStore"
            "HealthKit_HKAudiogramSample"
            "HealthKit_HKAudiogramSampleType"
            "HealthKit_HKAudiogramSensitivityPoint"
            "HealthKit_HKBiologicalSexObject"
            "HealthKit_HKBloodTypeObject"
            "HealthKit_HKCDADocument"
            "HealthKit_HKCDADocumentSample"
            "HealthKit_HKCategorySample"
            "HealthKit_HKCategoryType"
            "HealthKit_HKCharacteristicType"
            "HealthKit_HKClinicalRecord"
            "HealthKit_HKClinicalType"
            "HealthKit_HKContactsLensSpecification"
            "HealthKit_HKContactsPrescription"
            "HealthKit_HKCorrelation"
            "HealthKit_HKCorrelationQuery"
            "HealthKit_HKCorrelationType"
            "HealthKit_HKCumulativeQuantitySample"
            "HealthKit_HKCumulativeQuantitySeriesSample"
            "HealthKit_HKDeletedObject"
            "HealthKit_HKDevice"
            "HealthKit_HKDiscreteQuantitySample"
            "HealthKit_HKDocumentQuery"
            "HealthKit_HKDocumentSample"
            "HealthKit_HKDocumentType"
            "HealthKit_HKElectrocardiogram"
            "HealthKit_HKElectrocardiogramQuery"
            "HealthKit_HKElectrocardiogramType"
            "HealthKit_HKElectrocardiogramVoltageMeasurement"
            "HealthKit_HKFHIRResource"
            "HealthKit_HKFHIRVersion"
            "HealthKit_HKFitzpatrickSkinTypeObject"
            "HealthKit_HKGlassesLensSpecification"
            "HealthKit_HKGlassesPrescription"
            "HealthKit_HKHealthStore"
            "HealthKit_HKHeartbeatSeriesBuilder"
            "HealthKit_HKHeartbeatSeriesQuery"
            "HealthKit_HKHeartbeatSeriesSample"
            "HealthKit_HKLensSpecification"
            "HealthKit_HKLiveWorkoutBuilder"
            "HealthKit_HKLiveWorkoutDataSource"
            "HealthKit_HKObject"
            "HealthKit_HKObjectType"
            "HealthKit_HKObserverQuery"
            "HealthKit_HKPrescriptionType"
            "HealthKit_HKQuantity"
            "HealthKit_HKQuantitySample"
            "HealthKit_HKQuantitySeriesSampleBuilder"
            "HealthKit_HKQuantitySeriesSampleQuery"
            "HealthKit_HKQuantityType"
            "HealthKit_HKQuery"
            "HealthKit_HKQueryAnchor"
            "HealthKit_HKQueryDescriptor"
            "HealthKit_HKSample"
            "HealthKit_HKSampleQuery"
            "HealthKit_HKSampleType"
            "HealthKit_HKSeriesBuilder"
            "HealthKit_HKSeriesSample"
            "HealthKit_HKSeriesType"
            "HealthKit_HKSource"
            "HealthKit_HKSourceQuery"
            "HealthKit_HKSourceRevision"
            "HealthKit_HKStatistics"
            "HealthKit_HKStatisticsCollection"
            "HealthKit_HKStatisticsCollectionQuery"
            "HealthKit_HKStatisticsQuery"
            "HealthKit_HKUnit"
            "HealthKit_HKVerifiableClinicalRecord"
            "HealthKit_HKVerifiableClinicalRecordQuery"
            "HealthKit_HKVerifiableClinicalRecordSubject"
            "HealthKit_HKVisionPrescription"
            "HealthKit_HKVisionPrism"
            "HealthKit_HKWheelchairUseObject"
            "HealthKit_HKWorkout"
            "HealthKit_HKWorkoutActivity"
            "HealthKit_HKWorkoutBuilder"
            "HealthKit_HKWorkoutConfiguration"
            "HealthKit_HKWorkoutEvent"
            "HealthKit_HKWorkoutRoute"
            "HealthKit_HKWorkoutRouteBuilder"
            "HealthKit_HKWorkoutRouteQuery"
            "HealthKit_HKWorkoutSession"
            "HealthKit_HKWorkoutType"
          ];
          "IdentityLookup" = [ "Foundation" ];
          "IdentityLookup_ILCallClassificationRequest" = [ "IdentityLookup_ILClassificationRequest" ];
          "IdentityLookup_ILCallCommunication" = [ "IdentityLookup_ILCommunication" ];
          "IdentityLookup_ILMessageClassificationRequest" = [ "IdentityLookup_ILClassificationRequest" ];
          "IdentityLookup_ILMessageCommunication" = [ "IdentityLookup_ILCommunication" ];
          "IdentityLookup_ILMessageFilterExtensionContext" = [ "Foundation_NSExtensionContext" ];
          "IdentityLookup_all" = [
            "IdentityLookup"
            "IdentityLookup_ILCallClassificationRequest"
            "IdentityLookup_ILCallCommunication"
            "IdentityLookup_ILClassificationRequest"
            "IdentityLookup_ILClassificationResponse"
            "IdentityLookup_ILCommunication"
            "IdentityLookup_ILMessageClassificationRequest"
            "IdentityLookup_ILMessageCommunication"
            "IdentityLookup_ILMessageFilterCapabilitiesQueryRequest"
            "IdentityLookup_ILMessageFilterCapabilitiesQueryResponse"
            "IdentityLookup_ILMessageFilterExtension"
            "IdentityLookup_ILMessageFilterExtensionContext"
            "IdentityLookup_ILMessageFilterQueryRequest"
            "IdentityLookup_ILMessageFilterQueryResponse"
            "IdentityLookup_ILNetworkResponse"
          ];
          "InputMethodKit" = [
            "AppKit"
            "Foundation"
          ];
          "InputMethodKit_IMKCandidates" = [ "AppKit_NSResponder" ];
          "InputMethodKit_all" = [
            "InputMethodKit"
            "InputMethodKit_IMKCandidates"
            "InputMethodKit_IMKInputController"
            "InputMethodKit_IMKServer"
          ];
          "LinkPresentation" = [
            "AppKit"
            "Foundation"
          ];
          "LinkPresentation_LPLinkView" = [ "AppKit_NSView" ];
          "LinkPresentation_all" = [
            "LinkPresentation"
            "LinkPresentation_LPLinkMetadata"
            "LinkPresentation_LPLinkView"
            "LinkPresentation_LPMetadataProvider"
          ];
          "LocalAuthentication" = [ "Foundation" ];
          "LocalAuthenticationEmbeddedUI" = [
            "AppKit"
            "Foundation"
            "LocalAuthentication"
            "AppKit_NSWindow"
          ];
          "LocalAuthenticationEmbeddedUI_LAAuthenticationView" = [ "AppKit_NSView" ];
          "LocalAuthenticationEmbeddedUI_all" = [
            "LocalAuthenticationEmbeddedUI"
            "LocalAuthenticationEmbeddedUI_LAAuthenticationView"
          ];
          "LocalAuthentication_LAPersistedRight" = [ "LocalAuthentication_LARight" ];
          "LocalAuthentication_all" = [
            "LocalAuthentication"
            "LocalAuthentication_LAAuthenticationRequirement"
            "LocalAuthentication_LABiometryFallbackRequirement"
            "LocalAuthentication_LAContext"
            "LocalAuthentication_LAPersistedRight"
            "LocalAuthentication_LAPrivateKey"
            "LocalAuthentication_LAPublicKey"
            "LocalAuthentication_LARight"
            "LocalAuthentication_LARightStore"
            "LocalAuthentication_LASecret"
          ];
          "MailKit" = [
            "AppKit"
            "Foundation"
          ];
          "MailKit_MEExtensionViewController" = [ "AppKit_NSViewController" ];
          "MailKit_all" = [
            "MailKit"
            "MailKit_MEAddressAnnotation"
            "MailKit_MEComposeContext"
            "MailKit_MEComposeSession"
            "MailKit_MEDecodedMessage"
            "MailKit_MEDecodedMessageBanner"
            "MailKit_MEEmailAddress"
            "MailKit_MEEncodedOutgoingMessage"
            "MailKit_MEExtensionManager"
            "MailKit_MEExtensionViewController"
            "MailKit_MEMessage"
            "MailKit_MEMessageAction"
            "MailKit_MEMessageActionDecision"
            "MailKit_MEMessageEncodingResult"
            "MailKit_MEMessageSecurityInformation"
            "MailKit_MEMessageSigner"
            "MailKit_MEOutgoingMessageEncodingStatus"
          ];
          "MapKit" = [
            "AppKit"
            "Contacts"
            "CoreLocation"
            "Foundation"
            "MapKit_MKDirectionsResponse"
            "MapKit_MKETAResponse"
            "MapKit_MKLocalSearchResponse"
            "MapKit_MKMapSnapshot"
          ];
          "MapKit_MKAnnotationView" = [ "AppKit_NSView" ];
          "MapKit_MKCircle" = [ "MapKit_MKShape" ];
          "MapKit_MKCircleRenderer" = [ "MapKit_MKOverlayPathRenderer" ];
          "MapKit_MKCompassButton" = [ "AppKit_NSView" ];
          "MapKit_MKDistanceFormatter" = [ "Foundation_NSFormatter" ];
          "MapKit_MKGeodesicPolyline" = [ "MapKit_MKPolyline" ];
          "MapKit_MKGradientPolylineRenderer" = [ "MapKit_MKPolylineRenderer" ];
          "MapKit_MKHybridMapConfiguration" = [ "MapKit_MKMapConfiguration" ];
          "MapKit_MKImageryMapConfiguration" = [ "MapKit_MKMapConfiguration" ];
          "MapKit_MKLookAroundViewController" = [ "AppKit_NSViewController" ];
          "MapKit_MKMapView" = [ "AppKit_NSView" ];
          "MapKit_MKMarkerAnnotationView" = [ "MapKit_MKAnnotationView" ];
          "MapKit_MKMultiPoint" = [ "MapKit_MKShape" ];
          "MapKit_MKMultiPolygon" = [ "MapKit_MKShape" ];
          "MapKit_MKMultiPolygonRenderer" = [ "MapKit_MKOverlayPathRenderer" ];
          "MapKit_MKMultiPolyline" = [ "MapKit_MKShape" ];
          "MapKit_MKMultiPolylineRenderer" = [ "MapKit_MKOverlayPathRenderer" ];
          "MapKit_MKOverlayPathRenderer" = [ "MapKit_MKOverlayRenderer" ];
          "MapKit_MKPinAnnotationView" = [ "MapKit_MKAnnotationView" ];
          "MapKit_MKPitchControl" = [ "AppKit_NSView" ];
          "MapKit_MKPlacemark" = [ "CoreLocation_CLPlacemark" ];
          "MapKit_MKPointAnnotation" = [ "MapKit_MKShape" ];
          "MapKit_MKPolygon" = [ "MapKit_MKMultiPoint" ];
          "MapKit_MKPolygonRenderer" = [ "MapKit_MKOverlayPathRenderer" ];
          "MapKit_MKPolyline" = [ "MapKit_MKMultiPoint" ];
          "MapKit_MKPolylineRenderer" = [ "MapKit_MKOverlayPathRenderer" ];
          "MapKit_MKStandardMapConfiguration" = [ "MapKit_MKMapConfiguration" ];
          "MapKit_MKTileOverlayRenderer" = [ "MapKit_MKOverlayRenderer" ];
          "MapKit_MKUserLocationView" = [ "MapKit_MKAnnotationView" ];
          "MapKit_MKZoomControl" = [ "AppKit_NSView" ];
          "MapKit_all" = [
            "MapKit"
            "MapKit_MKAnnotationView"
            "MapKit_MKCircle"
            "MapKit_MKCircleRenderer"
            "MapKit_MKClusterAnnotation"
            "MapKit_MKCompassButton"
            "MapKit_MKDirections"
            "MapKit_MKDirectionsRequest"
            "MapKit_MKDirectionsResponse"
            "MapKit_MKDistanceFormatter"
            "MapKit_MKETAResponse"
            "MapKit_MKGeoJSONDecoder"
            "MapKit_MKGeoJSONFeature"
            "MapKit_MKGeodesicPolyline"
            "MapKit_MKGradientPolylineRenderer"
            "MapKit_MKHybridMapConfiguration"
            "MapKit_MKImageryMapConfiguration"
            "MapKit_MKLocalPointsOfInterestRequest"
            "MapKit_MKLocalSearch"
            "MapKit_MKLocalSearchCompleter"
            "MapKit_MKLocalSearchCompletion"
            "MapKit_MKLocalSearchRequest"
            "MapKit_MKLocalSearchResponse"
            "MapKit_MKLookAroundScene"
            "MapKit_MKLookAroundSceneRequest"
            "MapKit_MKLookAroundSnapshot"
            "MapKit_MKLookAroundSnapshotOptions"
            "MapKit_MKLookAroundSnapshotter"
            "MapKit_MKLookAroundViewController"
            "MapKit_MKMapCamera"
            "MapKit_MKMapCameraBoundary"
            "MapKit_MKMapCameraZoomRange"
            "MapKit_MKMapConfiguration"
            "MapKit_MKMapItem"
            "MapKit_MKMapSnapshot"
            "MapKit_MKMapSnapshotOptions"
            "MapKit_MKMapSnapshotter"
            "MapKit_MKMapView"
            "MapKit_MKMarkerAnnotationView"
            "MapKit_MKMultiPoint"
            "MapKit_MKMultiPolygon"
            "MapKit_MKMultiPolygonRenderer"
            "MapKit_MKMultiPolyline"
            "MapKit_MKMultiPolylineRenderer"
            "MapKit_MKOverlayPathRenderer"
            "MapKit_MKOverlayRenderer"
            "MapKit_MKPinAnnotationView"
            "MapKit_MKPitchControl"
            "MapKit_MKPlacemark"
            "MapKit_MKPointAnnotation"
            "MapKit_MKPointOfInterestFilter"
            "MapKit_MKPolygon"
            "MapKit_MKPolygonRenderer"
            "MapKit_MKPolyline"
            "MapKit_MKPolylineRenderer"
            "MapKit_MKRoute"
            "MapKit_MKRouteStep"
            "MapKit_MKShape"
            "MapKit_MKStandardMapConfiguration"
            "MapKit_MKTileOverlay"
            "MapKit_MKTileOverlayRenderer"
            "MapKit_MKUserLocation"
            "MapKit_MKUserLocationView"
            "MapKit_MKZoomControl"
          ];
          "MediaPlayer" = [
            "AppKit"
            "Foundation"
          ];
          "MediaPlayer_MPChangeLanguageOptionCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPChangePlaybackPositionCommand" = [ "MediaPlayer_MPRemoteCommand" ];
          "MediaPlayer_MPChangePlaybackPositionCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPChangePlaybackRateCommand" = [ "MediaPlayer_MPRemoteCommand" ];
          "MediaPlayer_MPChangePlaybackRateCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPChangeRepeatModeCommand" = [ "MediaPlayer_MPRemoteCommand" ];
          "MediaPlayer_MPChangeRepeatModeCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPChangeShuffleModeCommand" = [ "MediaPlayer_MPRemoteCommand" ];
          "MediaPlayer_MPChangeShuffleModeCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPFeedbackCommand" = [ "MediaPlayer_MPRemoteCommand" ];
          "MediaPlayer_MPFeedbackCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPMediaItem" = [ "MediaPlayer_MPMediaEntity" ];
          "MediaPlayer_MPMediaItemCollection" = [ "MediaPlayer_MPMediaEntity" ];
          "MediaPlayer_MPMediaPlaylist" = [ "MediaPlayer_MPMediaItemCollection" ];
          "MediaPlayer_MPMediaPropertyPredicate" = [ "MediaPlayer_MPMediaPredicate" ];
          "MediaPlayer_MPMusicPlayerApplicationController" = [ "MediaPlayer_MPMusicPlayerController" ];
          "MediaPlayer_MPMusicPlayerControllerMutableQueue" = [ "MediaPlayer_MPMusicPlayerControllerQueue" ];
          "MediaPlayer_MPMusicPlayerMediaItemQueueDescriptor" = [
            "MediaPlayer_MPMusicPlayerQueueDescriptor"
          ];
          "MediaPlayer_MPMusicPlayerPlayParametersQueueDescriptor" = [
            "MediaPlayer_MPMusicPlayerQueueDescriptor"
          ];
          "MediaPlayer_MPMusicPlayerStoreQueueDescriptor" = [ "MediaPlayer_MPMusicPlayerQueueDescriptor" ];
          "MediaPlayer_MPRatingCommand" = [ "MediaPlayer_MPRemoteCommand" ];
          "MediaPlayer_MPRatingCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPSeekCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_MPSkipIntervalCommand" = [ "MediaPlayer_MPRemoteCommand" ];
          "MediaPlayer_MPSkipIntervalCommandEvent" = [ "MediaPlayer_MPRemoteCommandEvent" ];
          "MediaPlayer_all" = [
            "MediaPlayer"
            "MediaPlayer_MPAdTimeRange"
            "MediaPlayer_MPChangeLanguageOptionCommandEvent"
            "MediaPlayer_MPChangePlaybackPositionCommand"
            "MediaPlayer_MPChangePlaybackPositionCommandEvent"
            "MediaPlayer_MPChangePlaybackRateCommand"
            "MediaPlayer_MPChangePlaybackRateCommandEvent"
            "MediaPlayer_MPChangeRepeatModeCommand"
            "MediaPlayer_MPChangeRepeatModeCommandEvent"
            "MediaPlayer_MPChangeShuffleModeCommand"
            "MediaPlayer_MPChangeShuffleModeCommandEvent"
            "MediaPlayer_MPContentItem"
            "MediaPlayer_MPFeedbackCommand"
            "MediaPlayer_MPFeedbackCommandEvent"
            "MediaPlayer_MPMediaEntity"
            "MediaPlayer_MPMediaItem"
            "MediaPlayer_MPMediaItemArtwork"
            "MediaPlayer_MPMediaItemCollection"
            "MediaPlayer_MPMediaLibrary"
            "MediaPlayer_MPMediaPlaylist"
            "MediaPlayer_MPMediaPlaylistCreationMetadata"
            "MediaPlayer_MPMediaPredicate"
            "MediaPlayer_MPMediaPropertyPredicate"
            "MediaPlayer_MPMediaQuery"
            "MediaPlayer_MPMediaQuerySection"
            "MediaPlayer_MPMusicPlayerApplicationController"
            "MediaPlayer_MPMusicPlayerController"
            "MediaPlayer_MPMusicPlayerControllerMutableQueue"
            "MediaPlayer_MPMusicPlayerControllerQueue"
            "MediaPlayer_MPMusicPlayerMediaItemQueueDescriptor"
            "MediaPlayer_MPMusicPlayerPlayParameters"
            "MediaPlayer_MPMusicPlayerPlayParametersQueueDescriptor"
            "MediaPlayer_MPMusicPlayerQueueDescriptor"
            "MediaPlayer_MPMusicPlayerStoreQueueDescriptor"
            "MediaPlayer_MPNowPlayingInfoCenter"
            "MediaPlayer_MPNowPlayingInfoLanguageOption"
            "MediaPlayer_MPNowPlayingInfoLanguageOptionGroup"
            "MediaPlayer_MPNowPlayingSession"
            "MediaPlayer_MPPlayableContentManager"
            "MediaPlayer_MPPlayableContentManagerContext"
            "MediaPlayer_MPRatingCommand"
            "MediaPlayer_MPRatingCommandEvent"
            "MediaPlayer_MPRemoteCommand"
            "MediaPlayer_MPRemoteCommandCenter"
            "MediaPlayer_MPRemoteCommandEvent"
            "MediaPlayer_MPSeekCommandEvent"
            "MediaPlayer_MPSkipIntervalCommand"
            "MediaPlayer_MPSkipIntervalCommandEvent"
          ];
          "Metal" = [ "Foundation" ];
          "MetalFX" = [ "Metal" ];
          "MetalFX_all" = [
            "MetalFX"
            "MetalFX_MTLFXSpatialScalerDescriptor"
            "MetalFX_MTLFXTemporalScalerDescriptor"
          ];
          "MetalKit" = [
            "AppKit"
            "Foundation"
            "Metal"
            "Metal_MTLRenderPipelineReflection"
            "Metal_MTLComputePipelineReflection"
          ];
          "MetalKit_MTKView" = [ "AppKit_NSView" ];
          "MetalKit_all" = [
            "MetalKit"
            "MetalKit_MTKMesh"
            "MetalKit_MTKMeshBuffer"
            "MetalKit_MTKMeshBufferAllocator"
            "MetalKit_MTKSubmesh"
            "MetalKit_MTKTextureLoader"
            "MetalKit_MTKView"
          ];
          "Metal_MTLAccelerationStructureBoundingBoxGeometryDescriptor" = [
            "Metal_MTLAccelerationStructureGeometryDescriptor"
          ];
          "Metal_MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor" = [
            "Metal_MTLAccelerationStructureGeometryDescriptor"
          ];
          "Metal_MTLAccelerationStructureMotionTriangleGeometryDescriptor" = [
            "Metal_MTLAccelerationStructureGeometryDescriptor"
          ];
          "Metal_MTLAccelerationStructureTriangleGeometryDescriptor" = [
            "Metal_MTLAccelerationStructureGeometryDescriptor"
          ];
          "Metal_MTLArrayType" = [ "Metal_MTLType" ];
          "Metal_MTLInstanceAccelerationStructureDescriptor" = [ "Metal_MTLAccelerationStructureDescriptor" ];
          "Metal_MTLIntersectionFunctionDescriptor" = [ "Metal_MTLFunctionDescriptor" ];
          "Metal_MTLPointerType" = [ "Metal_MTLType" ];
          "Metal_MTLPrimitiveAccelerationStructureDescriptor" = [
            "Metal_MTLAccelerationStructureDescriptor"
          ];
          "Metal_MTLRenderPassColorAttachmentDescriptor" = [ "Metal_MTLRenderPassAttachmentDescriptor" ];
          "Metal_MTLRenderPassDepthAttachmentDescriptor" = [ "Metal_MTLRenderPassAttachmentDescriptor" ];
          "Metal_MTLRenderPassStencilAttachmentDescriptor" = [ "Metal_MTLRenderPassAttachmentDescriptor" ];
          "Metal_MTLStructType" = [ "Metal_MTLType" ];
          "Metal_MTLTextureReferenceType" = [ "Metal_MTLType" ];
          "Metal_all" = [
            "Metal"
            "Metal_MTLAccelerationStructureBoundingBoxGeometryDescriptor"
            "Metal_MTLAccelerationStructureDescriptor"
            "Metal_MTLAccelerationStructureGeometryDescriptor"
            "Metal_MTLAccelerationStructureMotionBoundingBoxGeometryDescriptor"
            "Metal_MTLAccelerationStructureMotionTriangleGeometryDescriptor"
            "Metal_MTLAccelerationStructurePassDescriptor"
            "Metal_MTLAccelerationStructurePassSampleBufferAttachmentDescriptor"
            "Metal_MTLAccelerationStructurePassSampleBufferAttachmentDescriptorArray"
            "Metal_MTLAccelerationStructureTriangleGeometryDescriptor"
            "Metal_MTLArgument"
            "Metal_MTLArgumentDescriptor"
            "Metal_MTLArrayType"
            "Metal_MTLAttribute"
            "Metal_MTLAttributeDescriptor"
            "Metal_MTLAttributeDescriptorArray"
            "Metal_MTLBinaryArchiveDescriptor"
            "Metal_MTLBlitPassDescriptor"
            "Metal_MTLBlitPassSampleBufferAttachmentDescriptor"
            "Metal_MTLBlitPassSampleBufferAttachmentDescriptorArray"
            "Metal_MTLBufferLayoutDescriptor"
            "Metal_MTLBufferLayoutDescriptorArray"
            "Metal_MTLCaptureDescriptor"
            "Metal_MTLCaptureManager"
            "Metal_MTLCommandBufferDescriptor"
            "Metal_MTLCompileOptions"
            "Metal_MTLComputePassDescriptor"
            "Metal_MTLComputePassSampleBufferAttachmentDescriptor"
            "Metal_MTLComputePassSampleBufferAttachmentDescriptorArray"
            "Metal_MTLComputePipelineDescriptor"
            "Metal_MTLComputePipelineReflection"
            "Metal_MTLCounterSampleBufferDescriptor"
            "Metal_MTLDepthStencilDescriptor"
            "Metal_MTLFunctionConstant"
            "Metal_MTLFunctionConstantValues"
            "Metal_MTLFunctionDescriptor"
            "Metal_MTLFunctionStitchingAttributeAlwaysInline"
            "Metal_MTLFunctionStitchingFunctionNode"
            "Metal_MTLFunctionStitchingGraph"
            "Metal_MTLFunctionStitchingInputNode"
            "Metal_MTLHeapDescriptor"
            "Metal_MTLIOCommandQueueDescriptor"
            "Metal_MTLIndirectCommandBufferDescriptor"
            "Metal_MTLInstanceAccelerationStructureDescriptor"
            "Metal_MTLIntersectionFunctionDescriptor"
            "Metal_MTLIntersectionFunctionTableDescriptor"
            "Metal_MTLLinkedFunctions"
            "Metal_MTLMeshRenderPipelineDescriptor"
            "Metal_MTLMotionKeyframeData"
            "Metal_MTLPipelineBufferDescriptor"
            "Metal_MTLPipelineBufferDescriptorArray"
            "Metal_MTLPointerType"
            "Metal_MTLPrimitiveAccelerationStructureDescriptor"
            "Metal_MTLRasterizationRateLayerArray"
            "Metal_MTLRasterizationRateLayerDescriptor"
            "Metal_MTLRasterizationRateMapDescriptor"
            "Metal_MTLRasterizationRateSampleArray"
            "Metal_MTLRenderPassAttachmentDescriptor"
            "Metal_MTLRenderPassColorAttachmentDescriptor"
            "Metal_MTLRenderPassColorAttachmentDescriptorArray"
            "Metal_MTLRenderPassDepthAttachmentDescriptor"
            "Metal_MTLRenderPassDescriptor"
            "Metal_MTLRenderPassSampleBufferAttachmentDescriptor"
            "Metal_MTLRenderPassSampleBufferAttachmentDescriptorArray"
            "Metal_MTLRenderPassStencilAttachmentDescriptor"
            "Metal_MTLRenderPipelineColorAttachmentDescriptor"
            "Metal_MTLRenderPipelineColorAttachmentDescriptorArray"
            "Metal_MTLRenderPipelineDescriptor"
            "Metal_MTLRenderPipelineFunctionsDescriptor"
            "Metal_MTLRenderPipelineReflection"
            "Metal_MTLResourceStatePassDescriptor"
            "Metal_MTLResourceStatePassSampleBufferAttachmentDescriptor"
            "Metal_MTLResourceStatePassSampleBufferAttachmentDescriptorArray"
            "Metal_MTLSamplerDescriptor"
            "Metal_MTLSharedEventHandle"
            "Metal_MTLSharedEventListener"
            "Metal_MTLSharedTextureHandle"
            "Metal_MTLStageInputOutputDescriptor"
            "Metal_MTLStencilDescriptor"
            "Metal_MTLStitchedLibraryDescriptor"
            "Metal_MTLStructMember"
            "Metal_MTLStructType"
            "Metal_MTLTextureDescriptor"
            "Metal_MTLTextureReferenceType"
            "Metal_MTLTileRenderPipelineColorAttachmentDescriptor"
            "Metal_MTLTileRenderPipelineColorAttachmentDescriptorArray"
            "Metal_MTLTileRenderPipelineDescriptor"
            "Metal_MTLType"
            "Metal_MTLVertexAttribute"
            "Metal_MTLVertexAttributeDescriptor"
            "Metal_MTLVertexAttributeDescriptorArray"
            "Metal_MTLVertexBufferLayoutDescriptor"
            "Metal_MTLVertexBufferLayoutDescriptorArray"
            "Metal_MTLVertexDescriptor"
            "Metal_MTLVisibleFunctionTableDescriptor"
          ];
          "MetricKit" = [ "Foundation" ];
          "MetricKit_MXAnimationMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXAppExitMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXAppLaunchDiagnostic" = [ "MetricKit_MXDiagnostic" ];
          "MetricKit_MXAppLaunchMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXAppResponsivenessMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXAppRunTimeMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXCPUExceptionDiagnostic" = [ "MetricKit_MXDiagnostic" ];
          "MetricKit_MXCPUMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXCellularConditionMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXCrashDiagnostic" = [ "MetricKit_MXDiagnostic" ];
          "MetricKit_MXDiskIOMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXDiskWriteExceptionDiagnostic" = [ "MetricKit_MXDiagnostic" ];
          "MetricKit_MXDisplayMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXGPUMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXHangDiagnostic" = [ "MetricKit_MXDiagnostic" ];
          "MetricKit_MXLocationActivityMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXMemoryMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXNetworkTransferMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXSignpostMetric" = [ "MetricKit_MXMetric" ];
          "MetricKit_MXUnitAveragePixelLuminance" = [ "Foundation_NSDimension" ];
          "MetricKit_MXUnitSignalBars" = [ "Foundation_NSDimension" ];
          "MetricKit_all" = [
            "MetricKit"
            "MetricKit_MXAnimationMetric"
            "MetricKit_MXAppExitMetric"
            "MetricKit_MXAppLaunchDiagnostic"
            "MetricKit_MXAppLaunchMetric"
            "MetricKit_MXAppResponsivenessMetric"
            "MetricKit_MXAppRunTimeMetric"
            "MetricKit_MXAverage"
            "MetricKit_MXBackgroundExitData"
            "MetricKit_MXCPUExceptionDiagnostic"
            "MetricKit_MXCPUMetric"
            "MetricKit_MXCallStackTree"
            "MetricKit_MXCellularConditionMetric"
            "MetricKit_MXCrashDiagnostic"
            "MetricKit_MXDiagnostic"
            "MetricKit_MXDiagnosticPayload"
            "MetricKit_MXDiskIOMetric"
            "MetricKit_MXDiskWriteExceptionDiagnostic"
            "MetricKit_MXDisplayMetric"
            "MetricKit_MXForegroundExitData"
            "MetricKit_MXGPUMetric"
            "MetricKit_MXHangDiagnostic"
            "MetricKit_MXHistogram"
            "MetricKit_MXHistogramBucket"
            "MetricKit_MXLocationActivityMetric"
            "MetricKit_MXMemoryMetric"
            "MetricKit_MXMetaData"
            "MetricKit_MXMetric"
            "MetricKit_MXMetricManager"
            "MetricKit_MXMetricPayload"
            "MetricKit_MXNetworkTransferMetric"
            "MetricKit_MXSignpostIntervalData"
            "MetricKit_MXSignpostMetric"
            "MetricKit_MXUnitAveragePixelLuminance"
            "MetricKit_MXUnitSignalBars"
          ];
          "OSAKit" = [
            "AppKit"
            "Foundation"
          ];
          "OSAKit_OSAScriptController" = [ "AppKit_NSController" ];
          "OSAKit_OSAScriptView" = [ "AppKit_NSTextView" ];
          "OSAKit_all" = [
            "OSAKit"
            "OSAKit_OSALanguage"
            "OSAKit_OSALanguageInstance"
            "OSAKit_OSAScript"
            "OSAKit_OSAScriptController"
            "OSAKit_OSAScriptView"
          ];
          "PhotoKit" = [
            "AppKit"
            "CoreLocation"
            "Foundation"
          ];
          "PhotoKit_PHAsset" = [ "PhotoKit_PHObject" ];
          "PhotoKit_PHAssetChangeRequest" = [ "PhotoKit_PHChangeRequest" ];
          "PhotoKit_PHAssetCollection" = [ "PhotoKit_PHCollection" ];
          "PhotoKit_PHAssetCollectionChangeRequest" = [ "PhotoKit_PHChangeRequest" ];
          "PhotoKit_PHAssetCreationRequest" = [ "PhotoKit_PHAssetChangeRequest" ];
          "PhotoKit_PHCachingImageManager" = [ "PhotoKit_PHImageManager" ];
          "PhotoKit_PHCollection" = [ "PhotoKit_PHObject" ];
          "PhotoKit_PHCollectionList" = [ "PhotoKit_PHCollection" ];
          "PhotoKit_PHCollectionListChangeRequest" = [ "PhotoKit_PHChangeRequest" ];
          "PhotoKit_PHObjectPlaceholder" = [ "PhotoKit_PHObject" ];
          "PhotoKit_PHProject" = [ "PhotoKit_PHAssetCollection" ];
          "PhotoKit_PHProjectChangeRequest" = [ "PhotoKit_PHChangeRequest" ];
          "PhotoKit_all" = [
            "PhotoKit"
            "PhotoKit_PHAdjustmentData"
            "PhotoKit_PHAsset"
            "PhotoKit_PHAssetChangeRequest"
            "PhotoKit_PHAssetCollection"
            "PhotoKit_PHAssetCollectionChangeRequest"
            "PhotoKit_PHAssetCreationRequest"
            "PhotoKit_PHAssetResource"
            "PhotoKit_PHAssetResourceCreationOptions"
            "PhotoKit_PHAssetResourceManager"
            "PhotoKit_PHAssetResourceRequestOptions"
            "PhotoKit_PHCachingImageManager"
            "PhotoKit_PHChange"
            "PhotoKit_PHChangeRequest"
            "PhotoKit_PHCloudIdentifier"
            "PhotoKit_PHCloudIdentifierMapping"
            "PhotoKit_PHCollection"
            "PhotoKit_PHCollectionList"
            "PhotoKit_PHCollectionListChangeRequest"
            "PhotoKit_PHContentEditingInput"
            "PhotoKit_PHContentEditingInputRequestOptions"
            "PhotoKit_PHContentEditingOutput"
            "PhotoKit_PHFetchOptions"
            "PhotoKit_PHFetchResult"
            "PhotoKit_PHFetchResultChangeDetails"
            "PhotoKit_PHImageManager"
            "PhotoKit_PHImageRequestOptions"
            "PhotoKit_PHLivePhoto"
            "PhotoKit_PHLivePhotoEditingContext"
            "PhotoKit_PHLivePhotoRequestOptions"
            "PhotoKit_PHLocalIdentifierMapping"
            "PhotoKit_PHObject"
            "PhotoKit_PHObjectChangeDetails"
            "PhotoKit_PHObjectPlaceholder"
            "PhotoKit_PHPersistentChange"
            "PhotoKit_PHPersistentChangeFetchResult"
            "PhotoKit_PHPersistentChangeToken"
            "PhotoKit_PHPersistentObjectChangeDetails"
            "PhotoKit_PHPhotoLibrary"
            "PhotoKit_PHProject"
            "PhotoKit_PHProjectChangeRequest"
            "PhotoKit_PHVideoRequestOptions"
          ];
          "SoundAnalysis" = [ "Foundation" ];
          "SoundAnalysis_all" = [
            "SoundAnalysis"
            "SoundAnalysis_SNAudioFileAnalyzer"
            "SoundAnalysis_SNAudioStreamAnalyzer"
            "SoundAnalysis_SNClassification"
            "SoundAnalysis_SNClassificationResult"
            "SoundAnalysis_SNClassifySoundRequest"
            "SoundAnalysis_SNTimeDurationConstraint"
          ];
          "Speech" = [ "Foundation" ];
          "Speech_SFSpeechAudioBufferRecognitionRequest" = [ "Speech_SFSpeechRecognitionRequest" ];
          "Speech_SFSpeechURLRecognitionRequest" = [ "Speech_SFSpeechRecognitionRequest" ];
          "Speech_all" = [
            "Speech"
            "Speech_SFAcousticFeature"
            "Speech_SFSpeechAudioBufferRecognitionRequest"
            "Speech_SFSpeechRecognitionMetadata"
            "Speech_SFSpeechRecognitionRequest"
            "Speech_SFSpeechRecognitionResult"
            "Speech_SFSpeechRecognitionTask"
            "Speech_SFSpeechRecognizer"
            "Speech_SFSpeechURLRecognitionRequest"
            "Speech_SFTranscription"
            "Speech_SFTranscriptionSegment"
            "Speech_SFVoiceAnalytics"
          ];
          "StoreKit" = [
            "AppKit"
            "Foundation"
          ];
          "StoreKit_SKCloudServiceSetupViewController" = [ "AppKit_NSViewController" ];
          "StoreKit_SKMutablePayment" = [ "StoreKit_SKPayment" ];
          "StoreKit_SKOverlayAppClipConfiguration" = [ "StoreKit_SKOverlayConfiguration" ];
          "StoreKit_SKOverlayAppConfiguration" = [ "StoreKit_SKOverlayConfiguration" ];
          "StoreKit_SKProductsRequest" = [ "StoreKit_SKRequest" ];
          "StoreKit_SKReceiptRefreshRequest" = [ "StoreKit_SKRequest" ];
          "StoreKit_SKStoreProductViewController" = [ "AppKit_NSViewController" ];
          "StoreKit_all" = [
            "StoreKit"
            "StoreKit_SKAdImpression"
            "StoreKit_SKAdNetwork"
            "StoreKit_SKArcadeService"
            "StoreKit_SKCloudServiceController"
            "StoreKit_SKCloudServiceSetupViewController"
            "StoreKit_SKDownload"
            "StoreKit_SKMutablePayment"
            "StoreKit_SKOverlay"
            "StoreKit_SKOverlayAppClipConfiguration"
            "StoreKit_SKOverlayAppConfiguration"
            "StoreKit_SKOverlayConfiguration"
            "StoreKit_SKOverlayTransitionContext"
            "StoreKit_SKPayment"
            "StoreKit_SKPaymentDiscount"
            "StoreKit_SKPaymentQueue"
            "StoreKit_SKPaymentTransaction"
            "StoreKit_SKProduct"
            "StoreKit_SKProductDiscount"
            "StoreKit_SKProductStorePromotionController"
            "StoreKit_SKProductSubscriptionPeriod"
            "StoreKit_SKProductsRequest"
            "StoreKit_SKProductsResponse"
            "StoreKit_SKReceiptRefreshRequest"
            "StoreKit_SKRequest"
            "StoreKit_SKStoreProductViewController"
            "StoreKit_SKStoreReviewController"
            "StoreKit_SKStorefront"
          ];
          "UniformTypeIdentifiers" = [
            "Foundation"
            "UniformTypeIdentifiers_UTType"
          ];
          "UniformTypeIdentifiers_all" = [
            "UniformTypeIdentifiers"
            "UniformTypeIdentifiers_UTType"
          ];
          "UserNotifications" = [
            "CoreLocation"
            "Foundation"
          ];
          "UserNotifications_UNCalendarNotificationTrigger" = [ "UserNotifications_UNNotificationTrigger" ];
          "UserNotifications_UNLocationNotificationTrigger" = [ "UserNotifications_UNNotificationTrigger" ];
          "UserNotifications_UNMutableNotificationContent" = [ "UserNotifications_UNNotificationContent" ];
          "UserNotifications_UNPushNotificationTrigger" = [ "UserNotifications_UNNotificationTrigger" ];
          "UserNotifications_UNTextInputNotificationAction" = [ "UserNotifications_UNNotificationAction" ];
          "UserNotifications_UNTextInputNotificationResponse" = [
            "UserNotifications_UNNotificationResponse"
          ];
          "UserNotifications_UNTimeIntervalNotificationTrigger" = [
            "UserNotifications_UNNotificationTrigger"
          ];
          "UserNotifications_all" = [
            "UserNotifications"
            "UserNotifications_UNCalendarNotificationTrigger"
            "UserNotifications_UNLocationNotificationTrigger"
            "UserNotifications_UNMutableNotificationContent"
            "UserNotifications_UNNotification"
            "UserNotifications_UNNotificationAction"
            "UserNotifications_UNNotificationActionIcon"
            "UserNotifications_UNNotificationAttachment"
            "UserNotifications_UNNotificationCategory"
            "UserNotifications_UNNotificationContent"
            "UserNotifications_UNNotificationRequest"
            "UserNotifications_UNNotificationResponse"
            "UserNotifications_UNNotificationServiceExtension"
            "UserNotifications_UNNotificationSettings"
            "UserNotifications_UNNotificationSound"
            "UserNotifications_UNNotificationTrigger"
            "UserNotifications_UNPushNotificationTrigger"
            "UserNotifications_UNTextInputNotificationAction"
            "UserNotifications_UNTextInputNotificationResponse"
            "UserNotifications_UNTimeIntervalNotificationTrigger"
            "UserNotifications_UNUserNotificationCenter"
          ];
          "WebKit" = [
            "AppKit"
            "Foundation"
            "Foundation_NSAttributedString"
          ];
          "WebKit_DOMAbstractView" = [ "WebKit_DOMObject" ];
          "WebKit_DOMAttr" = [ "WebKit_DOMNode" ];
          "WebKit_DOMBlob" = [ "WebKit_DOMObject" ];
          "WebKit_DOMCDATASection" = [ "WebKit_DOMText" ];
          "WebKit_DOMCSSCharsetRule" = [ "WebKit_DOMCSSRule" ];
          "WebKit_DOMCSSFontFaceRule" = [ "WebKit_DOMCSSRule" ];
          "WebKit_DOMCSSImportRule" = [ "WebKit_DOMCSSRule" ];
          "WebKit_DOMCSSMediaRule" = [ "WebKit_DOMCSSRule" ];
          "WebKit_DOMCSSPageRule" = [ "WebKit_DOMCSSRule" ];
          "WebKit_DOMCSSPrimitiveValue" = [ "WebKit_DOMCSSValue" ];
          "WebKit_DOMCSSRule" = [ "WebKit_DOMObject" ];
          "WebKit_DOMCSSRuleList" = [ "WebKit_DOMObject" ];
          "WebKit_DOMCSSStyleDeclaration" = [ "WebKit_DOMObject" ];
          "WebKit_DOMCSSStyleRule" = [ "WebKit_DOMCSSRule" ];
          "WebKit_DOMCSSStyleSheet" = [ "WebKit_DOMStyleSheet" ];
          "WebKit_DOMCSSUnknownRule" = [ "WebKit_DOMCSSRule" ];
          "WebKit_DOMCSSValue" = [ "WebKit_DOMObject" ];
          "WebKit_DOMCSSValueList" = [ "WebKit_DOMCSSValue" ];
          "WebKit_DOMCharacterData" = [ "WebKit_DOMNode" ];
          "WebKit_DOMComment" = [ "WebKit_DOMCharacterData" ];
          "WebKit_DOMCounter" = [ "WebKit_DOMObject" ];
          "WebKit_DOMDocument" = [ "WebKit_DOMNode" ];
          "WebKit_DOMDocumentFragment" = [ "WebKit_DOMNode" ];
          "WebKit_DOMDocumentType" = [ "WebKit_DOMNode" ];
          "WebKit_DOMElement" = [ "WebKit_DOMNode" ];
          "WebKit_DOMEntity" = [ "WebKit_DOMNode" ];
          "WebKit_DOMEntityReference" = [ "WebKit_DOMNode" ];
          "WebKit_DOMEvent" = [ "WebKit_DOMObject" ];
          "WebKit_DOMFile" = [ "WebKit_DOMBlob" ];
          "WebKit_DOMFileList" = [ "WebKit_DOMObject" ];
          "WebKit_DOMHTMLAnchorElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLAppletElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLAreaElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLBRElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLBaseElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLBaseFontElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLBodyElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLButtonElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLCollection" = [ "WebKit_DOMObject" ];
          "WebKit_DOMHTMLDListElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLDirectoryElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLDivElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLDocument" = [ "WebKit_DOMDocument" ];
          "WebKit_DOMHTMLElement" = [ "WebKit_DOMElement" ];
          "WebKit_DOMHTMLEmbedElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLFieldSetElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLFontElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLFormElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLFrameElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLFrameSetElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLHRElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLHeadElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLHeadingElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLHtmlElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLIFrameElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLImageElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLInputElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLLIElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLLabelElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLLegendElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLLinkElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLMapElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLMarqueeElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLMenuElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLMetaElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLModElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLOListElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLObjectElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLOptGroupElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLOptionElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLOptionsCollection" = [ "WebKit_DOMObject" ];
          "WebKit_DOMHTMLParagraphElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLParamElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLPreElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLQuoteElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLScriptElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLSelectElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLStyleElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTableCaptionElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTableCellElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTableColElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTableElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTableRowElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTableSectionElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTextAreaElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLTitleElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMHTMLUListElement" = [ "WebKit_DOMHTMLElement" ];
          "WebKit_DOMImplementation" = [ "WebKit_DOMObject" ];
          "WebKit_DOMKeyboardEvent" = [ "WebKit_DOMUIEvent" ];
          "WebKit_DOMMediaList" = [ "WebKit_DOMObject" ];
          "WebKit_DOMMouseEvent" = [ "WebKit_DOMUIEvent" ];
          "WebKit_DOMMutationEvent" = [ "WebKit_DOMEvent" ];
          "WebKit_DOMNamedNodeMap" = [ "WebKit_DOMObject" ];
          "WebKit_DOMNode" = [ "WebKit_DOMObject" ];
          "WebKit_DOMNodeIterator" = [ "WebKit_DOMObject" ];
          "WebKit_DOMNodeList" = [ "WebKit_DOMObject" ];
          "WebKit_DOMObject" = [ "WebKit_WebScriptObject" ];
          "WebKit_DOMOverflowEvent" = [ "WebKit_DOMEvent" ];
          "WebKit_DOMProcessingInstruction" = [ "WebKit_DOMCharacterData" ];
          "WebKit_DOMProgressEvent" = [ "WebKit_DOMEvent" ];
          "WebKit_DOMRGBColor" = [ "WebKit_DOMObject" ];
          "WebKit_DOMRange" = [ "WebKit_DOMObject" ];
          "WebKit_DOMRect" = [ "WebKit_DOMObject" ];
          "WebKit_DOMStyleSheet" = [ "WebKit_DOMObject" ];
          "WebKit_DOMStyleSheetList" = [ "WebKit_DOMObject" ];
          "WebKit_DOMText" = [ "WebKit_DOMCharacterData" ];
          "WebKit_DOMTreeWalker" = [ "WebKit_DOMObject" ];
          "WebKit_DOMUIEvent" = [ "WebKit_DOMEvent" ];
          "WebKit_DOMWheelEvent" = [ "WebKit_DOMMouseEvent" ];
          "WebKit_DOMXPathExpression" = [ "WebKit_DOMObject" ];
          "WebKit_DOMXPathResult" = [ "WebKit_DOMObject" ];
          "WebKit_WKWebView" = [ "AppKit_NSView" ];
          "WebKit_WebDownload" = [ "Foundation_NSURLDownload" ];
          "WebKit_WebFrameView" = [ "AppKit_NSView" ];
          "WebKit_WebView" = [ "AppKit_NSView" ];
          "WebKit_all" = [
            "WebKit"
            "WebKit_DOMAbstractView"
            "WebKit_DOMAttr"
            "WebKit_DOMBlob"
            "WebKit_DOMCDATASection"
            "WebKit_DOMCSSCharsetRule"
            "WebKit_DOMCSSFontFaceRule"
            "WebKit_DOMCSSImportRule"
            "WebKit_DOMCSSMediaRule"
            "WebKit_DOMCSSPageRule"
            "WebKit_DOMCSSPrimitiveValue"
            "WebKit_DOMCSSRule"
            "WebKit_DOMCSSRuleList"
            "WebKit_DOMCSSStyleDeclaration"
            "WebKit_DOMCSSStyleRule"
            "WebKit_DOMCSSStyleSheet"
            "WebKit_DOMCSSUnknownRule"
            "WebKit_DOMCSSValue"
            "WebKit_DOMCSSValueList"
            "WebKit_DOMCharacterData"
            "WebKit_DOMComment"
            "WebKit_DOMCounter"
            "WebKit_DOMDocument"
            "WebKit_DOMDocumentFragment"
            "WebKit_DOMDocumentType"
            "WebKit_DOMElement"
            "WebKit_DOMEntity"
            "WebKit_DOMEntityReference"
            "WebKit_DOMEvent"
            "WebKit_DOMFile"
            "WebKit_DOMFileList"
            "WebKit_DOMHTMLAnchorElement"
            "WebKit_DOMHTMLAppletElement"
            "WebKit_DOMHTMLAreaElement"
            "WebKit_DOMHTMLBRElement"
            "WebKit_DOMHTMLBaseElement"
            "WebKit_DOMHTMLBaseFontElement"
            "WebKit_DOMHTMLBodyElement"
            "WebKit_DOMHTMLButtonElement"
            "WebKit_DOMHTMLCollection"
            "WebKit_DOMHTMLDListElement"
            "WebKit_DOMHTMLDirectoryElement"
            "WebKit_DOMHTMLDivElement"
            "WebKit_DOMHTMLDocument"
            "WebKit_DOMHTMLElement"
            "WebKit_DOMHTMLEmbedElement"
            "WebKit_DOMHTMLFieldSetElement"
            "WebKit_DOMHTMLFontElement"
            "WebKit_DOMHTMLFormElement"
            "WebKit_DOMHTMLFrameElement"
            "WebKit_DOMHTMLFrameSetElement"
            "WebKit_DOMHTMLHRElement"
            "WebKit_DOMHTMLHeadElement"
            "WebKit_DOMHTMLHeadingElement"
            "WebKit_DOMHTMLHtmlElement"
            "WebKit_DOMHTMLIFrameElement"
            "WebKit_DOMHTMLImageElement"
            "WebKit_DOMHTMLInputElement"
            "WebKit_DOMHTMLLIElement"
            "WebKit_DOMHTMLLabelElement"
            "WebKit_DOMHTMLLegendElement"
            "WebKit_DOMHTMLLinkElement"
            "WebKit_DOMHTMLMapElement"
            "WebKit_DOMHTMLMarqueeElement"
            "WebKit_DOMHTMLMenuElement"
            "WebKit_DOMHTMLMetaElement"
            "WebKit_DOMHTMLModElement"
            "WebKit_DOMHTMLOListElement"
            "WebKit_DOMHTMLObjectElement"
            "WebKit_DOMHTMLOptGroupElement"
            "WebKit_DOMHTMLOptionElement"
            "WebKit_DOMHTMLOptionsCollection"
            "WebKit_DOMHTMLParagraphElement"
            "WebKit_DOMHTMLParamElement"
            "WebKit_DOMHTMLPreElement"
            "WebKit_DOMHTMLQuoteElement"
            "WebKit_DOMHTMLScriptElement"
            "WebKit_DOMHTMLSelectElement"
            "WebKit_DOMHTMLStyleElement"
            "WebKit_DOMHTMLTableCaptionElement"
            "WebKit_DOMHTMLTableCellElement"
            "WebKit_DOMHTMLTableColElement"
            "WebKit_DOMHTMLTableElement"
            "WebKit_DOMHTMLTableRowElement"
            "WebKit_DOMHTMLTableSectionElement"
            "WebKit_DOMHTMLTextAreaElement"
            "WebKit_DOMHTMLTitleElement"
            "WebKit_DOMHTMLUListElement"
            "WebKit_DOMImplementation"
            "WebKit_DOMKeyboardEvent"
            "WebKit_DOMMediaList"
            "WebKit_DOMMouseEvent"
            "WebKit_DOMMutationEvent"
            "WebKit_DOMNamedNodeMap"
            "WebKit_DOMNode"
            "WebKit_DOMNodeIterator"
            "WebKit_DOMNodeList"
            "WebKit_DOMObject"
            "WebKit_DOMOverflowEvent"
            "WebKit_DOMProcessingInstruction"
            "WebKit_DOMProgressEvent"
            "WebKit_DOMRGBColor"
            "WebKit_DOMRange"
            "WebKit_DOMRect"
            "WebKit_DOMStyleSheet"
            "WebKit_DOMStyleSheetList"
            "WebKit_DOMText"
            "WebKit_DOMTreeWalker"
            "WebKit_DOMUIEvent"
            "WebKit_DOMWheelEvent"
            "WebKit_DOMXPathExpression"
            "WebKit_DOMXPathResult"
            "WebKit_WKBackForwardList"
            "WebKit_WKBackForwardListItem"
            "WebKit_WKContentRuleList"
            "WebKit_WKContentRuleListStore"
            "WebKit_WKContentWorld"
            "WebKit_WKDownload"
            "WebKit_WKFindConfiguration"
            "WebKit_WKFindResult"
            "WebKit_WKFrameInfo"
            "WebKit_WKHTTPCookieStore"
            "WebKit_WKNavigation"
            "WebKit_WKNavigationAction"
            "WebKit_WKNavigationResponse"
            "WebKit_WKOpenPanelParameters"
            "WebKit_WKPDFConfiguration"
            "WebKit_WKPreferences"
            "WebKit_WKProcessPool"
            "WebKit_WKScriptMessage"
            "WebKit_WKSecurityOrigin"
            "WebKit_WKSnapshotConfiguration"
            "WebKit_WKUserContentController"
            "WebKit_WKUserScript"
            "WebKit_WKWebView"
            "WebKit_WKWebViewConfiguration"
            "WebKit_WKWebpagePreferences"
            "WebKit_WKWebsiteDataRecord"
            "WebKit_WKWebsiteDataStore"
            "WebKit_WKWindowFeatures"
            "WebKit_WebArchive"
            "WebKit_WebBackForwardList"
            "WebKit_WebDataSource"
            "WebKit_WebDownload"
            "WebKit_WebFrame"
            "WebKit_WebFrameView"
            "WebKit_WebHistory"
            "WebKit_WebHistoryItem"
            "WebKit_WebPreferences"
            "WebKit_WebResource"
            "WebKit_WebScriptObject"
            "WebKit_WebUndefined"
            "WebKit_WebView"
          ];
          "alloc" = [
            "objc2?/alloc"
            "block2?/alloc"
          ];
          "apple" = [
            "objc2?/apple"
            "block2?/apple"
          ];
          "block" = [ "block2" ];
          "block2" = [ "dep:block2" ];
          "default" = [
            "std"
            "apple"
          ];
          "dispatch" = [ "dep:dispatch" ];
          "gnustep-1-7" = [
            "objc2?/gnustep-1-7"
            "block2?/gnustep-1-7"
          ];
          "gnustep-1-8" = [
            "gnustep-1-7"
            "objc2?/gnustep-1-8"
            "block2?/gnustep-1-8"
          ];
          "gnustep-1-9" = [
            "gnustep-1-8"
            "objc2?/gnustep-1-9"
            "block2?/gnustep-1-9"
          ];
          "gnustep-2-0" = [
            "gnustep-1-9"
            "objc2?/gnustep-2-0"
            "block2?/gnustep-2-0"
          ];
          "gnustep-2-1" = [
            "gnustep-2-0"
            "objc2?/gnustep-2-1"
            "block2?/gnustep-2-1"
          ];
          "objc2" = [ "dep:objc2" ];
          "objective-c" = [ "objc2" ];
          "std" = [
            "alloc"
            "objc2?/std"
            "block2?/std"
          ];
          "unstable-example-basic_usage" = [
            "Foundation"
            "Foundation_NSArray"
            "Foundation_NSDictionary"
            "Foundation_NSEnumerator"
          ];
          "unstable-example-browser" = [
            "apple"
            "AppKit"
            "AppKit_NSButton"
            "AppKit_NSColor"
            "AppKit_NSMenu"
            "AppKit_NSMenuItem"
            "AppKit_NSStackView"
            "AppKit_NSTextAttachmentCell"
            "AppKit_NSTextField"
            "AppKit_NSTextView"
            "AppKit_NSWindow"
            "Foundation"
            "Foundation_NSString"
            "Foundation_NSURL"
            "Foundation_NSURLRequest"
            "WebKit"
            "WebKit_WKNavigation"
            "WebKit_WKWebView"
          ];
          "unstable-example-delegate" = [
            "apple"
            "Foundation"
            "Foundation_NSString"
            "AppKit"
            "AppKit_NSResponder"
          ];
          "unstable-example-nspasteboard" = [
            "apple"
            "Foundation"
            "Foundation_NSArray"
            "Foundation_NSDictionary"
            "Foundation_NSString"
            "AppKit"
            "AppKit_NSPasteboard"
          ];
          "unstable-example-speech_synthesis" = [
            "apple"
            "Foundation"
            "Foundation_NSString"
          ];
          "unstable-frameworks-all" = [
            "unstable-frameworks-ios"
            "unstable-frameworks-macos-13"
          ];
          "unstable-frameworks-gnustep" = [
            "AppKit_all"
            "Foundation_all"
          ];
          "unstable-frameworks-gnustep-32bit" = [ "Foundation_all" ];
          "unstable-frameworks-ios" = [
            "Foundation_all"
            "unstable-example-basic_usage"
            "unstable-example-speech_synthesis"
          ];
          "unstable-frameworks-macos-10-13" = [
            "CloudKit_all"
            "Contacts_all"
            "CoreLocation_all"
            "EventKit_all"
            "ExternalAccessory_all"
            "GameController_all"
            "GameKit_all"
            "LocalAuthentication_all"
            "MapKit_all"
            "MediaPlayer_all"
            "MetalKit_all"
            "Metal_all"
            "PhotoKit_all"
            "unstable-example-delegate"
            "unstable-example-nspasteboard"
            "unstable-example-speech_synthesis"
            "unstable-frameworks-macos-10-7"
          ];
          "unstable-frameworks-macos-10-7" = [
            "AppKit_all"
            "Automator_all"
            "CoreAnimation_all"
            "CoreData_all"
            "ExceptionHandling_all"
            "Foundation_all"
            "InputMethodKit_all"
            "OSAKit_all"
            "StoreKit_all"
            "WebKit_all"
            "unstable-example-basic_usage"
          ];
          "unstable-frameworks-macos-11" = [
            "Accessibility_all"
            "ClassKit_all"
            "UniformTypeIdentifiers_all"
            "unstable-frameworks-macos-10-13"
          ];
          "unstable-frameworks-macos-12" = [
            "DataDetection_all"
            "LocalAuthenticationEmbeddedUI_all"
            "MailKit_all"
            "MetricKit_all"
            "unstable-frameworks-macos-11"
          ];
          "unstable-frameworks-macos-13" = [
            "AdServices_all"
            "AdSupport_all"
            "AuthenticationServices_all"
            "AutomaticAssessmentConfiguration_all"
            "BackgroundAssets_all"
            "BusinessChat_all"
            "CallKit_all"
            "DeviceCheck_all"
            "ExtensionKit_all"
            "FileProviderUI_all"
            "FileProvider_all"
            "HealthKit_all"
            "IdentityLookup_all"
            "LinkPresentation_all"
            "MetalFX_all"
            "SoundAnalysis_all"
            "Speech_all"
            "UserNotifications_all"
            "unstable-example-browser"
            "unstable-frameworks-macos-12"
          ];
        };
        resolvedDefaultFeatures = [
          "AppKit"
          "AppKit_NSApplication"
          "AppKit_NSCollectionLayoutGroupCustomItem"
          "AppKit_NSCollectionLayoutSection"
          "AppKit_NSCollectionView"
          "AppKit_NSControl"
          "AppKit_NSResponder"
          "AppKit_NSTableColumn"
          "AppKit_NSTableRowView"
          "AppKit_NSTableView"
          "AppKit_NSView"
          "AppKit_NSWindow"
          "CoreData"
          "CoreData_NSAsynchronousFetchResult"
          "CoreData_NSPersistentStoreAsynchronousResult"
          "CoreData_NSPersistentStoreResult"
          "Foundation"
          "Foundation_NSAppleEventDescriptor"
          "Foundation_NSArray"
          "Foundation_NSAttributedString"
          "Foundation_NSCoder"
          "Foundation_NSData"
          "Foundation_NSDictionary"
          "Foundation_NSEnumerator"
          "Foundation_NSError"
          "Foundation_NSHashTable"
          "Foundation_NSIndexPath"
          "Foundation_NSMapTable"
          "Foundation_NSMutableAttributedString"
          "Foundation_NSNumber"
          "Foundation_NSProcessInfo"
          "Foundation_NSProgress"
          "Foundation_NSSet"
          "Foundation_NSString"
          "Foundation_NSThread"
          "Foundation_NSValue"
          "alloc"
          "apple"
          "block"
          "block2"
          "default"
          "dispatch"
          "objc2"
          "objective-c"
          "std"
        ];
      };
      "ident_case" = rec {
        crateName = "ident_case";
        version = "1.0.1";
        edition = "2015";
        sha256 = "0fac21q6pwns8gh1hz3nbq15j8fi441ncl6w4vlnd1cmc55kiq5r";
        authors = [
          "Ted Driggs <ted.driggs@outlook.com>"
        ];

      };
      "idna" = rec {
        crateName = "idna";
        version = "0.5.0";
        edition = "2018";
        sha256 = "1xhjrcjqq0l5bpzvdgylvpkgk94panxgsirzhjnnqfdgc4a9nkb3";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "unicode-bidi";
            packageId = "unicode-bidi";
            usesDefaultFeatures = false;
            features = [ "hardcoded-data" ];
          }
          {
            name = "unicode-normalization";
            packageId = "unicode-normalization";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "std" = [
            "alloc"
            "unicode-bidi/std"
            "unicode-normalization/std"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "image" = rec {
        crateName = "image";
        version = "0.25.2";
        edition = "2021";
        sha256 = "041sjvahq6zz5zhjhixmid65x31dafpcs97r26rdvf2j4654qccr";
        authors = [
          "The image-rs Developers"
        ];
        dependencies = [
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "extern_crate_alloc" ];
          }
          {
            name = "byteorder-lite";
            packageId = "byteorder-lite";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "png";
            packageId = "png";
            optional = true;
          }
        ];
        features = {
          "avif" = [
            "dep:ravif"
            "dep:rgb"
          ];
          "avif-native" = [
            "dep:mp4parse"
            "dep:dcv-color-primitives"
            "dep:dav1d"
          ];
          "color_quant" = [ "dep:color_quant" ];
          "default" = [
            "rayon"
            "default-formats"
          ];
          "default-formats" = [
            "avif"
            "bmp"
            "dds"
            "exr"
            "ff"
            "gif"
            "hdr"
            "ico"
            "jpeg"
            "png"
            "pnm"
            "qoi"
            "tga"
            "tiff"
            "webp"
          ];
          "exr" = [ "dep:exr" ];
          "gif" = [
            "dep:gif"
            "dep:color_quant"
          ];
          "ico" = [
            "bmp"
            "png"
          ];
          "jpeg" = [
            "dep:zune-core"
            "dep:zune-jpeg"
          ];
          "nasm" = [ "ravif?/asm" ];
          "png" = [ "dep:png" ];
          "qoi" = [ "dep:qoi" ];
          "rayon" = [ "dep:rayon" ];
          "tiff" = [ "dep:tiff" ];
          "webp" = [ "dep:image-webp" ];
        };
        resolvedDefaultFeatures = [ "png" ];
      };
      "indexmap" = rec {
        crateName = "indexmap";
        version = "2.5.0";
        edition = "2021";
        sha256 = "1r87dlvyg04fa9m4m6pkvwsdx54rx471fas66qff40bk5ym01fb8";
        dependencies = [
          {
            name = "equivalent";
            packageId = "equivalent";
            usesDefaultFeatures = false;
          }
          {
            name = "hashbrown";
            packageId = "hashbrown";
            usesDefaultFeatures = false;
            features = [ "raw" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "borsh" = [ "dep:borsh" ];
          "default" = [ "std" ];
          "quickcheck" = [ "dep:quickcheck" ];
          "rayon" = [ "dep:rayon" ];
          "rustc-rayon" = [ "dep:rustc-rayon" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "insta" = rec {
        crateName = "insta";
        version = "1.40.0";
        edition = "2021";
        sha256 = "0q5b0ssw8ilj0ni6s2swpd1spv78q5yxp594fxl1i13kg8fa94v5";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
        ];
        dependencies = [
          {
            name = "console";
            packageId = "console";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "lazy_static";
            packageId = "lazy_static";
          }
          {
            name = "linked-hash-map";
            packageId = "linked-hash-map";
          }
          {
            name = "similar";
            packageId = "similar";
            features = [ "inline" ];
          }
        ];
        features = {
          "_cargo_insta_internal" = [ "clap" ];
          "clap" = [ "dep:clap" ];
          "colors" = [ "console" ];
          "console" = [ "dep:console" ];
          "csv" = [
            "dep:csv"
            "serde"
          ];
          "default" = [ "colors" ];
          "filters" = [ "regex" ];
          "glob" = [
            "walkdir"
            "globset"
          ];
          "globset" = [ "dep:globset" ];
          "json" = [ "serde" ];
          "pest" = [ "dep:pest" ];
          "pest_derive" = [ "dep:pest_derive" ];
          "redactions" = [
            "pest"
            "pest_derive"
            "serde"
          ];
          "regex" = [ "dep:regex" ];
          "ron" = [
            "dep:ron"
            "serde"
          ];
          "serde" = [ "dep:serde" ];
          "toml" = [
            "dep:toml"
            "serde"
          ];
          "walkdir" = [ "dep:walkdir" ];
          "yaml" = [ "serde" ];
        };
        resolvedDefaultFeatures = [
          "colors"
          "console"
          "default"
        ];
      };
      "instant" = rec {
        crateName = "instant";
        version = "0.1.13";
        edition = "2018";
        sha256 = "08h27kzvb5jw74mh0ajv0nv9ggwvgqm8ynjsn2sa9jsks4cjh970";
        authors = [
          "sebcrozet <developer@crozet.re>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
        ];
        features = {
          "js-sys" = [ "dep:js-sys" ];
          "stdweb" = [ "dep:stdweb" ];
          "wasm-bindgen" = [
            "js-sys"
            "wasm-bindgen_rs"
            "web-sys"
          ];
          "wasm-bindgen_rs" = [ "dep:wasm-bindgen_rs" ];
          "web-sys" = [ "dep:web-sys" ];
        };
      };
      "io-lifetimes" = rec {
        crateName = "io-lifetimes";
        version = "1.0.11";
        edition = "2018";
        sha256 = "1hph5lz4wd3drnn6saakwxr497liznpfnv70via6s0v8x6pbkrza";
        libName = "io_lifetimes";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        dependencies = [
          {
            name = "hermit-abi";
            packageId = "hermit-abi 0.3.9";
            optional = true;
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target = { target, features }: (!(target."windows" or false));
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            optional = true;
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_Storage_FileSystem"
              "Win32_Networking_WinSock"
              "Win32_Security"
              "Win32_System_IO"
              "Win32_System_Threading"
            ];
          }
        ];
        features = {
          "async-std" = [ "dep:async-std" ];
          "close" = [
            "libc"
            "hermit-abi"
            "windows-sys"
          ];
          "default" = [ "close" ];
          "fs-err" = [ "dep:fs-err" ];
          "hermit-abi" = [ "dep:hermit-abi" ];
          "libc" = [ "dep:libc" ];
          "mio" = [ "dep:mio" ];
          "os_pipe" = [ "dep:os_pipe" ];
          "socket2" = [ "dep:socket2" ];
          "tokio" = [ "dep:tokio" ];
          "windows-sys" = [ "dep:windows-sys" ];
        };
        resolvedDefaultFeatures = [
          "close"
          "hermit-abi"
          "libc"
          "windows-sys"
        ];
      };
      "is_terminal_polyfill" = rec {
        crateName = "is_terminal_polyfill";
        version = "1.70.1";
        edition = "2021";
        sha256 = "1kwfgglh91z33kl0w5i338mfpa3zs0hidq5j4ny4rmjwrikchhvr";
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "itertools 0.11.0" = rec {
        crateName = "itertools";
        version = "0.11.0";
        edition = "2018";
        sha256 = "0mzyqcc59azx9g5cg6fs8k529gvh4463smmka6jvzs3cd2jp7hdi";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [
            "use_alloc"
            "either/use_std"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "use_alloc"
          "use_std"
        ];
      };
      "itertools 0.12.1" = rec {
        crateName = "itertools";
        version = "0.12.1";
        edition = "2018";
        sha256 = "0s95jbb3ndj1lvfxyq5wanc0fm0r6hg6q4ngb92qlfdxvci10ads";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [
            "use_alloc"
            "either/use_std"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "use_alloc"
          "use_std"
        ];
      };
      "itertools 0.13.0" = rec {
        crateName = "itertools";
        version = "0.13.0";
        edition = "2018";
        sha256 = "11hiy3qzl643zcigknclh446qb9zlg4dpdzfkjaa9q9fqpgyfgj1";
        authors = [
          "bluss"
        ];
        dependencies = [
          {
            name = "either";
            packageId = "either";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use_std" ];
          "use_std" = [
            "use_alloc"
            "either/use_std"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "use_alloc"
          "use_std"
        ];
      };
      "itoa" = rec {
        crateName = "itoa";
        version = "1.0.11";
        edition = "2018";
        sha256 = "0nv9cqjwzr3q58qz84dcz63ggc54yhf1yqar1m858m1kfd4g3wa9";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "jni" = rec {
        crateName = "jni";
        version = "0.21.1";
        edition = "2018";
        sha256 = "15wczfkr2r45slsljby12ymf2hij8wi5b104ghck9byjnwmsm1qs";
        authors = [
          "Josh Chase <josh@prevoty.com>"
        ];
        dependencies = [
          {
            name = "cesu8";
            packageId = "cesu8";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "combine";
            packageId = "combine";
          }
          {
            name = "jni-sys";
            packageId = "jni-sys";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.45.0";
            target = { target, features }: (target."windows" or false);
            features = [ "Win32_Globalization" ];
          }
        ];
        buildDependencies = [
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "invocation" = [
            "java-locator"
            "libloading"
          ];
          "java-locator" = [ "dep:java-locator" ];
          "libloading" = [ "dep:libloading" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "jni-sys" = rec {
        crateName = "jni-sys";
        version = "0.3.0";
        edition = "2015";
        sha256 = "0c01zb9ygvwg9wdx2fii2d39myzprnpqqhy7yizxvjqp5p04pbwf";
        libName = "jni_sys";
        authors = [
          "Steven Fackler <sfackler@gmail.com>"
        ];

      };
      "jobserver" = rec {
        crateName = "jobserver";
        version = "0.1.32";
        edition = "2021";
        sha256 = "1l2k50qmj84x9mn39ivjz76alqmx72jhm12rw33zx9xnpv5xpla8";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
        ];

      };
      "js-sys" = rec {
        crateName = "js-sys";
        version = "0.3.70";
        edition = "2021";
        sha256 = "0yp3rz7vrn9mmqdpkds426r1p9vs6i8mkxx8ryqdfadr0s2q0s0q";
        libName = "js_sys";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];

      };
      "khronos-egl" = rec {
        crateName = "khronos-egl";
        version = "6.0.0";
        edition = "2021";
        sha256 = "0xnzdx0n1bil06xmh8i1x6dbxvk7kd2m70bbm6nw1qzc43r1vbka";
        libName = "khronos_egl";
        authors = [
          "Timothée Haudebourg <author@haudebourg.net>"
          "Sean Kerr <sean@metatomic.io>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "libloading";
            packageId = "libloading 0.8.5";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
            optional = true;
          }
        ];
        features = {
          "1_1" = [ "1_0" ];
          "1_2" = [ "1_1" ];
          "1_3" = [ "1_2" ];
          "1_4" = [ "1_3" ];
          "1_5" = [ "1_4" ];
          "default" = [ "1_5" ];
          "dynamic" = [ "libloading" ];
          "libloading" = [ "dep:libloading" ];
          "pkg-config" = [ "dep:pkg-config" ];
          "static" = [ "pkg-config" ];
        };
        resolvedDefaultFeatures = [
          "1_0"
          "1_1"
          "1_2"
          "1_3"
          "1_4"
          "1_5"
          "default"
          "dynamic"
          "libloading"
          "no-pkg-config"
          "pkg-config"
          "static"
        ];
      };
      "khronos_api" = rec {
        crateName = "khronos_api";
        version = "3.1.0";
        edition = "2015";
        sha256 = "1p0xj5mlbagqyvvnv8wmv3cr7l9y1m153888pxqwg3vk3mg5inz2";
        authors = [
          "Brendan Zabarauskas <bjzaba@yahoo.com.au>"
          "Corey Richardson"
          "Arseny Kapoulkine"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];

      };
      "lazy_static" = rec {
        crateName = "lazy_static";
        version = "1.5.0";
        edition = "2015";
        sha256 = "1zk6dqqni0193xg6iijh7i3i44sryglwgvx20spdvwk3r6sbrlmv";
        authors = [
          "Marvin Löbel <loebel.marvin@gmail.com>"
        ];
        features = {
          "spin" = [ "dep:spin" ];
          "spin_no_std" = [ "spin" ];
        };
      };
      "libc" = rec {
        crateName = "libc";
        version = "0.2.158";
        edition = "2015";
        sha256 = "0fb4qldw1jrxljrwz6bsjn8lv4rqizlqmab41q3j98q332xw9bfq";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
          "rustc-dep-of-std" = [
            "align"
            "rustc-std-workspace-core"
          ];
          "rustc-std-workspace-core" = [ "dep:rustc-std-workspace-core" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "extra_traits"
          "std"
        ];
      };
      "libloading 0.7.4" = rec {
        crateName = "libloading";
        version = "0.7.4";
        edition = "2015";
        sha256 = "17wbccnjvhjd9ibh019xcd8kjvqws8lqgq86lqkpbgig7gyq0wxn";
        authors = [
          "Simonas Kazlauskas <libloading@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [
              "errhandlingapi"
              "libloaderapi"
            ];
          }
        ];

      };
      "libloading 0.8.5" = rec {
        crateName = "libloading";
        version = "0.8.5";
        edition = "2015";
        sha256 = "194dvczq4sifwkzllfmw0qkgvilpha7m5xy90gd6i446vcpz4ya9";
        authors = [
          "Simonas Kazlauskas <libloading@kazlauskas.me>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "libredox" = rec {
        crateName = "libredox";
        version = "0.0.2";
        edition = "2021";
        sha256 = "01v6pb09j7dl2gnbvzz6zmy2k4zyxjjzvl7wacwjjffqsxajry9s";
        authors = [
          "4lDO2 <4lDO2@protonmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.4.1";
          }
        ];
        features = {
          "default" = [ "call" ];
          "scheme" = [ "call" ];
        };
        resolvedDefaultFeatures = [
          "call"
          "default"
        ];
      };
      "linked-hash-map" = rec {
        crateName = "linked-hash-map";
        version = "0.5.6";
        edition = "2015";
        sha256 = "03vpgw7x507g524nx5i1jf5dl8k3kv0fzg8v3ip6qqwbpkqww5q7";
        libName = "linked_hash_map";
        authors = [
          "Stepan Koltsov <stepan.koltsov@gmail.com>"
          "Andrew Paseltiner <apaseltiner@gmail.com>"
        ];
        features = {
          "heapsize" = [ "dep:heapsize" ];
          "heapsize_impl" = [ "heapsize" ];
          "serde" = [ "dep:serde" ];
          "serde_impl" = [ "serde" ];
        };
      };
      "linux-raw-sys 0.3.8" = rec {
        crateName = "linux-raw-sys";
        version = "0.3.8";
        edition = "2018";
        sha256 = "068mbigb3frrxvbi5g61lx25kksy98f2qgkvc4xg8zxznwp98lzg";
        libName = "linux_raw_sys";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [
            "std"
            "general"
            "errno"
          ];
          "rustc-dep-of-std" = [
            "core"
            "compiler_builtins"
            "no_std"
          ];
        };
        resolvedDefaultFeatures = [
          "errno"
          "general"
          "ioctl"
          "no_std"
        ];
      };
      "linux-raw-sys 0.4.14" = rec {
        crateName = "linux-raw-sys";
        version = "0.4.14";
        edition = "2021";
        sha256 = "12gsjgbhhjwywpqcrizv80vrp7p7grsz5laqq773i33wphjsxcvq";
        libName = "linux_raw_sys";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [
            "std"
            "general"
            "errno"
          ];
          "rustc-dep-of-std" = [
            "core"
            "compiler_builtins"
            "no_std"
          ];
        };
        resolvedDefaultFeatures = [
          "elf"
          "errno"
          "general"
          "if_ether"
          "ioctl"
          "net"
          "netlink"
          "no_std"
          "prctl"
          "system"
          "xdp"
        ];
      };
      "litrs" = rec {
        crateName = "litrs";
        version = "0.4.1";
        edition = "2018";
        sha256 = "19cssch9gc0x2snd9089nvwzz79zx6nzsi3icffpx25p4hck1kml";
        authors = [
          "Lukas Kalbertodt <lukas.kalbertodt@gmail.com>"
        ];
        features = {
          "check_suffix" = [ "unicode-xid" ];
          "default" = [ "proc-macro2" ];
          "proc-macro2" = [ "dep:proc-macro2" ];
          "unicode-xid" = [ "dep:unicode-xid" ];
        };
      };
      "lock_api" = rec {
        crateName = "lock_api";
        version = "0.4.12";
        edition = "2021";
        sha256 = "05qvxa6g27yyva25a5ghsg85apdxkvr77yhkyhapj6r8vnf8pbq7";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "scopeguard";
            packageId = "scopeguard";
            usesDefaultFeatures = false;
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "atomic_usize" ];
          "owning_ref" = [ "dep:owning_ref" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [
          "atomic_usize"
          "default"
        ];
      };
      "log" = rec {
        crateName = "log";
        version = "0.4.22";
        edition = "2021";
        sha256 = "093vs0wkm1rgyykk7fjbqp2lwizbixac1w52gv109p5r4jh0p9x7";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "kv_serde" = [
            "kv_std"
            "value-bag/serde"
            "serde"
          ];
          "kv_std" = [
            "std"
            "kv"
            "value-bag/error"
          ];
          "kv_sval" = [
            "kv"
            "value-bag/sval"
            "sval"
            "sval_ref"
          ];
          "kv_unstable" = [
            "kv"
            "value-bag"
          ];
          "kv_unstable_serde" = [
            "kv_serde"
            "kv_unstable_std"
          ];
          "kv_unstable_std" = [
            "kv_std"
            "kv_unstable"
          ];
          "kv_unstable_sval" = [
            "kv_sval"
            "kv_unstable"
          ];
          "serde" = [ "dep:serde" ];
          "sval" = [ "dep:sval" ];
          "sval_ref" = [ "dep:sval_ref" ];
          "value-bag" = [ "dep:value-bag" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "macro_utils" = rec {
        crateName = "macro_utils";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./packages/macro_utils;
        };
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [
              "full"
              "extra-traits"
            ];
          }
        ];

      };
      "malloc_buf" = rec {
        crateName = "malloc_buf";
        version = "0.0.6";
        edition = "2015";
        sha256 = "1jqr77j89pwszv51fmnknzvd53i1nkmcr8rjrvcxhm4dx1zr1fv2";
        authors = [
          "Steven Sheldon"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "memchr" = rec {
        crateName = "memchr";
        version = "2.7.4";
        edition = "2021";
        sha256 = "18z32bhxrax0fnjikv475z7ii718hq457qwmaryixfxsl2qrmjkq";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
          "bluss"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "logging" = [ "dep:log" ];
          "rustc-dep-of-std" = [
            "core"
            "compiler_builtins"
          ];
          "std" = [ "alloc" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "memmap2" = rec {
        crateName = "memmap2";
        version = "0.9.5";
        edition = "2018";
        sha256 = "0krpvvkpg4i3l05cv3q2xk24a1vj5c86gbrli2wzhj1qkpnpwgzx";
        authors = [
          "Dan Burkert <dan@danburkert.com>"
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
        ];
        features = {
          "stable_deref_trait" = [ "dep:stable_deref_trait" ];
        };
      };
      "memoffset 0.7.1" = rec {
        crateName = "memoffset";
        version = "0.7.1";
        edition = "2015";
        sha256 = "1x2zv8hv9c9bvgmhsjvr9bymqwyxvgbca12cm8xkhpyy5k1r7s2x";
        authors = [
          "Gilad Naaman <gilad.naaman@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "memoffset 0.9.1" = rec {
        crateName = "memoffset";
        version = "0.9.1";
        edition = "2015";
        sha256 = "12i17wh9a9plx869g7j4whf62xw68k5zd4k0k5nh6ys5mszid028";
        authors = [
          "Gilad Naaman <gilad.naaman@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "metal" = rec {
        crateName = "metal";
        version = "0.28.0";
        edition = "2021";
        sha256 = "1jyg1pwv306lqcpw0qbdixyxyna1kb5mrfpqldin1ghlx9kf2dsn";
        authors = [
          "gfx-rs developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "block";
            packageId = "block";
          }
          {
            name = "core-graphics-types";
            packageId = "core-graphics-types";
          }
          {
            name = "foreign-types";
            packageId = "foreign-types";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "objc";
            packageId = "objc";
          }
          {
            name = "paste";
            packageId = "paste";
          }
        ];
        features = {
          "default" = [ "link" ];
          "dispatch" = [ "dep:dispatch" ];
          "link" = [ "core-graphics-types/link" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "link"
        ];
      };
      "miniz_oxide" = rec {
        crateName = "miniz_oxide";
        version = "0.8.0";
        edition = "2021";
        sha256 = "1wadxkg6a6z4lr7kskapj5d8pxlx7cp1ifw4daqnkzqjxych5n72";
        authors = [
          "Frommi <daniil.liferenko@gmail.com>"
          "oyvindln <oyvindln@users.noreply.github.com>"
        ];
        dependencies = [
          {
            name = "adler2";
            packageId = "adler2";
            usesDefaultFeatures = false;
          }
          {
            name = "simd-adler32";
            packageId = "simd-adler32";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "dep:alloc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "with-alloc" ];
          "rustc-dep-of-std" = [
            "core"
            "alloc"
            "compiler_builtins"
            "adler2/rustc-dep-of-std"
          ];
          "simd" = [ "simd-adler32" ];
          "simd-adler32" = [ "dep:simd-adler32" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "simd"
          "simd-adler32"
          "with-alloc"
        ];
      };
      "naga" = rec {
        crateName = "naga";
        version = "0.20.0";
        edition = "2021";
        sha256 = "0cc2hnz8dzjh85d6r3x54wjiqjyzwpnk59nl7f2pc25bzi3awdp5";
        authors = [
          "gfx-rs developers"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
          }
          {
            name = "bit-set";
            packageId = "bit-set";
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "codespan-reporting";
            packageId = "codespan-reporting";
          }
          {
            name = "hexf-parse";
            packageId = "hexf-parse";
            optional = true;
          }
          {
            name = "indexmap";
            packageId = "indexmap";
            features = [ "std" ];
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "num-traits";
            packageId = "num-traits";
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash";
          }
          {
            name = "spirv";
            packageId = "spirv";
            optional = true;
          }
          {
            name = "termcolor";
            packageId = "termcolor";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "unicode-xid";
            packageId = "unicode-xid";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "spirv";
            packageId = "spirv";
            features = [ "deserialize" ];
          }
        ];
        features = {
          "arbitrary" = [
            "dep:arbitrary"
            "bitflags/arbitrary"
            "indexmap/arbitrary"
          ];
          "deserialize" = [
            "serde"
            "bitflags/serde"
            "indexmap/serde"
          ];
          "glsl-in" = [ "pp-rs" ];
          "hexf-parse" = [ "dep:hexf-parse" ];
          "petgraph" = [ "dep:petgraph" ];
          "pp-rs" = [ "dep:pp-rs" ];
          "serde" = [ "dep:serde" ];
          "serialize" = [
            "serde"
            "bitflags/serde"
            "indexmap/serde"
          ];
          "spirv" = [ "dep:spirv" ];
          "spv-in" = [
            "petgraph"
            "spirv"
          ];
          "spv-out" = [ "spirv" ];
          "unicode-xid" = [ "dep:unicode-xid" ];
          "wgsl-in" = [
            "hexf-parse"
            "unicode-xid"
            "compact"
          ];
        };
        resolvedDefaultFeatures = [
          "compact"
          "default"
          "glsl-out"
          "hexf-parse"
          "spirv"
          "spv-out"
          "unicode-xid"
          "wgsl-in"
        ];
      };
      "ndk" = rec {
        crateName = "ndk";
        version = "0.8.0";
        edition = "2021";
        sha256 = "1dx5yyqh32bi161mipg4br4i33syjidw81qrq0w7mc8hf0ds6xi0";
        authors = [
          "The Rust Mobile contributors"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "jni-sys";
            packageId = "jni-sys";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "ndk-sys";
            packageId = "ndk-sys";
            rename = "ffi";
          }
          {
            name = "num_enum";
            packageId = "num_enum";
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle 0.5.2";
            rename = "rwh_05";
            optional = true;
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle 0.6.2";
            rename = "rwh_06";
            optional = true;
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
        ];
        features = {
          "all" = [
            "audio"
            "bitmap"
            "media"
            "api-level-31"
            "rwh_04"
            "rwh_05"
            "rwh_06"
          ];
          "api-level-24" = [ "api-level-23" ];
          "api-level-25" = [ "api-level-24" ];
          "api-level-26" = [ "api-level-25" ];
          "api-level-27" = [ "api-level-26" ];
          "api-level-28" = [ "api-level-27" ];
          "api-level-29" = [ "api-level-28" ];
          "api-level-30" = [ "api-level-29" ];
          "api-level-31" = [ "api-level-30" ];
          "audio" = [
            "ffi/audio"
            "api-level-26"
          ];
          "bitmap" = [ "ffi/bitmap" ];
          "default" = [ "rwh_06" ];
          "jni" = [ "dep:jni" ];
          "media" = [ "ffi/media" ];
          "rwh_04" = [ "dep:rwh_04" ];
          "rwh_05" = [ "dep:rwh_05" ];
          "rwh_06" = [ "dep:rwh_06" ];
          "sync" = [
            "ffi/sync"
            "api-level-26"
          ];
          "test" = [
            "ffi/test"
            "jni"
            "all"
          ];
        };
        resolvedDefaultFeatures = [
          "rwh_05"
          "rwh_06"
        ];
      };
      "ndk-context" = rec {
        crateName = "ndk-context";
        version = "0.1.1";
        edition = "2021";
        sha256 = "12sai3dqsblsvfd1l1zab0z6xsnlha3xsfl7kagdnmj3an3jvc17";
        libName = "ndk_context";
        authors = [
          "The Rust Windowing contributors"
        ];

      };
      "ndk-sys" = rec {
        crateName = "ndk-sys";
        version = "0.5.0+25.2.9519653";
        edition = "2021";
        sha256 = "14bnxww0f17xl8pyn6j5kpkl98snjl9lin8i7qv4zzb0vmlnf6cc";
        libName = "ndk_sys";
        authors = [
          "The Rust Windowing contributors"
        ];
        dependencies = [
          {
            name = "jni-sys";
            packageId = "jni-sys";
          }
        ];
        features = {
        };
      };
      "nix 0.26.4" = rec {
        crateName = "nix";
        version = "0.26.4";
        edition = "2018";
        sha256 = "06xgl4ybb8pvjrbmc3xggbgk3kbs1j0c4c0nzdfrmpbgrkrym2sr";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            features = [ "extra_traits" ];
          }
          {
            name = "memoffset";
            packageId = "memoffset 0.7.1";
            optional = true;
            target = { target, features }: (!("redox" == target."os" or null));
          }
        ];
        features = {
          "aio" = [ "pin-utils" ];
          "default" = [
            "acct"
            "aio"
            "dir"
            "env"
            "event"
            "feature"
            "fs"
            "hostname"
            "inotify"
            "ioctl"
            "kmod"
            "mman"
            "mount"
            "mqueue"
            "net"
            "personality"
            "poll"
            "process"
            "pthread"
            "ptrace"
            "quota"
            "reboot"
            "resource"
            "sched"
            "signal"
            "socket"
            "term"
            "time"
            "ucontext"
            "uio"
            "user"
            "zerocopy"
          ];
          "dir" = [ "fs" ];
          "memoffset" = [ "dep:memoffset" ];
          "mount" = [ "uio" ];
          "mqueue" = [ "fs" ];
          "net" = [ "socket" ];
          "pin-utils" = [ "dep:pin-utils" ];
          "ptrace" = [ "process" ];
          "sched" = [ "process" ];
          "signal" = [ "process" ];
          "socket" = [ "memoffset" ];
          "ucontext" = [ "signal" ];
          "user" = [ "feature" ];
          "zerocopy" = [
            "fs"
            "uio"
          ];
        };
        resolvedDefaultFeatures = [
          "feature"
          "memoffset"
          "socket"
          "uio"
          "user"
        ];
      };
      "nix 0.29.0" = rec {
        crateName = "nix";
        version = "0.29.0";
        edition = "2021";
        sha256 = "0ikvn7s9r2lrfdm3mx1h7nbfjvcc6s9vxdzw7j5xfkd2qdnp9qki";
        authors = [
          "The nix-rust Project Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            features = [ "extra_traits" ];
          }
          {
            name = "memoffset";
            packageId = "memoffset 0.9.1";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases 0.2.1";
          }
        ];
        features = {
          "aio" = [ "pin-utils" ];
          "dir" = [ "fs" ];
          "memoffset" = [ "dep:memoffset" ];
          "mount" = [ "uio" ];
          "mqueue" = [ "fs" ];
          "net" = [ "socket" ];
          "pin-utils" = [ "dep:pin-utils" ];
          "ptrace" = [ "process" ];
          "sched" = [ "process" ];
          "signal" = [ "process" ];
          "socket" = [ "memoffset" ];
          "ucontext" = [ "signal" ];
          "user" = [ "feature" ];
          "zerocopy" = [
            "fs"
            "uio"
          ];
        };
        resolvedDefaultFeatures = [
          "feature"
          "memoffset"
          "socket"
          "uio"
          "user"
        ];
      };
      "nohash-hasher" = rec {
        crateName = "nohash-hasher";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0lf4p6k01w4wm7zn4grnihzj8s7zd5qczjmzng7wviwxawih5x9b";
        libName = "nohash_hasher";
        authors = [
          "Parity Technologies <admin@parity.io>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "num-traits" = rec {
        crateName = "num-traits";
        version = "0.2.19";
        edition = "2021";
        sha256 = "0h984rhdkkqd4ny9cif7y2azl3xdfb7768hb9irhpsch4q3gq787";
        libName = "num_traits";
        authors = [
          "The Rust Project Developers"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "libm" = [ "dep:libm" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "num_enum" = rec {
        crateName = "num_enum";
        version = "0.7.3";
        edition = "2021";
        sha256 = "0yai0vafhy85mvhknzfqd7lm04hzaln7i5c599rhy8mj831kyqaf";
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "num_enum_derive";
            packageId = "num_enum_derive";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "complex-expressions" = [ "num_enum_derive/complex-expressions" ];
          "default" = [ "std" ];
          "std" = [ "num_enum_derive/std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "num_enum_derive" = rec {
        crateName = "num_enum_derive";
        version = "0.7.3";
        edition = "2021";
        sha256 = "0mksna1jj87ydh146gn6jcqkvvs920c3dgh0p4f3xk184kpl865g";
        procMacro = true;
        authors = [
          "Daniel Wagner-Hall <dawagner@gmail.com>"
          "Daniel Henry-Mantilla <daniel.henry.mantilla@gmail.com>"
          "Vincent Esche <regexident@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.2.0";
            optional = true;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "parsing" ];
          }
        ];
        devDependencies = [
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [
              "extra-traits"
              "parsing"
            ];
          }
        ];
        features = {
          "complex-expressions" = [ "syn/full" ];
          "default" = [ "std" ];
          "proc-macro-crate" = [ "dep:proc-macro-crate" ];
          "std" = [ "proc-macro-crate" ];
        };
        resolvedDefaultFeatures = [
          "proc-macro-crate"
          "std"
        ];
      };
      "objc" = rec {
        crateName = "objc";
        version = "0.2.7";
        edition = "2015";
        sha256 = "1cbpf6kz8a244nn1qzl3xyhmp05gsg4n313c9m3567625d3innwi";
        authors = [
          "Steven Sheldon"
        ];
        dependencies = [
          {
            name = "malloc_buf";
            packageId = "malloc_buf";
          }
        ];
        features = {
          "exception" = [ "objc_exception" ];
          "objc_exception" = [ "dep:objc_exception" ];
        };
      };
      "objc-sys 0.2.0-beta.2" = rec {
        crateName = "objc-sys";
        version = "0.2.0-beta.2";
        edition = "2021";
        links = "objc_0_2";
        sha256 = "1msm1bwv69k12ikxm71mi1ifrbx2bzsmk2w2bah98mp9q4s9hfyz";
        libName = "objc_sys";
        authors = [
          "Mads Marquart <mads@marquart.dk>"
        ];
        features = {
          "cc" = [ "dep:cc" ];
          "default" = [
            "std"
            "apple"
          ];
          "gnustep-1-8" = [ "gnustep-1-7" ];
          "gnustep-1-9" = [ "gnustep-1-8" ];
          "gnustep-2-0" = [ "gnustep-1-9" ];
          "gnustep-2-1" = [ "gnustep-2-0" ];
          "std" = [ "alloc" ];
          "unstable-exception" = [ "cc" ];
          "unstable-winobjc" = [ "gnustep-1-8" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "apple"
          "std"
        ];
      };
      "objc-sys 0.3.5" = rec {
        crateName = "objc-sys";
        version = "0.3.5";
        edition = "2021";
        links = "objc_0_3";
        sha256 = "0423gry7s3rmz8s3pzzm1zy5mdjif75g6dbzc2lf2z0c77fipffd";
        libName = "objc_sys";
        authors = [
          "Mads Marquart <mads@marquart.dk>"
        ];
        features = {
          "cc" = [ "dep:cc" ];
          "default" = [ "std" ];
          "gnustep-1-8" = [ "gnustep-1-7" ];
          "gnustep-1-9" = [ "gnustep-1-8" ];
          "gnustep-2-0" = [ "gnustep-1-9" ];
          "gnustep-2-1" = [ "gnustep-2-0" ];
          "std" = [ "alloc" ];
          "unstable-exception" = [ "cc" ];
          "unstable-winobjc" = [ "gnustep-1-8" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "apple"
          "std"
        ];
      };
      "objc2 0.3.0-beta.3.patch-leaks.3" = rec {
        crateName = "objc2";
        version = "0.3.0-beta.3.patch-leaks.3";
        edition = "2021";
        sha256 = "0s54wfgw20ypg4ibzldwkqvv6b2kkqbmwcl0pq5j5c9ckw7n80by";
        authors = [
          "Steven Sheldon"
          "Mads Marquart <mads@marquart.dk>"
        ];
        dependencies = [
          {
            name = "block2";
            packageId = "block2 0.2.0-alpha.6";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "objc-sys";
            packageId = "objc-sys 0.2.0-beta.2";
            usesDefaultFeatures = false;
          }
          {
            name = "objc2-encode";
            packageId = "objc2-encode 2.0.0-pre.2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [
            "objc2-encode/alloc"
            "objc-sys/alloc"
            "block2?/alloc"
          ];
          "apple" = [
            "objc-sys/apple"
            "objc2-encode/apple"
            "block2?/apple"
          ];
          "block" = [ "block2" ];
          "block2" = [ "dep:block2" ];
          "catch-all" = [ "exception" ];
          "default" = [
            "std"
            "apple"
            "foundation"
          ];
          "exception" = [ "objc-sys/unstable-exception" ];
          "gnustep-1-7" = [
            "objc-sys/gnustep-1-7"
            "objc2-encode/gnustep-1-7"
            "block2?/gnustep-1-7"
          ];
          "gnustep-1-8" = [
            "gnustep-1-7"
            "objc-sys/gnustep-1-8"
            "objc2-encode/gnustep-1-8"
            "block2?/gnustep-1-8"
          ];
          "gnustep-1-9" = [
            "gnustep-1-8"
            "objc-sys/gnustep-1-9"
            "objc2-encode/gnustep-1-9"
            "block2?/gnustep-1-9"
          ];
          "gnustep-2-0" = [
            "gnustep-1-9"
            "objc-sys/gnustep-2-0"
            "objc2-encode/gnustep-2-0"
            "block2?/gnustep-2-0"
          ];
          "gnustep-2-1" = [
            "gnustep-2-0"
            "objc-sys/gnustep-2-1"
            "objc2-encode/gnustep-2-1"
            "block2?/gnustep-2-1"
          ];
          "malloc" = [ "malloc_buf" ];
          "malloc_buf" = [ "dep:malloc_buf" ];
          "objc2-proc-macros" = [ "dep:objc2-proc-macros" ];
          "std" = [
            "alloc"
            "objc2-encode/std"
            "objc-sys/std"
            "block2?/std"
          ];
          "unstable-static-class" = [ "objc2-proc-macros" ];
          "unstable-static-class-inlined" = [ "unstable-static-class" ];
          "unstable-static-sel" = [ "objc2-proc-macros" ];
          "unstable-static-sel-inlined" = [ "unstable-static-sel" ];
          "uuid" = [ "dep:uuid" ];
          "verify_message" = [ "malloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "apple"
          "default"
          "foundation"
          "std"
        ];
      };
      "objc2 0.4.1" = rec {
        crateName = "objc2";
        version = "0.4.1";
        edition = "2021";
        sha256 = "13gr3zqv8gzlylff5d4za91f50asb7vsrkpv8kiva3nkzm05m72m";
        authors = [
          "Steven Sheldon"
          "Mads Marquart <mads@marquart.dk>"
        ];
        dependencies = [
          {
            name = "objc-sys";
            packageId = "objc-sys 0.3.5";
            usesDefaultFeatures = false;
          }
          {
            name = "objc2-encode";
            packageId = "objc2-encode 3.0.0";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [
            "objc2-encode/alloc"
            "objc-sys/alloc"
          ];
          "apple" = [ "objc-sys/apple" ];
          "catch-all" = [ "exception" ];
          "default" = [
            "std"
            "apple"
          ];
          "exception" = [ "objc-sys/unstable-exception" ];
          "gnustep-1-7" = [ "objc-sys/gnustep-1-7" ];
          "gnustep-1-8" = [
            "gnustep-1-7"
            "objc-sys/gnustep-1-8"
          ];
          "gnustep-1-9" = [
            "gnustep-1-8"
            "objc-sys/gnustep-1-9"
          ];
          "gnustep-2-0" = [
            "gnustep-1-9"
            "objc-sys/gnustep-2-0"
          ];
          "gnustep-2-1" = [
            "gnustep-2-0"
            "objc-sys/gnustep-2-1"
          ];
          "malloc" = [ "malloc_buf" ];
          "malloc_buf" = [ "dep:malloc_buf" ];
          "objc2-proc-macros" = [ "dep:objc2-proc-macros" ];
          "std" = [
            "alloc"
            "objc2-encode/std"
            "objc-sys/std"
          ];
          "unstable-apple-new" = [ "apple" ];
          "unstable-compiler-rt" = [ "apple" ];
          "unstable-static-class" = [ "objc2-proc-macros" ];
          "unstable-static-class-inlined" = [ "unstable-static-class" ];
          "unstable-static-sel" = [ "objc2-proc-macros" ];
          "unstable-static-sel-inlined" = [ "unstable-static-sel" ];
          "verify" = [ "malloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "apple"
          "default"
          "relax-void-encoding"
          "std"
        ];
      };
      "objc2 0.5.2" = rec {
        crateName = "objc2";
        version = "0.5.2";
        edition = "2021";
        sha256 = "015qa2d3vh7c1j2736h5wjrznri7x5ic35vl916c22gzxva8b9s6";
        authors = [
          "Steven Sheldon"
          "Mads Marquart <mads@marquart.dk>"
        ];
        dependencies = [
          {
            name = "objc-sys";
            packageId = "objc-sys 0.3.5";
            usesDefaultFeatures = false;
          }
          {
            name = "objc2-encode";
            packageId = "objc2-encode 4.0.3";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [
            "objc2-encode/alloc"
            "objc-sys/alloc"
          ];
          "catch-all" = [ "exception" ];
          "default" = [ "std" ];
          "exception" = [ "objc-sys/unstable-exception" ];
          "gnustep-1-7" = [
            "unstable-static-class"
            "objc-sys/gnustep-1-7"
          ];
          "gnustep-1-8" = [
            "gnustep-1-7"
            "objc-sys/gnustep-1-8"
          ];
          "gnustep-1-9" = [
            "gnustep-1-8"
            "objc-sys/gnustep-1-9"
          ];
          "gnustep-2-0" = [
            "gnustep-1-9"
            "objc-sys/gnustep-2-0"
          ];
          "gnustep-2-1" = [
            "gnustep-2-0"
            "objc-sys/gnustep-2-1"
          ];
          "malloc" = [ "malloc_buf" ];
          "malloc_buf" = [ "dep:malloc_buf" ];
          "objc2-proc-macros" = [ "dep:objc2-proc-macros" ];
          "std" = [
            "alloc"
            "objc2-encode/std"
            "objc-sys/std"
          ];
          "unstable-compiler-rt" = [ "gnustep-1-7" ];
          "unstable-static-class" = [ "objc2-proc-macros" ];
          "unstable-static-class-inlined" = [ "unstable-static-class" ];
          "unstable-static-sel" = [ "objc2-proc-macros" ];
          "unstable-static-sel-inlined" = [ "unstable-static-sel" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "relax-void-encoding"
          "std"
        ];
      };
      "objc2-app-kit" = rec {
        crateName = "objc2-app-kit";
        version = "0.2.2";
        edition = "2021";
        sha256 = "1zqyi5l1bm26j1bgmac9783ah36m5kcrxlqp5carglnpwgcrms74";
        libName = "objc2_app_kit";
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "block2";
            packageId = "block2 0.5.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "objc2";
            packageId = "objc2 0.5.2";
            usesDefaultFeatures = false;
          }
          {
            name = "objc2-core-data";
            packageId = "objc2-core-data";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ("apple" == target."vendor" or null);
          }
          {
            name = "objc2-core-image";
            packageId = "objc2-core-image";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ("apple" == target."vendor" or null);
          }
          {
            name = "objc2-foundation";
            packageId = "objc2-foundation";
            usesDefaultFeatures = false;
          }
          {
            name = "objc2-quartz-core";
            packageId = "objc2-quartz-core";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: ("apple" == target."vendor" or null);
          }
        ];
        features = {
          "NSATSTypesetter" = [
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSRange"
          ];
          "NSAccessibility" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSString"
          ];
          "NSAccessibilityColor" = [ "objc2-foundation/NSString" ];
          "NSAccessibilityConstants" = [
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSAccessibilityCustomAction" = [ "objc2-foundation/NSString" ];
          "NSAccessibilityCustomRotor" = [
            "objc2-foundation/NSObject"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
          ];
          "NSAccessibilityElement" = [
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSString"
          ];
          "NSAccessibilityProtocols" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSData"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
            "objc2-foundation/NSValue"
          ];
          "NSActionCell" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSAffineTransform" = [ "objc2-foundation/NSAffineTransform" ];
          "NSAlert" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSError"
            "objc2-foundation/NSString"
          ];
          "NSAlignmentFeedbackFilter" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSGeometry"
          ];
          "NSAnimation" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSDate"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObjCRuntime"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSValue"
          ];
          "NSAnimationContext" = [ "objc2-foundation/NSDate" ];
          "NSAppearance" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSBundle"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSAppleScriptExtensions" = [
            "objc2-foundation/NSAppleScript"
            "objc2-foundation/NSAttributedString"
          ];
          "NSApplication" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSData"
            "objc2-foundation/NSDate"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSError"
            "objc2-foundation/NSException"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObjCRuntime"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
            "objc2-foundation/NSUserActivity"
          ];
          "NSApplicationScripting" = [ "objc2-foundation/NSArray" ];
          "NSArrayController" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSIndexSet"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSPredicate"
            "objc2-foundation/NSSortDescriptor"
            "objc2-foundation/NSString"
          ];
          "NSAttributedString" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSData"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSError"
            "objc2-foundation/NSFileWrapper"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSBezierPath" = [
            "objc2-foundation/NSAffineTransform"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSBitmapImageRep" = [
            "bitflags"
            "objc2-core-image?/CIImage"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSData"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSBox" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSBrowser" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSIndexPath"
            "objc2-foundation/NSIndexSet"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSBrowserCell" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSButton" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSButtonCell" = [
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSButtonTouchBarItem" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSCIImageRep" = [
            "objc2-core-image?/CIImage"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSCachedImageRep" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSCandidateListTouchBarItem" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
          ];
          "NSCell" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSFormatter"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObjCRuntime"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSClickGestureRecognizer" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSObject"
          ];
          "NSClipView" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
          ];
          "NSCollectionView" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSBundle"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSIndexPath"
            "objc2-foundation/NSIndexSet"
            "objc2-foundation/NSObjCRuntime"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSSet"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSCollectionViewCompositionalLayout" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSIndexPath"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSCollectionViewFlowLayout" = [
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSIndexPath"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSCollectionViewGridLayout" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSCollectionViewLayout" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSIndexPath"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSSet"
            "objc2-foundation/NSString"
          ];
          "NSCollectionViewTransitionLayout" = [
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSColor" = [
            "objc2-core-image?/CIColor"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSBundle"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSColorList" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSError"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSColorPanel" = [
            "bitflags"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSColorPicker" = [
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSString"
          ];
          "NSColorPickerTouchBarItem" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSColorPicking" = [
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSString"
          ];
          "NSColorSpace" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSData"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSColorWell" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSComboBox" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSComboBoxCell" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSComboButton" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSControl" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSFormatter"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
          ];
          "NSController" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSObject"
          ];
          "NSCursor" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSCustomImageRep" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSCustomTouchBarItem" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSDataAsset" = [
            "objc2-foundation/NSBundle"
            "objc2-foundation/NSData"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSDatePicker" = [
            "objc2-foundation/NSCalendar"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSDate"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSLocale"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSTimeZone"
          ];
          "NSDatePickerCell" = [
            "bitflags"
            "objc2-foundation/NSCalendar"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSDate"
            "objc2-foundation/NSLocale"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSTimeZone"
          ];
          "NSDictionaryController" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSDiffableDataSource" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSIndexPath"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSDockTile" = [
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSString"
          ];
          "NSDocument" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSData"
            "objc2-foundation/NSDate"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSError"
            "objc2-foundation/NSFilePresenter"
            "objc2-foundation/NSFileVersion"
            "objc2-foundation/NSFileWrapper"
            "objc2-foundation/NSSet"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
            "objc2-foundation/NSUndoManager"
          ];
          "NSDocumentController" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSDate"
            "objc2-foundation/NSError"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSDocumentScripting" = [
            "objc2-foundation/NSScriptCommand"
            "objc2-foundation/NSScriptObjectSpecifiers"
            "objc2-foundation/NSScriptStandardSuiteCommands"
            "objc2-foundation/NSString"
          ];
          "NSDragging" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObjCRuntime"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSDraggingItem" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSString"
          ];
          "NSDraggingSession" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSString"
          ];
          "NSDrawer" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSEPSImageRep" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSData"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSErrors" = [
            "objc2-foundation/NSObjCRuntime"
            "objc2-foundation/NSString"
          ];
          "NSEvent" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDate"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSSet"
            "objc2-foundation/NSString"
          ];
          "NSFilePromiseProvider" = [
            "objc2-foundation/NSError"
            "objc2-foundation/NSOperation"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSFilePromiseReceiver" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSError"
            "objc2-foundation/NSOperation"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSFileWrapperExtensions" = [ "objc2-foundation/NSFileWrapper" ];
          "NSFont" = [
            "objc2-foundation/NSAffineTransform"
            "objc2-foundation/NSCharacterSet"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSFontAssetRequest" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSError"
            "objc2-foundation/NSProgress"
          ];
          "NSFontCollection" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSError"
            "objc2-foundation/NSLocale"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSValue"
          ];
          "NSFontDescriptor" = [
            "bitflags"
            "objc2-foundation/NSAffineTransform"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSSet"
            "objc2-foundation/NSString"
          ];
          "NSFontManager" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSString"
          ];
          "NSFontPanel" = [
            "bitflags"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSForm" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSFormCell" = [
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSGestureRecognizer" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSGlyphGenerator" = [ "objc2-foundation/NSAttributedString" ];
          "NSGlyphInfo" = [
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSGradient" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSGraphics" = [
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSString"
          ];
          "NSGraphicsContext" = [
            "objc2-core-image?/CIContext"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSString"
          ];
          "NSGridView" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSRange"
          ];
          "NSGroupTouchBarItem" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSHelpManager" = [
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSBundle"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSString"
          ];
          "NSImage" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSBundle"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSData"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSItemProvider"
            "objc2-foundation/NSLocale"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSImageCell" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSImageRep" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSData"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSImageView" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSInputManager" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
          ];
          "NSInputServer" = [
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
          ];
          "NSInterfaceStyle" = [ "objc2-foundation/NSString" ];
          "NSItemProvider" = [
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSItemProvider"
            "objc2-foundation/NSString"
          ];
          "NSKeyValueBinding" = [
            "objc2-core-data?/NSAttributeDescription"
            "objc2-core-data?/NSPropertyDescription"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSError"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSLayoutAnchor" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSLayoutConstraint" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSString"
          ];
          "NSLayoutGuide" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSLayoutManager" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
          ];
          "NSLevelIndicator" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSLevelIndicatorCell" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSMagnificationGestureRecognizer" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSMatrix" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSMediaLibraryBrowserController" = [
            "bitflags"
            "objc2-foundation/NSGeometry"
          ];
          "NSMenu" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSZone"
          ];
          "NSMenuItem" = [
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSMenuItemBadge" = [
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSMenuItemCell" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSMenuToolbarItem" = [
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSMovie" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSObject"
          ];
          "NSNib" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSBundle"
            "objc2-foundation/NSData"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSObjectController" = [
            "objc2-core-data?/NSFetchRequest"
            "objc2-core-data?/NSManagedObjectContext"
            "objc2-core-data?/NSPersistentStoreRequest"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSError"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSPredicate"
            "objc2-foundation/NSString"
          ];
          "NSOpenPanel" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSOutlineView" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSIndexSet"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSSortDescriptor"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSPDFImageRep" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSData"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSPDFInfo" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSPDFPanel" = [
            "bitflags"
            "objc2-foundation/NSString"
          ];
          "NSPICTImageRep" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSData"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSPageController" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSBundle"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSPageLayout" = [ "objc2-foundation/NSArray" ];
          "NSPanGestureRecognizer" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSPanel" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSParagraphStyle" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCharacterSet"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSLocale"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSPasteboard" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSData"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSFileWrapper"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSPasteboardItem" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSData"
            "objc2-foundation/NSString"
          ];
          "NSPathCell" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSPathComponentCell" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSPathControl" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSPathControlItem" = [
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSPersistentDocument" = [
            "objc2-core-data?/NSManagedObjectContext"
            "objc2-core-data?/NSManagedObjectModel"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSError"
            "objc2-foundation/NSFilePresenter"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSPickerTouchBarItem" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSPopUpButton" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSPopUpButtonCell" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSPopover" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSPopoverTouchBarItem" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSPredicateEditor" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSPredicateEditorRowTemplate" = [
            "objc2-core-data?/NSAttributeDescription"
            "objc2-core-data?/NSEntityDescription"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSComparisonPredicate"
            "objc2-foundation/NSExpression"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSPredicate"
            "objc2-foundation/NSString"
            "objc2-foundation/NSValue"
          ];
          "NSPressGestureRecognizer" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSDate"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSPreviewRepresentingActivityItem" = [
            "objc2-foundation/NSItemProvider"
            "objc2-foundation/NSString"
          ];
          "NSPrintInfo" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSPrintOperation" = [
            "objc2-foundation/NSData"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObjCRuntime"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
          ];
          "NSPrintPanel" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSSet"
            "objc2-foundation/NSString"
          ];
          "NSPrinter" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSProgressIndicator" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSDate"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSProgress"
          ];
          "NSResponder" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSError"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSUndoManager"
          ];
          "NSRotationGestureRecognizer" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSRuleEditor" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSIndexSet"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSPredicate"
            "objc2-foundation/NSString"
          ];
          "NSRulerMarker" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSRulerView" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSValue"
          ];
          "NSRunningApplication" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDate"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSSavePanel" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSError"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSScreen" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDate"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSString"
          ];
          "NSScrollView" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSScroller" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSScrubber" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSIndexSet"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
          ];
          "NSScrubberItemView" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSScrubberLayout" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSIndexSet"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSSet"
          ];
          "NSSearchField" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSSearchFieldCell" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSSearchToolbarItem" = [
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSSecureTextField" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSSegmentedCell" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSSegmentedControl" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSShadow" = [
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSSharingService" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSError"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSItemProvider"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSSharingServicePickerToolbarItem" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSSharingServicePickerTouchBarItem" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSSlider" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSSliderAccessory" = [ "objc2-foundation/NSObject" ];
          "NSSliderCell" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSSliderTouchBarItem" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSSound" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSBundle"
            "objc2-foundation/NSData"
            "objc2-foundation/NSDate"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSSpeechRecognizer" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSString"
          ];
          "NSSpeechSynthesizer" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSError"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSSpellChecker" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSOrthography"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
            "objc2-foundation/NSTextCheckingResult"
          ];
          "NSSplitView" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSSplitViewController" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSBundle"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSSplitViewItem" = [
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSStackView" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSStatusBar" = [ "objc2-foundation/NSGeometry" ];
          "NSStatusBarButton" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSStatusItem" = [
            "bitflags"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSString"
          ];
          "NSStepper" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSStepperCell" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSStepperTouchBarItem" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSFormatter"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSStoryboard" = [
            "objc2-foundation/NSBundle"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSString"
          ];
          "NSStoryboardSegue" = [ "objc2-foundation/NSString" ];
          "NSStringDrawing" = [
            "bitflags"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSString"
          ];
          "NSSwitch" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSTabView" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSTabViewController" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSBundle"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSTabViewItem" = [
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSTableCellView" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSTableColumn" = [
            "bitflags"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSSortDescriptor"
            "objc2-foundation/NSString"
          ];
          "NSTableHeaderCell" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSTableHeaderView" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSTableRowView" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSTableView" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSEnumerator"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSIndexSet"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSSortDescriptor"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSTableViewRowAction" = [
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSText" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSData"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
          ];
          "NSTextAlternatives" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSTextAttachment" = [
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSData"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSFileWrapper"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSTextAttachmentCell" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSTextCheckingClient" = [
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
          ];
          "NSTextCheckingController" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
            "objc2-foundation/NSTextCheckingResult"
          ];
          "NSTextContainer" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSTextContent" = [ "objc2-foundation/NSString" ];
          "NSTextContentManager" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSError"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
          ];
          "NSTextElement" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
          ];
          "NSTextField" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
            "objc2-foundation/NSTextCheckingResult"
          ];
          "NSTextFieldCell" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSTextFinder" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
            "objc2-foundation/NSValue"
          ];
          "NSTextInputClient" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
          ];
          "NSTextInputContext" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSString"
          ];
          "NSTextInsertionIndicator" = [
            "bitflags"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSTextLayoutFragment" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSOperation"
          ];
          "NSTextLayoutManager" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSOperation"
            "objc2-foundation/NSString"
          ];
          "NSTextLineFragment" = [
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
          ];
          "NSTextList" = [
            "bitflags"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSTextListElement" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSString"
          ];
          "NSTextRange" = [ "objc2-foundation/NSObjCRuntime" ];
          "NSTextSelection" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSTextSelectionNavigation" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSString"
          ];
          "NSTextStorage" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
          ];
          "NSTextStorageScripting" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
          ];
          "NSTextTable" = [
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSRange"
          ];
          "NSTextView" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSOrthography"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
            "objc2-foundation/NSTextCheckingResult"
            "objc2-foundation/NSURL"
            "objc2-foundation/NSUndoManager"
            "objc2-foundation/NSValue"
          ];
          "NSTextViewportLayoutController" = [ "objc2-foundation/NSGeometry" ];
          "NSTintConfiguration" = [ "objc2-foundation/NSObject" ];
          "NSTitlebarAccessoryViewController" = [
            "objc2-foundation/NSBundle"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSTokenField" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCharacterSet"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSDate"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSTokenFieldCell" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCharacterSet"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSDate"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSToolbar" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSSet"
            "objc2-foundation/NSString"
          ];
          "NSToolbarItem" = [
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSSet"
            "objc2-foundation/NSString"
          ];
          "NSToolbarItemGroup" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSTouch" = [
            "bitflags"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSTouchBar" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSSet"
            "objc2-foundation/NSString"
          ];
          "NSTouchBarItem" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSTrackingArea" = [
            "bitflags"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSTrackingSeparatorToolbarItem" = [
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSTreeController" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSIndexPath"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSSortDescriptor"
            "objc2-foundation/NSString"
          ];
          "NSTreeNode" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSIndexPath"
            "objc2-foundation/NSSortDescriptor"
          ];
          "NSTypesetter" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
          ];
          "NSUserActivity" = [
            "objc2-foundation/NSString"
            "objc2-foundation/NSUserActivity"
          ];
          "NSUserDefaultsController" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSUserDefaults"
          ];
          "NSUserInterfaceCompression" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSSet"
            "objc2-foundation/NSString"
          ];
          "NSUserInterfaceItemIdentification" = [ "objc2-foundation/NSString" ];
          "NSUserInterfaceItemSearching" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
          ];
          "NSView" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSData"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObjCRuntime"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
            "objc2-quartz-core?/CALayer"
          ];
          "NSViewController" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSBundle"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSExtensionContext"
            "objc2-foundation/NSExtensionRequestHandling"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSVisualEffectView" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "NSWindow" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSData"
            "objc2-foundation/NSDate"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSError"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObjCRuntime"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
            "objc2-foundation/NSUndoManager"
            "objc2-foundation/NSValue"
          ];
          "NSWindowController" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSWindowRestoration" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSError"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSOperation"
            "objc2-foundation/NSString"
          ];
          "NSWindowScripting" = [
            "objc2-foundation/NSScriptCommand"
            "objc2-foundation/NSScriptStandardSuiteCommands"
          ];
          "NSWindowTab" = [
            "objc2-foundation/NSAttributedString"
            "objc2-foundation/NSString"
          ];
          "NSWindowTabGroup" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSString"
          ];
          "NSWorkspace" = [
            "bitflags"
            "objc2-foundation/NSAppleEventDescriptor"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSError"
            "objc2-foundation/NSFileManager"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
            "objc2-foundation/NSValue"
          ];
          "all" = [
            "AppKitDefines"
            "AppKitErrors"
            "NSATSTypesetter"
            "NSAccessibility"
            "NSAccessibilityColor"
            "NSAccessibilityConstants"
            "NSAccessibilityCustomAction"
            "NSAccessibilityCustomRotor"
            "NSAccessibilityElement"
            "NSAccessibilityProtocols"
            "NSActionCell"
            "NSAffineTransform"
            "NSAlert"
            "NSAlignmentFeedbackFilter"
            "NSAnimation"
            "NSAnimationContext"
            "NSAppearance"
            "NSAppleScriptExtensions"
            "NSApplication"
            "NSApplicationScripting"
            "NSArrayController"
            "NSAttributedString"
            "NSBezierPath"
            "NSBitmapImageRep"
            "NSBox"
            "NSBrowser"
            "NSBrowserCell"
            "NSButton"
            "NSButtonCell"
            "NSButtonTouchBarItem"
            "NSCIImageRep"
            "NSCachedImageRep"
            "NSCandidateListTouchBarItem"
            "NSCell"
            "NSClickGestureRecognizer"
            "NSClipView"
            "NSCollectionView"
            "NSCollectionViewCompositionalLayout"
            "NSCollectionViewFlowLayout"
            "NSCollectionViewGridLayout"
            "NSCollectionViewLayout"
            "NSCollectionViewTransitionLayout"
            "NSColor"
            "NSColorList"
            "NSColorPanel"
            "NSColorPicker"
            "NSColorPickerTouchBarItem"
            "NSColorPicking"
            "NSColorSampler"
            "NSColorSpace"
            "NSColorWell"
            "NSComboBox"
            "NSComboBoxCell"
            "NSComboButton"
            "NSControl"
            "NSController"
            "NSCursor"
            "NSCustomImageRep"
            "NSCustomTouchBarItem"
            "NSDataAsset"
            "NSDatePicker"
            "NSDatePickerCell"
            "NSDictionaryController"
            "NSDiffableDataSource"
            "NSDockTile"
            "NSDocument"
            "NSDocumentController"
            "NSDocumentScripting"
            "NSDragging"
            "NSDraggingItem"
            "NSDraggingSession"
            "NSDrawer"
            "NSEPSImageRep"
            "NSErrors"
            "NSEvent"
            "NSFilePromiseProvider"
            "NSFilePromiseReceiver"
            "NSFileWrapperExtensions"
            "NSFont"
            "NSFontAssetRequest"
            "NSFontCollection"
            "NSFontDescriptor"
            "NSFontManager"
            "NSFontPanel"
            "NSForm"
            "NSFormCell"
            "NSGestureRecognizer"
            "NSGlyphGenerator"
            "NSGlyphInfo"
            "NSGradient"
            "NSGraphics"
            "NSGraphicsContext"
            "NSGridView"
            "NSGroupTouchBarItem"
            "NSHapticFeedback"
            "NSHelpManager"
            "NSImage"
            "NSImageCell"
            "NSImageRep"
            "NSImageView"
            "NSInputManager"
            "NSInputServer"
            "NSInterfaceStyle"
            "NSItemProvider"
            "NSKeyValueBinding"
            "NSLayoutAnchor"
            "NSLayoutConstraint"
            "NSLayoutGuide"
            "NSLayoutManager"
            "NSLevelIndicator"
            "NSLevelIndicatorCell"
            "NSMagnificationGestureRecognizer"
            "NSMatrix"
            "NSMediaLibraryBrowserController"
            "NSMenu"
            "NSMenuItem"
            "NSMenuItemBadge"
            "NSMenuItemCell"
            "NSMenuToolbarItem"
            "NSMovie"
            "NSNib"
            "NSNibDeclarations"
            "NSNibLoading"
            "NSObjectController"
            "NSOpenGL"
            "NSOpenGLLayer"
            "NSOpenGLView"
            "NSOpenPanel"
            "NSOutlineView"
            "NSPDFImageRep"
            "NSPDFInfo"
            "NSPDFPanel"
            "NSPICTImageRep"
            "NSPageController"
            "NSPageLayout"
            "NSPanGestureRecognizer"
            "NSPanel"
            "NSParagraphStyle"
            "NSPasteboard"
            "NSPasteboardItem"
            "NSPathCell"
            "NSPathComponentCell"
            "NSPathControl"
            "NSPathControlItem"
            "NSPersistentDocument"
            "NSPickerTouchBarItem"
            "NSPopUpButton"
            "NSPopUpButtonCell"
            "NSPopover"
            "NSPopoverTouchBarItem"
            "NSPredicateEditor"
            "NSPredicateEditorRowTemplate"
            "NSPressGestureRecognizer"
            "NSPressureConfiguration"
            "NSPreviewRepresentingActivityItem"
            "NSPrintInfo"
            "NSPrintOperation"
            "NSPrintPanel"
            "NSPrinter"
            "NSProgressIndicator"
            "NSResponder"
            "NSRotationGestureRecognizer"
            "NSRuleEditor"
            "NSRulerMarker"
            "NSRulerView"
            "NSRunningApplication"
            "NSSavePanel"
            "NSScreen"
            "NSScrollView"
            "NSScroller"
            "NSScrubber"
            "NSScrubberItemView"
            "NSScrubberLayout"
            "NSSearchField"
            "NSSearchFieldCell"
            "NSSearchToolbarItem"
            "NSSecureTextField"
            "NSSegmentedCell"
            "NSSegmentedControl"
            "NSShadow"
            "NSSharingService"
            "NSSharingServicePickerToolbarItem"
            "NSSharingServicePickerTouchBarItem"
            "NSSlider"
            "NSSliderAccessory"
            "NSSliderCell"
            "NSSliderTouchBarItem"
            "NSSound"
            "NSSpeechRecognizer"
            "NSSpeechSynthesizer"
            "NSSpellChecker"
            "NSSpellProtocol"
            "NSSplitView"
            "NSSplitViewController"
            "NSSplitViewItem"
            "NSStackView"
            "NSStatusBar"
            "NSStatusBarButton"
            "NSStatusItem"
            "NSStepper"
            "NSStepperCell"
            "NSStepperTouchBarItem"
            "NSStoryboard"
            "NSStoryboardSegue"
            "NSStringDrawing"
            "NSSwitch"
            "NSTabView"
            "NSTabViewController"
            "NSTabViewItem"
            "NSTableCellView"
            "NSTableColumn"
            "NSTableHeaderCell"
            "NSTableHeaderView"
            "NSTableRowView"
            "NSTableView"
            "NSTableViewDiffableDataSource"
            "NSTableViewRowAction"
            "NSText"
            "NSTextAlternatives"
            "NSTextAttachment"
            "NSTextAttachmentCell"
            "NSTextCheckingClient"
            "NSTextCheckingController"
            "NSTextContainer"
            "NSTextContent"
            "NSTextContentManager"
            "NSTextElement"
            "NSTextField"
            "NSTextFieldCell"
            "NSTextFinder"
            "NSTextInputClient"
            "NSTextInputContext"
            "NSTextInsertionIndicator"
            "NSTextLayoutFragment"
            "NSTextLayoutManager"
            "NSTextLineFragment"
            "NSTextList"
            "NSTextListElement"
            "NSTextRange"
            "NSTextSelection"
            "NSTextSelectionNavigation"
            "NSTextStorage"
            "NSTextStorageScripting"
            "NSTextTable"
            "NSTextView"
            "NSTextViewportLayoutController"
            "NSTintConfiguration"
            "NSTitlebarAccessoryViewController"
            "NSTokenField"
            "NSTokenFieldCell"
            "NSToolbar"
            "NSToolbarItem"
            "NSToolbarItemGroup"
            "NSTouch"
            "NSTouchBar"
            "NSTouchBarItem"
            "NSTrackingArea"
            "NSTrackingSeparatorToolbarItem"
            "NSTreeController"
            "NSTreeNode"
            "NSTypesetter"
            "NSUserActivity"
            "NSUserDefaultsController"
            "NSUserInterfaceCompression"
            "NSUserInterfaceItemIdentification"
            "NSUserInterfaceItemSearching"
            "NSUserInterfaceLayout"
            "NSUserInterfaceValidation"
            "NSView"
            "NSViewController"
            "NSVisualEffectView"
            "NSWindow"
            "NSWindowController"
            "NSWindowRestoration"
            "NSWindowScripting"
            "NSWindowTab"
            "NSWindowTabGroup"
            "NSWorkspace"
            "bitflags"
            "block2"
            "libc"
            "objc2-core-data"
            "objc2-core-image"
            "objc2-quartz-core"
          ];
          "alloc" = [
            "block2?/alloc"
            "objc2/alloc"
            "objc2-core-data?/alloc"
            "objc2-core-image?/alloc"
            "objc2-foundation/alloc"
            "objc2-quartz-core?/alloc"
          ];
          "bitflags" = [
            "dep:bitflags"
            "objc2-core-data?/bitflags"
            "objc2-foundation/bitflags"
            "objc2-quartz-core?/bitflags"
          ];
          "block2" = [
            "dep:block2"
            "objc2-core-data?/block2"
            "objc2-core-image?/block2"
            "objc2-foundation/block2"
            "objc2-quartz-core?/block2"
          ];
          "default" = [ "std" ];
          "gnustep-1-7" = [
            "objc2/gnustep-1-7"
            "block2?/gnustep-1-7"
            "objc2-foundation/gnustep-1-7"
            "objc2-core-data?/gnustep-1-7"
            "objc2-quartz-core?/gnustep-1-7"
          ];
          "gnustep-1-8" = [
            "gnustep-1-7"
            "objc2/gnustep-1-8"
            "block2?/gnustep-1-8"
            "objc2-foundation/gnustep-1-8"
            "objc2-core-data?/gnustep-1-8"
            "objc2-quartz-core?/gnustep-1-8"
          ];
          "gnustep-1-9" = [
            "gnustep-1-8"
            "objc2/gnustep-1-9"
            "block2?/gnustep-1-9"
            "objc2-foundation/gnustep-1-9"
            "objc2-core-data?/gnustep-1-9"
            "objc2-quartz-core?/gnustep-1-9"
          ];
          "gnustep-2-0" = [
            "gnustep-1-9"
            "objc2/gnustep-2-0"
            "block2?/gnustep-2-0"
            "objc2-foundation/gnustep-2-0"
            "objc2-core-data?/gnustep-2-0"
            "objc2-quartz-core?/gnustep-2-0"
          ];
          "gnustep-2-1" = [
            "gnustep-2-0"
            "objc2/gnustep-2-1"
            "block2?/gnustep-2-1"
            "objc2-foundation/gnustep-2-1"
            "objc2-core-data?/gnustep-2-1"
            "objc2-quartz-core?/gnustep-2-1"
          ];
          "libc" = [
            "dep:libc"
            "objc2-foundation/libc"
          ];
          "objc2-core-data" = [ "dep:objc2-core-data" ];
          "objc2-core-image" = [ "dep:objc2-core-image" ];
          "objc2-quartz-core" = [ "dep:objc2-quartz-core" ];
          "std" = [
            "alloc"
            "bitflags?/std"
            "block2?/std"
            "libc?/std"
            "objc2/std"
            "objc2-core-data?/std"
            "objc2-core-image?/std"
            "objc2-foundation/std"
            "objc2-quartz-core?/std"
          ];
        };
        resolvedDefaultFeatures = [
          "NSAlert"
          "NSApplication"
          "NSButton"
          "NSControl"
          "NSImage"
          "NSMenu"
          "NSMenuItem"
          "NSOpenPanel"
          "NSPanel"
          "NSPasteboard"
          "NSPasteboardItem"
          "NSResponder"
          "NSRunningApplication"
          "NSSavePanel"
          "NSView"
          "NSWindow"
          "alloc"
          "bitflags"
          "block2"
          "default"
          "std"
        ];
      };
      "objc2-core-data" = rec {
        crateName = "objc2-core-data";
        version = "0.2.2";
        edition = "2021";
        sha256 = "1vvk8zjylfjjj04dzawydmqqz5ajvdkhf22cnb07ihbiw14vyzv1";
        libName = "objc2_core_data";
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "block2";
            packageId = "block2 0.5.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "objc2";
            packageId = "objc2 0.5.2";
            usesDefaultFeatures = false;
          }
          {
            name = "objc2-foundation";
            packageId = "objc2-foundation";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "CoreDataErrors" = [ "objc2-foundation/NSString" ];
          "NSAtomicStore" = [
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSError"
            "objc2-foundation/NSSet"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSAtomicStoreCacheNode" = [
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSString"
          ];
          "NSAttributeDescription" = [
            "objc2-foundation/NSData"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSBatchDeleteRequest" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSObject"
          ];
          "NSBatchInsertRequest" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSBatchUpdateRequest" = [
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSPredicate"
            "objc2-foundation/NSString"
          ];
          "NSCompositeAttributeDescription" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSObject"
          ];
          "NSCoreDataCoreSpotlightDelegate" = [
            "objc2-foundation/NSError"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSString"
          ];
          "NSCustomMigrationStage" = [ "objc2-foundation/NSError" ];
          "NSDerivedAttributeDescription" = [
            "objc2-foundation/NSExpression"
            "objc2-foundation/NSObject"
          ];
          "NSEntityDescription" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSData"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSEnumerator"
            "objc2-foundation/NSExpression"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSEntityMapping" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSData"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSExpression"
            "objc2-foundation/NSString"
          ];
          "NSEntityMigrationPolicy" = [
            "objc2-foundation/NSError"
            "objc2-foundation/NSString"
          ];
          "NSExpressionDescription" = [
            "objc2-foundation/NSExpression"
            "objc2-foundation/NSObject"
          ];
          "NSFetchIndexDescription" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSPredicate"
            "objc2-foundation/NSString"
          ];
          "NSFetchIndexElementDescription" = [
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSFetchRequest" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSError"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSPredicate"
            "objc2-foundation/NSSortDescriptor"
            "objc2-foundation/NSString"
            "objc2-foundation/NSValue"
          ];
          "NSFetchRequestExpression" = [
            "objc2-foundation/NSCoder"
            "objc2-foundation/NSExpression"
            "objc2-foundation/NSObject"
          ];
          "NSFetchedPropertyDescription" = [ "objc2-foundation/NSObject" ];
          "NSFetchedResultsController" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSError"
            "objc2-foundation/NSIndexPath"
            "objc2-foundation/NSOrderedCollectionDifference"
            "objc2-foundation/NSString"
          ];
          "NSIncrementalStore" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSError"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSIncrementalStoreNode" = [
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSString"
          ];
          "NSLightweightMigrationStage" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSString"
          ];
          "NSManagedObject" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSError"
            "objc2-foundation/NSKeyValueObserving"
            "objc2-foundation/NSSet"
            "objc2-foundation/NSString"
          ];
          "NSManagedObjectContext" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDate"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSError"
            "objc2-foundation/NSLock"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSSet"
            "objc2-foundation/NSString"
            "objc2-foundation/NSUndoManager"
          ];
          "NSManagedObjectID" = [
            "objc2-foundation/NSObject"
            "objc2-foundation/NSURL"
          ];
          "NSManagedObjectModel" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSBundle"
            "objc2-foundation/NSData"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSEnumerator"
            "objc2-foundation/NSError"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSSet"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSManagedObjectModelReference" = [
            "objc2-foundation/NSBundle"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSMappingModel" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSBundle"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSError"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSMergePolicy" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSError"
            "objc2-foundation/NSString"
          ];
          "NSMigrationManager" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSError"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSMigrationStage" = [ "objc2-foundation/NSString" ];
          "NSPersistentCloudKitContainer" = [
            "bitflags"
            "objc2-foundation/NSError"
            "objc2-foundation/NSString"
          ];
          "NSPersistentCloudKitContainerEvent" = [
            "objc2-foundation/NSDate"
            "objc2-foundation/NSError"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSUUID"
          ];
          "NSPersistentCloudKitContainerEventRequest" = [
            "objc2-foundation/NSDate"
            "objc2-foundation/NSObject"
          ];
          "NSPersistentCloudKitContainerOptions" = [ "objc2-foundation/NSString" ];
          "NSPersistentContainer" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSError"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSPersistentHistoryChange" = [
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSSet"
          ];
          "NSPersistentHistoryChangeRequest" = [
            "objc2-foundation/NSDate"
            "objc2-foundation/NSObject"
          ];
          "NSPersistentHistoryToken" = [ "objc2-foundation/NSObject" ];
          "NSPersistentHistoryTransaction" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDate"
            "objc2-foundation/NSNotification"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "NSPersistentStore" = [
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSError"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSPersistentStoreCoordinator" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSError"
            "objc2-foundation/NSLock"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
            "objc2-foundation/NSValue"
          ];
          "NSPersistentStoreDescription" = [
            "objc2-foundation/NSDate"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "NSPersistentStoreRequest" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSObject"
          ];
          "NSPersistentStoreResult" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSError"
            "objc2-foundation/NSProgress"
          ];
          "NSPropertyDescription" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSData"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSPredicate"
            "objc2-foundation/NSString"
          ];
          "NSPropertyMapping" = [
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSExpression"
            "objc2-foundation/NSString"
          ];
          "NSQueryGenerationToken" = [ "objc2-foundation/NSObject" ];
          "NSRelationshipDescription" = [
            "objc2-foundation/NSData"
            "objc2-foundation/NSObject"
          ];
          "NSSaveChangesRequest" = [
            "objc2-foundation/NSObject"
            "objc2-foundation/NSSet"
          ];
          "NSStagedMigrationManager" = [ "objc2-foundation/NSArray" ];
          "all" = [
            "CoreDataDefines"
            "CoreDataErrors"
            "NSAtomicStore"
            "NSAtomicStoreCacheNode"
            "NSAttributeDescription"
            "NSBatchDeleteRequest"
            "NSBatchInsertRequest"
            "NSBatchUpdateRequest"
            "NSCompositeAttributeDescription"
            "NSCoreDataCoreSpotlightDelegate"
            "NSCustomMigrationStage"
            "NSDerivedAttributeDescription"
            "NSEntityDescription"
            "NSEntityMapping"
            "NSEntityMigrationPolicy"
            "NSExpressionDescription"
            "NSFetchIndexDescription"
            "NSFetchIndexElementDescription"
            "NSFetchRequest"
            "NSFetchRequestExpression"
            "NSFetchedPropertyDescription"
            "NSFetchedResultsController"
            "NSIncrementalStore"
            "NSIncrementalStoreNode"
            "NSLightweightMigrationStage"
            "NSManagedObject"
            "NSManagedObjectContext"
            "NSManagedObjectID"
            "NSManagedObjectModel"
            "NSManagedObjectModelReference"
            "NSMappingModel"
            "NSMergePolicy"
            "NSMigrationManager"
            "NSMigrationStage"
            "NSPersistentCloudKitContainer"
            "NSPersistentCloudKitContainerEvent"
            "NSPersistentCloudKitContainerEventRequest"
            "NSPersistentCloudKitContainerOptions"
            "NSPersistentContainer"
            "NSPersistentHistoryChange"
            "NSPersistentHistoryChangeRequest"
            "NSPersistentHistoryToken"
            "NSPersistentHistoryTransaction"
            "NSPersistentStore"
            "NSPersistentStoreCoordinator"
            "NSPersistentStoreDescription"
            "NSPersistentStoreRequest"
            "NSPersistentStoreResult"
            "NSPropertyDescription"
            "NSPropertyMapping"
            "NSQueryGenerationToken"
            "NSRelationshipDescription"
            "NSSaveChangesRequest"
            "NSStagedMigrationManager"
            "bitflags"
            "block2"
          ];
          "alloc" = [
            "block2?/alloc"
            "objc2/alloc"
            "objc2-foundation/alloc"
          ];
          "bitflags" = [
            "dep:bitflags"
            "objc2-foundation/bitflags"
          ];
          "block2" = [
            "dep:block2"
            "objc2-foundation/block2"
          ];
          "default" = [ "std" ];
          "std" = [
            "alloc"
            "bitflags?/std"
            "block2?/std"
            "objc2/std"
            "objc2-foundation/std"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "bitflags"
          "block2"
          "std"
        ];
      };
      "objc2-core-image" = rec {
        crateName = "objc2-core-image";
        version = "0.2.2";
        edition = "2021";
        sha256 = "102csfb82zi2sbzliwsfd589ckz0gysf7y6434c9zj97lmihj9jm";
        libName = "objc2_core_image";
        dependencies = [
          {
            name = "block2";
            packageId = "block2 0.5.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "objc2";
            packageId = "objc2 0.5.2";
            usesDefaultFeatures = false;
          }
          {
            name = "objc2-foundation";
            packageId = "objc2-foundation";
            usesDefaultFeatures = false;
          }
          {
            name = "objc2-metal";
            packageId = "objc2-metal";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "CIBarcodeDescriptor" = [
            "objc2-foundation/NSData"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSUserActivity"
          ];
          "CIColor" = [
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "CIContext" = [
            "objc2-foundation/NSData"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSError"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
            "objc2-metal?/MTLCommandQueue"
            "objc2-metal?/MTLDevice"
          ];
          "CIDetector" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSString"
          ];
          "CIFeature" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "CIFilter" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSData"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "CIFilterConstructor" = [ "objc2-foundation/NSString" ];
          "CIFilterGenerator" = [
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "CIFilterShape" = [
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "CIImage" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSData"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
            "objc2-metal?/MTLResource"
            "objc2-metal?/MTLTexture"
          ];
          "CIImageAccumulator" = [ "objc2-foundation/NSGeometry" ];
          "CIImageProcessor" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSError"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSString"
            "objc2-metal?/MTLCommandBuffer"
            "objc2-metal?/MTLResource"
            "objc2-metal?/MTLTexture"
          ];
          "CIImageProvider" = [ "objc2-foundation/NSString" ];
          "CIKernel" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSData"
            "objc2-foundation/NSError"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSString"
          ];
          "CIPlugIn" = [ "objc2-foundation/NSURL" ];
          "CIRAWFilter" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSData"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "CIRAWFilter_Deprecated" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSData"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "CIRenderDestination" = [
            "objc2-foundation/NSDate"
            "objc2-foundation/NSError"
            "objc2-foundation/NSGeometry"
            "objc2-metal?/MTLCommandBuffer"
            "objc2-metal?/MTLPixelFormat"
            "objc2-metal?/MTLResource"
            "objc2-metal?/MTLTexture"
          ];
          "CISampler" = [
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "CIVector" = [
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "all" = [
            "CIBarcodeDescriptor"
            "CIColor"
            "CIContext"
            "CIDetector"
            "CIFeature"
            "CIFilter"
            "CIFilterConstructor"
            "CIFilterGenerator"
            "CIFilterShape"
            "CIImage"
            "CIImageAccumulator"
            "CIImageProcessor"
            "CIImageProvider"
            "CIKernel"
            "CIKernelMetalLib"
            "CIPlugIn"
            "CIPlugInInterface"
            "CIRAWFilter"
            "CIRAWFilter_Deprecated"
            "CIRenderDestination"
            "CISampler"
            "CIVector"
            "CoreImageDefines"
            "block2"
            "objc2-metal"
          ];
          "alloc" = [
            "block2?/alloc"
            "objc2/alloc"
            "objc2-foundation/alloc"
            "objc2-metal?/alloc"
          ];
          "block2" = [
            "dep:block2"
            "objc2-foundation/block2"
            "objc2-metal?/block2"
          ];
          "default" = [ "std" ];
          "gnustep-1-7" = [
            "objc2/gnustep-1-7"
            "block2?/gnustep-1-7"
            "objc2-foundation/gnustep-1-7"
          ];
          "gnustep-1-8" = [
            "gnustep-1-7"
            "objc2/gnustep-1-8"
            "block2?/gnustep-1-8"
            "objc2-foundation/gnustep-1-8"
          ];
          "gnustep-1-9" = [
            "gnustep-1-8"
            "objc2/gnustep-1-9"
            "block2?/gnustep-1-9"
            "objc2-foundation/gnustep-1-9"
          ];
          "gnustep-2-0" = [
            "gnustep-1-9"
            "objc2/gnustep-2-0"
            "block2?/gnustep-2-0"
            "objc2-foundation/gnustep-2-0"
          ];
          "gnustep-2-1" = [
            "gnustep-2-0"
            "objc2/gnustep-2-1"
            "block2?/gnustep-2-1"
            "objc2-foundation/gnustep-2-1"
          ];
          "objc2-metal" = [ "dep:objc2-metal" ];
          "std" = [
            "alloc"
            "block2?/std"
            "objc2/std"
            "objc2-foundation/std"
            "objc2-metal?/std"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "block2"
          "std"
        ];
      };
      "objc2-encode 2.0.0-pre.2" = rec {
        crateName = "objc2-encode";
        version = "2.0.0-pre.2";
        edition = "2021";
        sha256 = "04h5wns3hxmc9g652hr9xqzrijs4ij9sdnlgc0ha202v050srz5b";
        libName = "objc2_encode";
        authors = [
          "Steven Sheldon"
          "Mads Marquart <mads@marquart.dk>"
        ];
        dependencies = [
          {
            name = "objc-sys";
            packageId = "objc-sys 0.2.0-beta.2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "alloc" = [ "objc-sys/alloc" ];
          "apple" = [ "objc-sys/apple" ];
          "default" = [
            "std"
            "apple"
          ];
          "gnustep-1-7" = [ "objc-sys/gnustep-1-7" ];
          "gnustep-1-8" = [
            "gnustep-1-7"
            "objc-sys/gnustep-1-8"
          ];
          "gnustep-1-9" = [
            "gnustep-1-8"
            "objc-sys/gnustep-1-9"
          ];
          "gnustep-2-0" = [
            "gnustep-1-9"
            "objc-sys/gnustep-2-0"
          ];
          "gnustep-2-1" = [
            "gnustep-2-0"
            "objc-sys/gnustep-2-1"
          ];
          "std" = [
            "alloc"
            "objc-sys/std"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "apple"
          "std"
        ];
      };
      "objc2-encode 3.0.0" = rec {
        crateName = "objc2-encode";
        version = "3.0.0";
        edition = "2021";
        sha256 = "0rknhkcnyj4qv1pzqp5j8l80726phz8fcxpsbpz9nhmg6xdq8yfh";
        libName = "objc2_encode";
        authors = [
          "Steven Sheldon"
          "Mads Marquart <mads@marquart.dk>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "std"
        ];
      };
      "objc2-encode 4.0.3" = rec {
        crateName = "objc2-encode";
        version = "4.0.3";
        edition = "2021";
        sha256 = "1y7hjg4k828zhn4fjnbidrz3vzw4llk9ldy92drj47ydjc9yg4bq";
        libName = "objc2_encode";
        authors = [
          "Steven Sheldon"
          "Mads Marquart <mads@marquart.dk>"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "std"
        ];
      };
      "objc2-foundation" = rec {
        crateName = "objc2-foundation";
        version = "0.2.2";
        edition = "2021";
        sha256 = "1a6mi77jsig7950vmx9ydvsxaighzdiglk5d229k569pvajkirhf";
        libName = "objc2_foundation";
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "block2";
            packageId = "block2 0.5.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "dispatch";
            packageId = "dispatch";
            optional = true;
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "objc2";
            packageId = "objc2 0.5.2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "NSAppleEventDescriptor" = [ "bitflags" ];
          "NSArray" = [ "bitflags" ];
          "NSAttributedString" = [ "bitflags" ];
          "NSByteCountFormatter" = [ "bitflags" ];
          "NSCalendar" = [ "bitflags" ];
          "NSComparisonPredicate" = [ "bitflags" ];
          "NSData" = [ "bitflags" ];
          "NSDateComponentsFormatter" = [ "bitflags" ];
          "NSDistributedNotificationCenter" = [ "bitflags" ];
          "NSFileCoordinator" = [ "bitflags" ];
          "NSFileManager" = [ "bitflags" ];
          "NSFileVersion" = [ "bitflags" ];
          "NSFileWrapper" = [ "bitflags" ];
          "NSGeometry" = [ "bitflags" ];
          "NSISO8601DateFormatter" = [ "bitflags" ];
          "NSItemProvider" = [ "bitflags" ];
          "NSJSONSerialization" = [ "bitflags" ];
          "NSKeyValueObserving" = [ "bitflags" ];
          "NSLinguisticTagger" = [ "bitflags" ];
          "NSMeasurementFormatter" = [ "bitflags" ];
          "NSNetServices" = [ "bitflags" ];
          "NSNotificationQueue" = [ "bitflags" ];
          "NSObjCRuntime" = [ "bitflags" ];
          "NSOrderedCollectionDifference" = [ "bitflags" ];
          "NSPathUtilities" = [ "bitflags" ];
          "NSPersonNameComponentsFormatter" = [ "bitflags" ];
          "NSPointerFunctions" = [ "bitflags" ];
          "NSPort" = [ "bitflags" ];
          "NSProcessInfo" = [ "bitflags" ];
          "NSPropertyList" = [ "bitflags" ];
          "NSRegularExpression" = [ "bitflags" ];
          "NSStream" = [ "bitflags" ];
          "NSString" = [ "bitflags" ];
          "NSTextCheckingResult" = [ "bitflags" ];
          "NSURL" = [ "bitflags" ];
          "NSXMLNodeOptions" = [ "bitflags" ];
          "NSXPCConnection" = [ "bitflags" ];
          "all" = [
            "FoundationErrors"
            "FoundationLegacySwiftCompatibility"
            "NSAffineTransform"
            "NSAppleEventDescriptor"
            "NSAppleEventManager"
            "NSAppleScript"
            "NSArchiver"
            "NSArray"
            "NSAttributedString"
            "NSAutoreleasePool"
            "NSBackgroundActivityScheduler"
            "NSBundle"
            "NSByteCountFormatter"
            "NSByteOrder"
            "NSCache"
            "NSCalendar"
            "NSCalendarDate"
            "NSCharacterSet"
            "NSClassDescription"
            "NSCoder"
            "NSComparisonPredicate"
            "NSCompoundPredicate"
            "NSConnection"
            "NSData"
            "NSDate"
            "NSDateComponentsFormatter"
            "NSDateFormatter"
            "NSDateInterval"
            "NSDateIntervalFormatter"
            "NSDecimal"
            "NSDecimalNumber"
            "NSDictionary"
            "NSDistantObject"
            "NSDistributedLock"
            "NSDistributedNotificationCenter"
            "NSEnergyFormatter"
            "NSEnumerator"
            "NSError"
            "NSException"
            "NSExpression"
            "NSExtensionContext"
            "NSExtensionItem"
            "NSExtensionRequestHandling"
            "NSFileCoordinator"
            "NSFileHandle"
            "NSFileManager"
            "NSFilePresenter"
            "NSFileVersion"
            "NSFileWrapper"
            "NSFormatter"
            "NSGarbageCollector"
            "NSGeometry"
            "NSHFSFileTypes"
            "NSHTTPCookie"
            "NSHTTPCookieStorage"
            "NSHashTable"
            "NSHost"
            "NSISO8601DateFormatter"
            "NSIndexPath"
            "NSIndexSet"
            "NSInflectionRule"
            "NSInvocation"
            "NSItemProvider"
            "NSJSONSerialization"
            "NSKeyValueCoding"
            "NSKeyValueObserving"
            "NSKeyedArchiver"
            "NSLengthFormatter"
            "NSLinguisticTagger"
            "NSListFormatter"
            "NSLocale"
            "NSLock"
            "NSMapTable"
            "NSMassFormatter"
            "NSMeasurement"
            "NSMeasurementFormatter"
            "NSMetadata"
            "NSMetadataAttributes"
            "NSMethodSignature"
            "NSMorphology"
            "NSNetServices"
            "NSNotification"
            "NSNotificationQueue"
            "NSNull"
            "NSNumberFormatter"
            "NSObjCRuntime"
            "NSObject"
            "NSObjectScripting"
            "NSOperation"
            "NSOrderedCollectionChange"
            "NSOrderedCollectionDifference"
            "NSOrderedSet"
            "NSOrthography"
            "NSPathUtilities"
            "NSPersonNameComponents"
            "NSPersonNameComponentsFormatter"
            "NSPointerArray"
            "NSPointerFunctions"
            "NSPort"
            "NSPortCoder"
            "NSPortMessage"
            "NSPortNameServer"
            "NSPredicate"
            "NSProcessInfo"
            "NSProgress"
            "NSPropertyList"
            "NSProtocolChecker"
            "NSProxy"
            "NSRange"
            "NSRegularExpression"
            "NSRelativeDateTimeFormatter"
            "NSRunLoop"
            "NSScanner"
            "NSScriptClassDescription"
            "NSScriptCoercionHandler"
            "NSScriptCommand"
            "NSScriptCommandDescription"
            "NSScriptExecutionContext"
            "NSScriptKeyValueCoding"
            "NSScriptObjectSpecifiers"
            "NSScriptStandardSuiteCommands"
            "NSScriptSuiteRegistry"
            "NSScriptWhoseTests"
            "NSSet"
            "NSSortDescriptor"
            "NSSpellServer"
            "NSStream"
            "NSString"
            "NSTask"
            "NSTermOfAddress"
            "NSTextCheckingResult"
            "NSThread"
            "NSTimeZone"
            "NSTimer"
            "NSURL"
            "NSURLAuthenticationChallenge"
            "NSURLCache"
            "NSURLConnection"
            "NSURLCredential"
            "NSURLCredentialStorage"
            "NSURLDownload"
            "NSURLError"
            "NSURLHandle"
            "NSURLProtectionSpace"
            "NSURLProtocol"
            "NSURLRequest"
            "NSURLResponse"
            "NSURLSession"
            "NSUUID"
            "NSUbiquitousKeyValueStore"
            "NSUndoManager"
            "NSUnit"
            "NSUserActivity"
            "NSUserDefaults"
            "NSUserNotification"
            "NSUserScriptTask"
            "NSValue"
            "NSValueTransformer"
            "NSXMLDTD"
            "NSXMLDTDNode"
            "NSXMLDocument"
            "NSXMLElement"
            "NSXMLNode"
            "NSXMLNodeOptions"
            "NSXMLParser"
            "NSXPCConnection"
            "NSZone"
            "bitflags"
            "block2"
            "libc"
          ];
          "alloc" = [
            "block2?/alloc"
            "objc2/alloc"
          ];
          "bitflags" = [ "dep:bitflags" ];
          "block2" = [ "dep:block2" ];
          "default" = [ "std" ];
          "dispatch" = [ "dep:dispatch" ];
          "gnustep-1-7" = [
            "objc2/gnustep-1-7"
            "block2?/gnustep-1-7"
          ];
          "gnustep-1-8" = [
            "gnustep-1-7"
            "objc2/gnustep-1-8"
            "block2?/gnustep-1-8"
          ];
          "gnustep-1-9" = [
            "gnustep-1-8"
            "objc2/gnustep-1-9"
            "block2?/gnustep-1-9"
          ];
          "gnustep-2-0" = [
            "gnustep-1-9"
            "objc2/gnustep-2-0"
            "block2?/gnustep-2-0"
          ];
          "gnustep-2-1" = [
            "gnustep-2-0"
            "objc2/gnustep-2-1"
            "block2?/gnustep-2-1"
          ];
          "libc" = [ "dep:libc" ];
          "std" = [
            "alloc"
            "bitflags?/std"
            "block2?/std"
            "libc?/std"
            "objc2/std"
          ];
        };
        resolvedDefaultFeatures = [
          "NSArray"
          "NSAttributedString"
          "NSBundle"
          "NSCoder"
          "NSData"
          "NSDate"
          "NSDictionary"
          "NSEnumerator"
          "NSError"
          "NSException"
          "NSFileWrapper"
          "NSFormatter"
          "NSGeometry"
          "NSItemProvider"
          "NSLocale"
          "NSNotification"
          "NSNull"
          "NSObjCRuntime"
          "NSObject"
          "NSRange"
          "NSString"
          "NSThread"
          "NSURL"
          "NSUndoManager"
          "NSUserActivity"
          "NSValue"
          "NSZone"
          "alloc"
          "bitflags"
          "block2"
          "default"
          "dispatch"
          "std"
        ];
      };
      "objc2-metal" = rec {
        crateName = "objc2-metal";
        version = "0.2.2";
        edition = "2021";
        sha256 = "1mmdga66qpxrcfq3gxxhysfx3zg1hpx4z886liv3j0pnfq9bl36x";
        libName = "objc2_metal";
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "block2";
            packageId = "block2 0.5.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "objc2";
            packageId = "objc2 0.5.2";
            usesDefaultFeatures = false;
          }
          {
            name = "objc2-foundation";
            packageId = "objc2-foundation";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "MTLAccelerationStructure" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "MTLAccelerationStructureCommandEncoder" = [
            "bitflags"
            "objc2-foundation/NSObject"
          ];
          "MTLArgument" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSString"
          ];
          "MTLArgumentEncoder" = [
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
          ];
          "MTLBinaryArchive" = [
            "objc2-foundation/NSError"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "MTLBlitCommandEncoder" = [
            "bitflags"
            "objc2-foundation/NSRange"
          ];
          "MTLBlitPass" = [ "objc2-foundation/NSObject" ];
          "MTLBuffer" = [
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
          ];
          "MTLCaptureManager" = [
            "objc2-foundation/NSError"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "MTLCaptureScope" = [ "objc2-foundation/NSString" ];
          "MTLCommandBuffer" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSEnumerator"
            "objc2-foundation/NSError"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "MTLCommandEncoder" = [
            "bitflags"
            "objc2-foundation/NSString"
          ];
          "MTLCommandQueue" = [ "objc2-foundation/NSString" ];
          "MTLComputeCommandEncoder" = [ "objc2-foundation/NSRange" ];
          "MTLComputePass" = [ "objc2-foundation/NSObject" ];
          "MTLComputePipeline" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSError"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "MTLCounters" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSData"
            "objc2-foundation/NSError"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
          ];
          "MTLDepthStencil" = [
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "MTLDevice" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSBundle"
            "objc2-foundation/NSError"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "MTLDynamicLibrary" = [
            "objc2-foundation/NSError"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "MTLEvent" = [
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "MTLFence" = [ "objc2-foundation/NSString" ];
          "MTLFunctionConstantValues" = [
            "objc2-foundation/NSObject"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
          ];
          "MTLFunctionDescriptor" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "MTLFunctionHandle" = [ "objc2-foundation/NSString" ];
          "MTLFunctionLog" = [
            "objc2-foundation/NSEnumerator"
            "objc2-foundation/NSString"
            "objc2-foundation/NSURL"
          ];
          "MTLFunctionStitching" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "MTLHeap" = [
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "MTLIOCommandBuffer" = [
            "objc2-foundation/NSError"
            "objc2-foundation/NSString"
          ];
          "MTLIOCommandQueue" = [
            "objc2-foundation/NSError"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "MTLIndirectCommandBuffer" = [
            "bitflags"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSRange"
          ];
          "MTLIntersectionFunctionTable" = [
            "bitflags"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSRange"
          ];
          "MTLLibrary" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSError"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "MTLLinkedFunctions" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "MTLPipeline" = [ "objc2-foundation/NSObject" ];
          "MTLRasterizationRate" = [
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSValue"
          ];
          "MTLRenderCommandEncoder" = [
            "bitflags"
            "objc2-foundation/NSRange"
          ];
          "MTLRenderPass" = [
            "bitflags"
            "objc2-foundation/NSObject"
          ];
          "MTLRenderPipeline" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSError"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "MTLResource" = [
            "bitflags"
            "objc2-foundation/NSString"
          ];
          "MTLResourceStatePass" = [ "objc2-foundation/NSObject" ];
          "MTLSampler" = [
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "MTLStageInputOutputDescriptor" = [ "objc2-foundation/NSObject" ];
          "MTLTexture" = [
            "bitflags"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSRange"
            "objc2-foundation/NSString"
          ];
          "MTLVertexDescriptor" = [ "objc2-foundation/NSObject" ];
          "MTLVisibleFunctionTable" = [
            "objc2-foundation/NSObject"
            "objc2-foundation/NSRange"
          ];
          "all" = [
            "MTLAccelerationStructure"
            "MTLAccelerationStructureCommandEncoder"
            "MTLAccelerationStructureTypes"
            "MTLArgument"
            "MTLArgumentEncoder"
            "MTLBinaryArchive"
            "MTLBlitCommandEncoder"
            "MTLBlitPass"
            "MTLBuffer"
            "MTLCaptureManager"
            "MTLCaptureScope"
            "MTLCommandBuffer"
            "MTLCommandEncoder"
            "MTLCommandQueue"
            "MTLComputeCommandEncoder"
            "MTLComputePass"
            "MTLComputePipeline"
            "MTLCounters"
            "MTLDefines"
            "MTLDepthStencil"
            "MTLDevice"
            "MTLDrawable"
            "MTLDynamicLibrary"
            "MTLEvent"
            "MTLFence"
            "MTLFunctionConstantValues"
            "MTLFunctionDescriptor"
            "MTLFunctionHandle"
            "MTLFunctionLog"
            "MTLFunctionStitching"
            "MTLHeap"
            "MTLIOCommandBuffer"
            "MTLIOCommandQueue"
            "MTLIOCompressor"
            "MTLIndirectCommandBuffer"
            "MTLIndirectCommandEncoder"
            "MTLIntersectionFunctionTable"
            "MTLLibrary"
            "MTLLinkedFunctions"
            "MTLParallelRenderCommandEncoder"
            "MTLPipeline"
            "MTLPixelFormat"
            "MTLRasterizationRate"
            "MTLRenderCommandEncoder"
            "MTLRenderPass"
            "MTLRenderPipeline"
            "MTLResource"
            "MTLResourceStateCommandEncoder"
            "MTLResourceStatePass"
            "MTLSampler"
            "MTLStageInputOutputDescriptor"
            "MTLTexture"
            "MTLTypes"
            "MTLVertexDescriptor"
            "MTLVisibleFunctionTable"
            "bitflags"
            "block2"
          ];
          "alloc" = [
            "block2?/alloc"
            "objc2/alloc"
            "objc2-foundation/alloc"
          ];
          "bitflags" = [
            "dep:bitflags"
            "objc2-foundation/bitflags"
          ];
          "block2" = [
            "dep:block2"
            "objc2-foundation/block2"
          ];
          "default" = [ "std" ];
          "std" = [
            "alloc"
            "bitflags?/std"
            "block2?/std"
            "objc2/std"
            "objc2-foundation/std"
          ];
          "unstable-private" = [
            "objc2-foundation/NSString"
            "objc2-foundation/NSError"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "bitflags"
          "block2"
          "std"
        ];
      };
      "objc2-quartz-core" = rec {
        crateName = "objc2-quartz-core";
        version = "0.2.2";
        edition = "2021";
        sha256 = "0ynw8819c36l11rim8n0yzk0fskbzrgaqayscyqi8swhzxxywaz4";
        libName = "objc2_quartz_core";
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "block2";
            packageId = "block2 0.5.1";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "objc2";
            packageId = "objc2 0.5.2";
            usesDefaultFeatures = false;
          }
          {
            name = "objc2-foundation";
            packageId = "objc2-foundation";
            usesDefaultFeatures = false;
          }
          {
            name = "objc2-metal";
            packageId = "objc2-metal";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "CAAnimation" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSValue"
          ];
          "CAConstraintLayoutManager" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "CADisplayLink" = [
            "objc2-foundation/NSObjCRuntime"
            "objc2-foundation/NSRunLoop"
            "objc2-foundation/NSString"
          ];
          "CAEDRMetadata" = [
            "objc2-foundation/NSData"
            "objc2-foundation/NSObject"
          ];
          "CAEmitterCell" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "CAEmitterLayer" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "CAGradientLayer" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSValue"
          ];
          "CALayer" = [
            "bitflags"
            "objc2-foundation/NSArray"
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSNull"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "CAMediaTiming" = [ "objc2-foundation/NSString" ];
          "CAMediaTimingFunction" = [
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "CAMetalDisplayLink" = [
            "objc2-foundation/NSObjCRuntime"
            "objc2-foundation/NSRunLoop"
            "objc2-foundation/NSString"
            "objc2-metal?/MTLDrawable"
          ];
          "CAMetalLayer" = [
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-metal?/MTLDevice"
            "objc2-metal?/MTLDrawable"
            "objc2-metal?/MTLPixelFormat"
            "objc2-metal?/MTLResource"
            "objc2-metal?/MTLTexture"
          ];
          "CARenderer" = [
            "objc2-foundation/NSDictionary"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSString"
          ];
          "CAReplicatorLayer" = [
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "CAScrollLayer" = [
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "CAShapeLayer" = [
            "objc2-foundation/NSArray"
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
            "objc2-foundation/NSValue"
          ];
          "CATextLayer" = [
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "CATiledLayer" = [
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSObject"
          ];
          "CATransaction" = [ "objc2-foundation/NSString" ];
          "CATransform3D" = [
            "objc2-foundation/NSGeometry"
            "objc2-foundation/NSValue"
          ];
          "CATransformLayer" = [ "objc2-foundation/NSObject" ];
          "CAValueFunction" = [
            "objc2-foundation/NSObject"
            "objc2-foundation/NSString"
          ];
          "all" = [
            "CAAnimation"
            "CABase"
            "CAConstraintLayoutManager"
            "CADisplayLink"
            "CAEDRMetadata"
            "CAEmitterCell"
            "CAEmitterLayer"
            "CAFrameRateRange"
            "CAGradientLayer"
            "CALayer"
            "CAMediaTiming"
            "CAMediaTimingFunction"
            "CAMetalDisplayLink"
            "CAMetalLayer"
            "CAOpenGLLayer"
            "CARemoteLayerClient"
            "CARemoteLayerServer"
            "CARenderer"
            "CAReplicatorLayer"
            "CAScrollLayer"
            "CAShapeLayer"
            "CATextLayer"
            "CATiledLayer"
            "CATransaction"
            "CATransform3D"
            "CATransformLayer"
            "CAValueFunction"
            "CoreAnimation"
            "CoreImage"
            "CoreVideo"
            "bitflags"
            "block2"
            "objc2-metal"
          ];
          "alloc" = [
            "block2?/alloc"
            "objc2/alloc"
            "objc2-foundation/alloc"
            "objc2-metal?/alloc"
          ];
          "bitflags" = [
            "dep:bitflags"
            "objc2-foundation/bitflags"
            "objc2-metal?/bitflags"
          ];
          "block2" = [
            "dep:block2"
            "objc2-foundation/block2"
            "objc2-metal?/block2"
          ];
          "default" = [ "std" ];
          "objc2-metal" = [ "dep:objc2-metal" ];
          "std" = [
            "alloc"
            "bitflags?/std"
            "block2?/std"
            "objc2/std"
            "objc2-foundation/std"
            "objc2-metal?/std"
          ];
        };
        resolvedDefaultFeatures = [
          "CALayer"
          "alloc"
          "bitflags"
          "block2"
          "std"
        ];
      };
      "object" = rec {
        crateName = "object";
        version = "0.36.4";
        edition = "2018";
        sha256 = "02h7k38dwi8rndc3y81n6yjxijbss99p2jm9c0b6ak5c45c1lkq8";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "all" = [
            "read"
            "write"
            "build"
            "std"
            "compression"
            "wasm"
          ];
          "alloc" = [ "dep:alloc" ];
          "build" = [
            "build_core"
            "write_std"
            "elf"
          ];
          "build_core" = [
            "read_core"
            "write_core"
          ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "compression" = [
            "dep:flate2"
            "dep:ruzstd"
            "std"
          ];
          "core" = [ "dep:core" ];
          "default" = [
            "read"
            "compression"
          ];
          "doc" = [
            "read_core"
            "write_std"
            "build_core"
            "std"
            "compression"
            "archive"
            "coff"
            "elf"
            "macho"
            "pe"
            "wasm"
            "xcoff"
          ];
          "pe" = [ "coff" ];
          "read" = [
            "read_core"
            "archive"
            "coff"
            "elf"
            "macho"
            "pe"
            "xcoff"
            "unaligned"
          ];
          "rustc-dep-of-std" = [
            "core"
            "compiler_builtins"
            "alloc"
            "memchr/rustc-dep-of-std"
          ];
          "std" = [ "memchr/std" ];
          "unstable-all" = [
            "all"
            "unstable"
          ];
          "wasm" = [ "dep:wasmparser" ];
          "write" = [
            "write_std"
            "coff"
            "elf"
            "macho"
            "pe"
            "xcoff"
          ];
          "write_core" = [
            "dep:crc32fast"
            "dep:indexmap"
            "dep:hashbrown"
          ];
          "write_std" = [
            "write_core"
            "std"
            "indexmap?/std"
            "crc32fast?/std"
          ];
        };
        resolvedDefaultFeatures = [
          "archive"
          "coff"
          "elf"
          "macho"
          "pe"
          "read_core"
          "unaligned"
          "xcoff"
        ];
      };
      "once_cell" = rec {
        crateName = "once_cell";
        version = "1.19.0";
        edition = "2021";
        sha256 = "14kvw7px5z96dk4dwdm1r9cqhhy2cyj1l5n5b29mynbb8yr15nrz";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        features = {
          "alloc" = [ "race" ];
          "atomic-polyfill" = [ "critical-section" ];
          "critical-section" = [
            "dep:critical-section"
            "portable-atomic"
          ];
          "default" = [ "std" ];
          "parking_lot" = [ "dep:parking_lot_core" ];
          "portable-atomic" = [ "dep:portable-atomic" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "race"
          "std"
        ];
      };
      "orbclient" = rec {
        crateName = "orbclient";
        version = "0.3.47";
        edition = "2018";
        sha256 = "0rk144mqpv27r390bjn6dfcp2314xxfila6g3njx6x4pvr5xbw2j";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "libredox";
            packageId = "libredox";
            target = { target, features }: ("redox" == target."os" or null);
          }
        ];
        features = {
          "bundled" = [
            "sdl"
            "sdl2/bundled"
            "sdl2/static-link"
            "sdl2-sys/bundled"
            "sdl2-sys/static-link"
          ];
          "default" = [
            "std"
            "sdl"
            "unifont"
          ];
          "libc" = [ "dep:libc" ];
          "raw-window-handle" = [ "dep:raw-window-handle" ];
          "sdl" = [
            "sdl2"
            "sdl2-sys"
            "libc"
          ];
          "sdl2" = [ "dep:sdl2" ];
          "sdl2-sys" = [ "dep:sdl2-sys" ];
        };
      };
      "ordered-stream" = rec {
        crateName = "ordered-stream";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0l0xxp697q7wiix1gnfn66xsss7fdhfivl2k7bvpjs4i3lgb18ls";
        libName = "ordered_stream";
        authors = [
          "Daniel De Graaf <code@danieldg.net>"
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
        ];

      };
      "owned_ttf_parser" = rec {
        crateName = "owned_ttf_parser";
        version = "0.24.0";
        edition = "2021";
        sha256 = "143zd875l8zzj5msrhzhyp05x7iqv6nv0n8sj5yby8ii7mb3l3a9";
        authors = [
          "Alex Butler <alexheretic@gmail.com>"
        ];
        dependencies = [
          {
            name = "ttf-parser";
            packageId = "ttf-parser";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "apple-layout" = [ "ttf-parser/apple-layout" ];
          "default" = [
            "std"
            "opentype-layout"
            "apple-layout"
            "variable-fonts"
            "glyph-names"
          ];
          "glyph-names" = [ "ttf-parser/glyph-names" ];
          "gvar-alloc" = [
            "std"
            "ttf-parser/gvar-alloc"
          ];
          "no-std-float" = [ "ttf-parser/no-std-float" ];
          "opentype-layout" = [ "ttf-parser/opentype-layout" ];
          "std" = [ "ttf-parser/std" ];
          "variable-fonts" = [ "ttf-parser/variable-fonts" ];
        };
        resolvedDefaultFeatures = [
          "apple-layout"
          "default"
          "glyph-names"
          "opentype-layout"
          "std"
          "variable-fonts"
        ];
      };
      "parking" = rec {
        crateName = "parking";
        version = "2.2.1";
        edition = "2018";
        sha256 = "1fnfgmzkfpjd69v4j9x737b1k8pnn054bvzcn5dm3pkgq595d3gk";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "The Rust Project Developers"
        ];
        features = {
          "loom" = [ "dep:loom" ];
        };
      };
      "parking_lot" = rec {
        crateName = "parking_lot";
        version = "0.12.3";
        edition = "2021";
        sha256 = "09ws9g6245iiq8z975h8ycf818a66q3c6zv4b5h8skpm7hc1igzi";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "lock_api";
            packageId = "lock_api";
          }
          {
            name = "parking_lot_core";
            packageId = "parking_lot_core";
          }
        ];
        features = {
          "arc_lock" = [ "lock_api/arc_lock" ];
          "deadlock_detection" = [ "parking_lot_core/deadlock_detection" ];
          "nightly" = [
            "parking_lot_core/nightly"
            "lock_api/nightly"
          ];
          "owning_ref" = [ "lock_api/owning_ref" ];
          "serde" = [ "lock_api/serde" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "send_guard"
        ];
      };
      "parking_lot_core" = rec {
        crateName = "parking_lot_core";
        version = "0.9.10";
        edition = "2021";
        sha256 = "1y3cf9ld9ijf7i4igwzffcn0xl16dxyn4c5bwgjck1dkgabiyh0y";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.5.4";
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "deadlock_detection" = [
            "petgraph"
            "thread-id"
            "backtrace"
          ];
          "petgraph" = [ "dep:petgraph" ];
          "thread-id" = [ "dep:thread-id" ];
        };
      };
      "paste" = rec {
        crateName = "paste";
        version = "1.0.15";
        edition = "2018";
        sha256 = "02pxffpdqkapy292harq6asfjvadgp1s005fip9ljfsn9fvxgh2p";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "percent-encoding" = rec {
        crateName = "percent-encoding";
        version = "2.3.1";
        edition = "2018";
        sha256 = "0gi8wgx0dcy8rnv1kywdv98lwcx67hz0a0zwpib5v2i08r88y573";
        libName = "percent_encoding";
        authors = [
          "The rust-url developers"
        ];
        features = {
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "pin-project-lite" = rec {
        crateName = "pin-project-lite";
        version = "0.2.14";
        edition = "2018";
        sha256 = "00nx3f04agwjlsmd3mc5rx5haibj2v8q9b52b0kwn63wcv4nz9mx";
        libName = "pin_project_lite";

      };
      "pin-utils" = rec {
        crateName = "pin-utils";
        version = "0.1.0";
        edition = "2018";
        sha256 = "117ir7vslsl2z1a7qzhws4pd01cg2d3338c47swjyvqv2n60v1wb";
        libName = "pin_utils";
        authors = [
          "Josef Brandl <mail@josefbrandl.de>"
        ];

      };
      "piper" = rec {
        crateName = "piper";
        version = "0.2.4";
        edition = "2018";
        sha256 = "0rn0mjjm0cwagdkay77wgmz3sqf8fqmv9d9czm79mvr2yj8c9j4n";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "atomic-waker";
            packageId = "atomic-waker";
          }
          {
            name = "fastrand";
            packageId = "fastrand 2.1.1";
            usesDefaultFeatures = false;
          }
          {
            name = "futures-io";
            packageId = "futures-io";
            optional = true;
          }
        ];
        features = {
          "default" = [ "std" ];
          "futures-io" = [ "dep:futures-io" ];
          "portable-atomic" = [
            "atomic-waker/portable-atomic"
            "portable_atomic_crate"
            "portable-atomic-util"
          ];
          "portable-atomic-util" = [ "dep:portable-atomic-util" ];
          "portable_atomic_crate" = [ "dep:portable_atomic_crate" ];
          "std" = [
            "fastrand/std"
            "futures-io"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "futures-io"
          "std"
        ];
      };
      "pkg-config" = rec {
        crateName = "pkg-config";
        version = "0.3.30";
        edition = "2015";
        sha256 = "1v07557dj1sa0aly9c90wsygc0i8xv5vnmyv0g94lpkvj8qb4cfj";
        libName = "pkg_config";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "pm4" = rec {
        crateName = "pm4";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./packages/pm4;
        };
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
            usesDefaultFeatures = false;
          }
          {
            name = "bits";
            packageId = "bits";
          }
          {
            name = "bits_macros";
            packageId = "bits_macros";
          }
          {
            name = "custom_debug";
            packageId = "custom_debug";
          }
          {
            name = "pm4_internal_macros";
            packageId = "pm4_internal_macros";
          }
          {
            name = "snafu";
            packageId = "snafu";
            usesDefaultFeatures = false;
            features = [ "rust_1_81" ];
          }
          {
            name = "strum";
            packageId = "strum";
            usesDefaultFeatures = false;
            features = [ "derive" ];
          }
        ];
        devDependencies = [
          {
            name = "insta";
            packageId = "insta";
          }
          {
            name = "snapshot_test_utils";
            packageId = "snapshot_test_utils";
          }
        ];

      };
      "pm4_internal_macros" = rec {
        crateName = "pm4_internal_macros";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./packages/pm4_internal_macros;
        };
        procMacro = true;
        dependencies = [
          {
            name = "macro_utils";
            packageId = "macro_utils";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [
              "full"
              "extra-traits"
            ];
          }
        ];

      };
      "png" = rec {
        crateName = "png";
        version = "0.17.14";
        edition = "2018";
        sha256 = "1w130qw3cngzppxk1yp3ls2pbw3f0spbzhkbarbnlnm06imd9yaj";
        authors = [
          "The image-rs Developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "crc32fast";
            packageId = "crc32fast";
          }
          {
            name = "fdeflate";
            packageId = "fdeflate";
          }
          {
            name = "flate2";
            packageId = "flate2";
          }
          {
            name = "miniz_oxide";
            packageId = "miniz_oxide";
            features = [ "simd" ];
          }
        ];
        features = {
        };
      };
      "polling 2.8.0" = rec {
        crateName = "polling";
        version = "2.8.0";
        edition = "2018";
        sha256 = "1kixxfq1af1k7gkmmk9yv4j2krpp4fji2r8j4cz6p6d7ihz34bab";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
            target =
              { target, features }:
              (
                (target."unix" or false) || ("fuchsia" == target."os" or null) || ("vxworks" == target."os" or null)
              );
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_Networking_WinSock"
              "Win32_Storage_FileSystem"
              "Win32_System_IO"
              "Win32_System_LibraryLoader"
              "Win32_System_Threading"
              "Win32_System_WindowsProgramming"
            ];
          }
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "polling 3.7.3" = rec {
        crateName = "polling";
        version = "3.7.3";
        edition = "2021";
        sha256 = "04b5zdgz0m9ydbzcr3f9a55749gqbj0y89d0nz9nrv0x636r09yc";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
          "John Nunley <dev@notgull.net>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "concurrent-queue";
            packageId = "concurrent-queue";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "hermit-abi";
            packageId = "hermit-abi 0.4.0";
            target = { target, features }: ("hermit" == target."os" or null);
          }
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.37";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (target."unix" or false) || ("fuchsia" == target."os" or null) || ("vxworks" == target."os" or null)
              );
            features = [
              "event"
              "fs"
              "pipe"
              "process"
              "std"
              "time"
            ];
          }
          {
            name = "tracing";
            packageId = "tracing";
            usesDefaultFeatures = false;
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Wdk_Foundation"
              "Wdk_Storage_FileSystem"
              "Win32_Foundation"
              "Win32_Networking_WinSock"
              "Win32_Security"
              "Win32_Storage_FileSystem"
              "Win32_System_IO"
              "Win32_System_LibraryLoader"
              "Win32_System_Threading"
              "Win32_System_WindowsProgramming"
            ];
          }
        ];

      };
      "pollster" = rec {
        crateName = "pollster";
        version = "0.3.0";
        edition = "2018";
        sha256 = "1wn73ljx1pcb4p69jyiz206idj7nkfqknfvdhp64yaphhm3nys12";
        authors = [
          "Joshua Barretto <joshua.s.barretto@gmail.com>"
        ];
        features = {
          "macro" = [ "pollster-macro" ];
          "pollster-macro" = [ "dep:pollster-macro" ];
        };
      };
      "ppv-lite86" = rec {
        crateName = "ppv-lite86";
        version = "0.2.20";
        edition = "2021";
        sha256 = "017ax9ssdnpww7nrl1hvqh2lzncpv04nnsibmnw9nxjnaqlpp5bp";
        libName = "ppv_lite86";
        authors = [
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "zerocopy";
            packageId = "zerocopy";
            features = [
              "simd"
              "derive"
            ];
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "simd"
          "std"
        ];
      };
      "presser" = rec {
        crateName = "presser";
        version = "0.3.1";
        edition = "2021";
        sha256 = "1ykvqx861sjmhkdh540aafqba7i7li7gqgwrcczy6v56i9m8xkz8";
        authors = [
          "Embark <opensource@embark-studios.com>"
          "Gray Olson <gray@grayolson.com"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "proc-macro-crate 1.3.1" = rec {
        crateName = "proc-macro-crate";
        version = "1.3.1";
        edition = "2021";
        sha256 = "069r1k56bvgk0f58dm5swlssfcp79im230affwk6d9ck20g04k3z";
        libName = "proc_macro_crate";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "toml_edit";
            packageId = "toml_edit 0.19.15";
          }
        ];

      };
      "proc-macro-crate 3.2.0" = rec {
        crateName = "proc-macro-crate";
        version = "3.2.0";
        edition = "2021";
        sha256 = "0yzsqnavb3lmrcsmbrdjfrky9vcbl46v59xi9avn0796rb3likwf";
        libName = "proc_macro_crate";
        authors = [
          "Bastian Köcher <git@kchr.de>"
        ];
        dependencies = [
          {
            name = "toml_edit";
            packageId = "toml_edit 0.22.21";
          }
        ];

      };
      "proc-macro2" = rec {
        crateName = "proc-macro2";
        version = "1.0.86";
        edition = "2021";
        sha256 = "0xrv22p8lqlfdf1w0pj4si8n2ws4aw0kilmziwf0vpv5ys6rwway";
        libName = "proc_macro2";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        dependencies = [
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "proc-macro"
        ];
      };
      "profiling" = rec {
        crateName = "profiling";
        version = "1.0.15";
        edition = "2018";
        sha256 = "0n5y50w07m95mk2yn94wcrbz4kip30anv7vzf5rjdjbag8flvn23";
        authors = [
          "Philip Degarmo <aclysma@gmail.com>"
        ];
        features = {
          "default" = [ "procmacros" ];
          "optick" = [ "dep:optick" ];
          "procmacros" = [ "profiling-procmacros" ];
          "profile-with-optick" = [
            "optick"
            "profiling-procmacros?/profile-with-optick"
          ];
          "profile-with-puffin" = [
            "puffin"
            "profiling-procmacros?/profile-with-puffin"
          ];
          "profile-with-superluminal" = [
            "superluminal-perf"
            "profiling-procmacros?/profile-with-superluminal"
          ];
          "profile-with-tracing" = [
            "tracing"
            "profiling-procmacros?/profile-with-tracing"
          ];
          "profile-with-tracy" = [
            "tracy-client"
            "profiling-procmacros?/profile-with-tracy"
          ];
          "profiling-procmacros" = [ "dep:profiling-procmacros" ];
          "puffin" = [ "dep:puffin" ];
          "superluminal-perf" = [ "dep:superluminal-perf" ];
          "tracing" = [ "dep:tracing" ];
          "tracy-client" = [ "dep:tracy-client" ];
        };
      };
      "ps4libdoc" = rec {
        crateName = "ps4libdoc";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./packages/ps4libdoc;
        };
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "glob";
            packageId = "glob";
          }
          {
            name = "rust-embed";
            packageId = "rust-embed";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
        ];

      };
      "quick-xml" = rec {
        crateName = "quick-xml";
        version = "0.36.1";
        edition = "2021";
        sha256 = "1g0p8h4hxz2ymiyd71mn862nrj7s0g1wwiyahhdabpzxiqp5x84n";
        libName = "quick_xml";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "async-tokio" = [ "tokio" ];
          "document-features" = [ "dep:document-features" ];
          "encoding" = [ "encoding_rs" ];
          "encoding_rs" = [ "dep:encoding_rs" ];
          "serde" = [ "dep:serde" ];
          "serde-types" = [ "serde/derive" ];
          "serialize" = [ "serde" ];
          "tokio" = [ "dep:tokio" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "quote" = rec {
        crateName = "quote";
        version = "1.0.37";
        edition = "2018";
        sha256 = "1brklraw2g34bxy9y4q1nbrccn7bv36ylihv12c9vlcii55x7fdm";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [ "proc-macro2/proc-macro" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "proc-macro"
        ];
      };
      "rand" = rec {
        crateName = "rand";
        version = "0.8.5";
        edition = "2018";
        sha256 = "013l6931nn7gkc23jz5mm3qdhf93jjf0fg64nz2lp4i51qd8vbrl";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "rand_chacha";
            packageId = "rand_chacha";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "rand_core";
            packageId = "rand_core";
          }
        ];
        features = {
          "alloc" = [ "rand_core/alloc" ];
          "default" = [
            "std"
            "std_rng"
          ];
          "getrandom" = [ "rand_core/getrandom" ];
          "libc" = [ "dep:libc" ];
          "log" = [ "dep:log" ];
          "packed_simd" = [ "dep:packed_simd" ];
          "rand_chacha" = [ "dep:rand_chacha" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [
            "serde"
            "rand_core/serde1"
          ];
          "simd_support" = [ "packed_simd" ];
          "std" = [
            "rand_core/std"
            "rand_chacha/std"
            "alloc"
            "getrandom"
            "libc"
          ];
          "std_rng" = [ "rand_chacha" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "getrandom"
          "libc"
          "rand_chacha"
          "std"
          "std_rng"
        ];
      };
      "rand_chacha" = rec {
        crateName = "rand_chacha";
        version = "0.3.1";
        edition = "2018";
        sha256 = "123x2adin558xbhvqb8w4f6syjsdkmqff8cxwhmjacpsl1ihmhg6";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
          "The CryptoCorrosion Contributors"
        ];
        dependencies = [
          {
            name = "ppv-lite86";
            packageId = "ppv-lite86";
            usesDefaultFeatures = false;
            features = [ "simd" ];
          }
          {
            name = "rand_core";
            packageId = "rand_core";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [ "ppv-lite86/std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "rand_core" = rec {
        crateName = "rand_core";
        version = "0.6.4";
        edition = "2018";
        sha256 = "0b4j2v4cb5krak1pv6kakv4sz6xcwbrmy2zckc32hsigbrwy82zc";
        authors = [
          "The Rand Project Developers"
          "The Rust Project Developers"
        ];
        dependencies = [
          {
            name = "getrandom";
            packageId = "getrandom";
            optional = true;
          }
        ];
        features = {
          "getrandom" = [ "dep:getrandom" ];
          "serde" = [ "dep:serde" ];
          "serde1" = [ "serde" ];
          "std" = [
            "alloc"
            "getrandom"
            "getrandom/std"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "getrandom"
          "std"
        ];
      };
      "raw-window-handle 0.5.2" = rec {
        crateName = "raw-window-handle";
        version = "0.5.2";
        edition = "2021";
        sha256 = "1f9k10fgda464ia1b2hni8f0sa8i0bphdsbs3di032x80qgrmzzj";
        libName = "raw_window_handle";
        authors = [
          "Osspial <osspial@gmail.com>"
        ];
        features = {
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "std"
        ];
      };
      "raw-window-handle 0.6.2" = rec {
        crateName = "raw-window-handle";
        version = "0.6.2";
        edition = "2021";
        sha256 = "0ff5c648hncwx7hm2a8fqgqlbvbl4xawb6v3xxv9wkpjyrr5arr0";
        libName = "raw_window_handle";
        authors = [
          "Osspial <osspial@gmail.com>"
        ];
        features = {
          "std" = [ "alloc" ];
          "wasm-bindgen" = [ "dep:wasm-bindgen" ];
          "wasm-bindgen-0-2" = [
            "wasm-bindgen"
            "std"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "std"
        ];
      };
      "redox_syscall 0.3.5" = rec {
        crateName = "redox_syscall";
        version = "0.3.5";
        edition = "2018";
        sha256 = "0acgiy2lc1m2vr8cr33l5s7k9wzby8dybyab1a9p753hcbr68xjn";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
        ];
        features = {
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [
            "core"
            "bitflags/rustc-dep-of-std"
          ];
        };
      };
      "redox_syscall 0.4.1" = rec {
        crateName = "redox_syscall";
        version = "0.4.1";
        edition = "2018";
        sha256 = "1aiifyz5dnybfvkk4cdab9p2kmphag1yad6iknc7aszlxxldf8j7";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
        ];
        features = {
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [
            "core"
            "bitflags/rustc-dep-of-std"
          ];
        };
      };
      "redox_syscall 0.5.4" = rec {
        crateName = "redox_syscall";
        version = "0.5.4";
        edition = "2021";
        sha256 = "0lqqcvp4nfyxzpy0vx03rn23ij93i7gab81xp52i7gwhw1hav108";
        libName = "syscall";
        authors = [
          "Jeremy Soller <jackpot51@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
        ];
        features = {
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [
            "core"
            "bitflags/rustc-dep-of-std"
          ];
        };
      };
      "regex" = rec {
        crateName = "regex";
        version = "1.10.6";
        edition = "2021";
        sha256 = "06cnlxwzyqfbw1za1i7ks89ns4i2kr0lpg5ykx56b8v7dd6df6a2";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex-automata";
            packageId = "regex-automata";
            usesDefaultFeatures = false;
            features = [
              "alloc"
              "syntax"
              "meta"
              "nfa-pikevm"
            ];
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [
            "std"
            "perf"
            "unicode"
            "regex-syntax/default"
          ];
          "logging" = [
            "aho-corasick?/logging"
            "memchr?/logging"
            "regex-automata/logging"
          ];
          "perf" = [
            "perf-cache"
            "perf-dfa"
            "perf-onepass"
            "perf-backtrack"
            "perf-inline"
            "perf-literal"
          ];
          "perf-backtrack" = [ "regex-automata/nfa-backtrack" ];
          "perf-dfa" = [ "regex-automata/hybrid" ];
          "perf-dfa-full" = [
            "regex-automata/dfa-build"
            "regex-automata/dfa-search"
          ];
          "perf-inline" = [ "regex-automata/perf-inline" ];
          "perf-literal" = [
            "dep:aho-corasick"
            "dep:memchr"
            "regex-automata/perf-literal"
          ];
          "perf-onepass" = [ "regex-automata/dfa-onepass" ];
          "std" = [
            "aho-corasick?/std"
            "memchr?/std"
            "regex-automata/std"
            "regex-syntax/std"
          ];
          "unicode" = [
            "unicode-age"
            "unicode-bool"
            "unicode-case"
            "unicode-gencat"
            "unicode-perl"
            "unicode-script"
            "unicode-segment"
            "regex-automata/unicode"
            "regex-syntax/unicode"
          ];
          "unicode-age" = [
            "regex-automata/unicode-age"
            "regex-syntax/unicode-age"
          ];
          "unicode-bool" = [
            "regex-automata/unicode-bool"
            "regex-syntax/unicode-bool"
          ];
          "unicode-case" = [
            "regex-automata/unicode-case"
            "regex-syntax/unicode-case"
          ];
          "unicode-gencat" = [
            "regex-automata/unicode-gencat"
            "regex-syntax/unicode-gencat"
          ];
          "unicode-perl" = [
            "regex-automata/unicode-perl"
            "regex-automata/unicode-word-boundary"
            "regex-syntax/unicode-perl"
          ];
          "unicode-script" = [
            "regex-automata/unicode-script"
            "regex-syntax/unicode-script"
          ];
          "unicode-segment" = [
            "regex-automata/unicode-segment"
            "regex-syntax/unicode-segment"
          ];
          "unstable" = [ "pattern" ];
          "use_std" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "perf"
          "perf-backtrack"
          "perf-cache"
          "perf-dfa"
          "perf-inline"
          "perf-literal"
          "perf-onepass"
          "std"
          "unicode"
          "unicode-age"
          "unicode-bool"
          "unicode-case"
          "unicode-gencat"
          "unicode-perl"
          "unicode-script"
          "unicode-segment"
        ];
      };
      "regex-automata" = rec {
        crateName = "regex-automata";
        version = "0.4.7";
        edition = "2021";
        sha256 = "1pwjdi4jckpbaivpl6x4v5g4crb37zr2wac93wlfsbzgqn6gbjiq";
        libName = "regex_automata";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "aho-corasick";
            packageId = "aho-corasick";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "regex-syntax";
            packageId = "regex-syntax";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [
            "std"
            "syntax"
            "perf"
            "unicode"
            "meta"
            "nfa"
            "dfa"
            "hybrid"
          ];
          "dfa" = [
            "dfa-build"
            "dfa-search"
            "dfa-onepass"
          ];
          "dfa-build" = [
            "nfa-thompson"
            "dfa-search"
          ];
          "dfa-onepass" = [ "nfa-thompson" ];
          "hybrid" = [
            "alloc"
            "nfa-thompson"
          ];
          "internal-instrument" = [ "internal-instrument-pikevm" ];
          "internal-instrument-pikevm" = [
            "logging"
            "std"
          ];
          "logging" = [
            "dep:log"
            "aho-corasick?/logging"
            "memchr?/logging"
          ];
          "meta" = [
            "syntax"
            "nfa-pikevm"
          ];
          "nfa" = [
            "nfa-thompson"
            "nfa-pikevm"
            "nfa-backtrack"
          ];
          "nfa-backtrack" = [ "nfa-thompson" ];
          "nfa-pikevm" = [ "nfa-thompson" ];
          "nfa-thompson" = [ "alloc" ];
          "perf" = [
            "perf-inline"
            "perf-literal"
          ];
          "perf-literal" = [
            "perf-literal-substring"
            "perf-literal-multisubstring"
          ];
          "perf-literal-multisubstring" = [
            "std"
            "dep:aho-corasick"
          ];
          "perf-literal-substring" = [
            "aho-corasick?/perf-literal"
            "dep:memchr"
          ];
          "std" = [
            "regex-syntax?/std"
            "memchr?/std"
            "aho-corasick?/std"
            "alloc"
          ];
          "syntax" = [
            "dep:regex-syntax"
            "alloc"
          ];
          "unicode" = [
            "unicode-age"
            "unicode-bool"
            "unicode-case"
            "unicode-gencat"
            "unicode-perl"
            "unicode-script"
            "unicode-segment"
            "unicode-word-boundary"
            "regex-syntax?/unicode"
          ];
          "unicode-age" = [ "regex-syntax?/unicode-age" ];
          "unicode-bool" = [ "regex-syntax?/unicode-bool" ];
          "unicode-case" = [ "regex-syntax?/unicode-case" ];
          "unicode-gencat" = [ "regex-syntax?/unicode-gencat" ];
          "unicode-perl" = [ "regex-syntax?/unicode-perl" ];
          "unicode-script" = [ "regex-syntax?/unicode-script" ];
          "unicode-segment" = [ "regex-syntax?/unicode-segment" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "dfa-onepass"
          "hybrid"
          "meta"
          "nfa-backtrack"
          "nfa-pikevm"
          "nfa-thompson"
          "perf-inline"
          "perf-literal"
          "perf-literal-multisubstring"
          "perf-literal-substring"
          "std"
          "syntax"
          "unicode"
          "unicode-age"
          "unicode-bool"
          "unicode-case"
          "unicode-gencat"
          "unicode-perl"
          "unicode-script"
          "unicode-segment"
          "unicode-word-boundary"
        ];
      };
      "regex-syntax" = rec {
        crateName = "regex-syntax";
        version = "0.8.4";
        edition = "2021";
        sha256 = "16r0kjy20vx33dr4mhasj5l1f87czas714x2fz6zl0f8wwxa0rks";
        libName = "regex_syntax";
        authors = [
          "The Rust Project Developers"
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [
            "std"
            "unicode"
          ];
          "unicode" = [
            "unicode-age"
            "unicode-bool"
            "unicode-case"
            "unicode-gencat"
            "unicode-perl"
            "unicode-script"
            "unicode-segment"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
          "unicode"
          "unicode-age"
          "unicode-bool"
          "unicode-case"
          "unicode-gencat"
          "unicode-perl"
          "unicode-script"
          "unicode-segment"
        ];
      };
      "renderdoc" = rec {
        crateName = "renderdoc";
        version = "0.11.0";
        edition = "2018";
        sha256 = "04hycbzwqmzw25qnk0lwps70jgxi43cgmkjdvwbyzc183vnajb97";
        authors = [
          "Eyal Kalderon <ebkalderon@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "float-cmp";
            packageId = "float-cmp";
          }
          {
            name = "libloading";
            packageId = "libloading 0.7.4";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "renderdoc-sys";
            packageId = "renderdoc-sys";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [
              "d3d12"
              "d3d11"
            ];
          }
          {
            name = "wio";
            packageId = "wio";
            target = { target, features }: (target."windows" or false);
          }
        ];
        features = {
          "glutin" = [ "dep:glutin" ];
          "winit" = [ "dep:winit" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "renderdoc-sys" = rec {
        crateName = "renderdoc-sys";
        version = "1.1.0";
        edition = "2015";
        sha256 = "0cj8zjs7k0gvchcx3jhpg8r9bbqy8b1hsgbz0flcq2ydn12hmcqr";
        libName = "renderdoc_sys";
        authors = [
          "Eyal Kalderon <ebkalderon@gmail.com>"
        ];

      };
      "rfd" = rec {
        crateName = "rfd";
        version = "0.15.0";
        edition = "2021";
        sha256 = "13i7ljs7q7w98j7cvxr6hxfx8j7zh06sn2gwdfm0h6l28yh85wwa";
        authors = [
          "Poly <marynczak.bartlomiej@gmail.com>"
        ];
        dependencies = [
          {
            name = "ashpd";
            packageId = "ashpd";
            optional = true;
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                ("linux" == target."os" or null)
                || ("freebsd" == target."os" or null)
                || ("dragonfly" == target."os" or null)
                || ("netbsd" == target."os" or null)
                || ("openbsd" == target."os" or null)
              );
            features = [ "raw_handle" ];
          }
          {
            name = "block2";
            packageId = "block2 0.5.1";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "objc2";
            packageId = "objc2 0.5.2";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "objc2-app-kit";
            packageId = "objc2-app-kit";
            target = { target, features }: ("macos" == target."os" or null);
            features = [
              "block2"
              "NSAlert"
              "NSApplication"
              "NSButton"
              "NSControl"
              "NSOpenPanel"
              "NSPanel"
              "NSResponder"
              "NSRunningApplication"
              "NSSavePanel"
              "NSView"
              "NSWindow"
            ];
          }
          {
            name = "objc2-foundation";
            packageId = "objc2-foundation";
            target = { target, features }: ("macos" == target."os" or null);
            features = [
              "dispatch"
              "NSArray"
              "NSEnumerator"
              "NSString"
              "NSThread"
              "NSURL"
            ];
          }
          {
            name = "pollster";
            packageId = "pollster";
            optional = true;
            target =
              { target, features }:
              (
                ("linux" == target."os" or null)
                || ("freebsd" == target."os" or null)
                || ("dragonfly" == target."os" or null)
                || ("netbsd" == target."os" or null)
                || ("openbsd" == target."os" or null)
              );
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle 0.6.2";
          }
          {
            name = "urlencoding";
            packageId = "urlencoding";
            optional = true;
            target =
              { target, features }:
              (
                ("linux" == target."os" or null)
                || ("freebsd" == target."os" or null)
                || ("dragonfly" == target."os" or null)
                || ("netbsd" == target."os" or null)
                || ("openbsd" == target."os" or null)
              );
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [
              "Document"
              "Element"
              "HtmlInputElement"
              "HtmlButtonElement"
              "HtmlAnchorElement"
              "Window"
              "File"
              "FileList"
              "FileReader"
              "Blob"
              "BlobPropertyBag"
              "Url"
            ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: ("windows" == target."os" or null);
            features = [
              "Win32_Foundation"
              "Win32_System_Com"
              "Win32_UI_Shell_Common"
              "Win32_UI_Shell"
              "Win32_UI_WindowsAndMessaging"
            ];
          }
        ];
        features = {
          "ashpd" = [ "dep:ashpd" ];
          "async-std" = [ "ashpd?/async-std" ];
          "common-controls-v6" = [ "windows-sys/Win32_UI_Controls" ];
          "default" = [
            "xdg-portal"
            "async-std"
          ];
          "glib-sys" = [ "dep:glib-sys" ];
          "gobject-sys" = [ "dep:gobject-sys" ];
          "gtk-sys" = [ "dep:gtk-sys" ];
          "gtk3" = [
            "gtk-sys"
            "glib-sys"
            "gobject-sys"
          ];
          "pollster" = [ "dep:pollster" ];
          "tokio" = [ "ashpd?/tokio" ];
          "urlencoding" = [ "dep:urlencoding" ];
          "xdg-portal" = [
            "ashpd"
            "urlencoding"
            "pollster"
          ];
        };
        resolvedDefaultFeatures = [
          "ashpd"
          "async-std"
          "default"
          "pollster"
          "urlencoding"
          "xdg-portal"
        ];
      };
      "roxmltree" = rec {
        crateName = "roxmltree";
        version = "0.14.1";
        edition = "2018";
        sha256 = "0sv44pfl218p6r9anq5si6fhv0vz26vq20y42pi3f3j15sk086cj";
        authors = [
          "Evgeniy Reizner <razrfalcon@gmail.com>"
        ];
        dependencies = [
          {
            name = "xmlparser";
            packageId = "xmlparser";
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "rspirv" = rec {
        crateName = "rspirv";
        version = "0.12.0+sdk-1.3.268.0";
        edition = "2018";
        sha256 = "13gcmxz0yazh2bqcy34mn5qn6nbm606xyy3jad35jvkbhn9kmkv9";
        libPath = "lib.rs";
        authors = [
          "Lei Zhang <antiagainst@gmail.com>"
        ];
        dependencies = [
          {
            name = "rustc-hash";
            packageId = "rustc-hash";
          }
          {
            name = "spirv";
            packageId = "spirv";
          }
        ];
        features = {
          "clippy" = [ "dep:clippy" ];
        };
      };
      "rust-embed" = rec {
        crateName = "rust-embed";
        version = "8.5.0";
        edition = "2018";
        sha256 = "1h2k15ajsq9x70l11h61m4wlg8qias4mw4bg4yy7wpnx9x5ayrps";
        libName = "rust_embed";
        authors = [
          "pyros2097 <pyros2097@gmail.com>"
        ];
        dependencies = [
          {
            name = "rust-embed-impl";
            packageId = "rust-embed-impl";
          }
          {
            name = "rust-embed-utils";
            packageId = "rust-embed-utils";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "actix" = [
            "actix-web"
            "mime_guess"
          ];
          "actix-web" = [ "dep:actix-web" ];
          "axum" = [ "dep:axum" ];
          "axum-ex" = [
            "axum"
            "tokio"
            "mime_guess"
          ];
          "compression" = [
            "rust-embed-impl/compression"
            "include-flate"
          ];
          "debug-embed" = [
            "rust-embed-impl/debug-embed"
            "rust-embed-utils/debug-embed"
          ];
          "hex" = [ "dep:hex" ];
          "include-exclude" = [
            "rust-embed-impl/include-exclude"
            "rust-embed-utils/include-exclude"
          ];
          "include-flate" = [ "dep:include-flate" ];
          "interpolate-folder-path" = [ "rust-embed-impl/interpolate-folder-path" ];
          "mime-guess" = [
            "rust-embed-impl/mime-guess"
            "rust-embed-utils/mime-guess"
          ];
          "mime_guess" = [ "dep:mime_guess" ];
          "poem" = [ "dep:poem" ];
          "poem-ex" = [
            "poem"
            "tokio"
            "mime_guess"
            "hex"
          ];
          "rocket" = [ "dep:rocket" ];
          "salvo" = [ "dep:salvo" ];
          "salvo-ex" = [
            "salvo"
            "tokio"
            "mime_guess"
            "hex"
          ];
          "tokio" = [ "dep:tokio" ];
          "warp" = [ "dep:warp" ];
          "warp-ex" = [
            "warp"
            "tokio"
            "mime_guess"
          ];
        };
      };
      "rust-embed-impl" = rec {
        crateName = "rust-embed-impl";
        version = "8.5.0";
        edition = "2018";
        sha256 = "0y0lfrvpqnh98lngf6z6crjwkhp9yhvl2ac7xig14lbrhv4dn9b1";
        procMacro = true;
        libName = "rust_embed_impl";
        authors = [
          "pyros2097 <pyros2097@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "rust-embed-utils";
            packageId = "rust-embed-utils";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            usesDefaultFeatures = false;
            features = [
              "derive"
              "parsing"
              "proc-macro"
              "printing"
            ];
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "include-exclude" = [ "rust-embed-utils/include-exclude" ];
          "interpolate-folder-path" = [ "shellexpand" ];
          "mime-guess" = [ "rust-embed-utils/mime-guess" ];
          "shellexpand" = [ "dep:shellexpand" ];
        };
      };
      "rust-embed-utils" = rec {
        crateName = "rust-embed-utils";
        version = "8.5.0";
        edition = "2018";
        sha256 = "17aj29y2xis2fhp4i1wyf0xqm6ljhn3z5qdh75hbbb4sgrvlflrf";
        libName = "rust_embed_utils";
        authors = [
          "pyros2097 <pyros2097@gmail.com>"
        ];
        dependencies = [
          {
            name = "sha2";
            packageId = "sha2";
          }
          {
            name = "walkdir";
            packageId = "walkdir";
          }
        ];
        features = {
          "globset" = [ "dep:globset" ];
          "include-exclude" = [ "globset" ];
          "mime-guess" = [ "mime_guess" ];
          "mime_guess" = [ "dep:mime_guess" ];
        };
      };
      "rustc-demangle" = rec {
        crateName = "rustc-demangle";
        version = "0.1.24";
        edition = "2015";
        sha256 = "07zysaafgrkzy2rjgwqdj2a8qdpsm6zv6f5pgpk9x0lm40z9b6vi";
        libName = "rustc_demangle";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [
            "core"
            "compiler_builtins"
          ];
        };
      };
      "rustc-hash" = rec {
        crateName = "rustc-hash";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1qkc5khrmv5pqi5l5ca9p5nl5hs742cagrndhbrlk3dhlrx3zm08";
        libName = "rustc_hash";
        authors = [
          "The Rust Project Developers"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "rustix 0.37.27" = rec {
        crateName = "rustix";
        version = "0.37.27";
        edition = "2018";
        sha256 = "1lidfswa8wbg358yrrkhfvsw0hzlvl540g4lwqszw09sg8vcma7y";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
          "Jakub Konka <kubkon@jakubkonka.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 1.3.2";
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            optional = true;
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (!(target."rustix_use_libc" or false))
                && (!(target."miri" or false))
                && ("linux" == target."os" or null)
                && (
                  ("x86" == target."arch" or null)
                  || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                  || (
                    ("little" == target."endian" or null)
                    && (
                      ("arm" == target."arch" or null)
                      || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                      || ("powerpc64" == target."arch" or null)
                      || ("riscv64" == target."arch" or null)
                      || ("mips" == target."arch" or null)
                      || ("mips64" == target."arch" or null)
                    )
                  )
                )
              );
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (!(target."windows" or false))
                && (
                  (target."rustix_use_libc" or false)
                  || (target."miri" or false)
                  || (
                    !(
                      ("linux" == target."os" or null)
                      && (
                        ("x86" == target."arch" or null)
                        || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                        || (
                          ("little" == target."endian" or null)
                          && (
                            ("arm" == target."arch" or null)
                            || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                            || ("powerpc64" == target."arch" or null)
                            || ("riscv64" == target."arch" or null)
                            || ("mips" == target."arch" or null)
                            || ("mips64" == target."arch" or null)
                          )
                        )
                      )
                    )
                  )
                )
              );
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "io-lifetimes";
            packageId = "io-lifetimes";
            optional = true;
            usesDefaultFeatures = false;
            features = [ "close" ];
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            target =
              { target, features }:
              (
                (!(target."rustix_use_libc" or false))
                && (!(target."miri" or false))
                && ("linux" == target."os" or null)
                && (
                  ("x86" == target."arch" or null)
                  || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                  || (
                    ("little" == target."endian" or null)
                    && (
                      ("arm" == target."arch" or null)
                      || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                      || ("powerpc64" == target."arch" or null)
                      || ("riscv64" == target."arch" or null)
                      || ("mips" == target."arch" or null)
                      || ("mips64" == target."arch" or null)
                    )
                  )
                )
              );
            features = [ "extra_traits" ];
          }
          {
            name = "libc";
            packageId = "libc";
            target =
              { target, features }:
              (
                (!(target."windows" or false))
                && (
                  (target."rustix_use_libc" or false)
                  || (target."miri" or false)
                  || (
                    !(
                      ("linux" == target."os" or null)
                      && (
                        ("x86" == target."arch" or null)
                        || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                        || (
                          ("little" == target."endian" or null)
                          && (
                            ("arm" == target."arch" or null)
                            || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                            || ("powerpc64" == target."arch" or null)
                            || ("riscv64" == target."arch" or null)
                            || ("mips" == target."arch" or null)
                            || ("mips64" == target."arch" or null)
                          )
                        )
                      )
                    )
                  )
                )
              );
            features = [ "extra_traits" ];
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys 0.3.8";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (("android" == target."os" or null) || ("linux" == target."os" or null))
                && (
                  (target."rustix_use_libc" or false)
                  || (target."miri" or false)
                  || (
                    !(
                      ("linux" == target."os" or null)
                      && (
                        ("x86" == target."arch" or null)
                        || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                        || (
                          ("little" == target."endian" or null)
                          && (
                            ("arm" == target."arch" or null)
                            || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                            || ("powerpc64" == target."arch" or null)
                            || ("riscv64" == target."arch" or null)
                            || ("mips" == target."arch" or null)
                            || ("mips64" == target."arch" or null)
                          )
                        )
                      )
                    )
                  )
                )
              );
            features = [
              "general"
              "ioctl"
              "no_std"
            ];
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys 0.3.8";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (!(target."rustix_use_libc" or false))
                && (!(target."miri" or false))
                && ("linux" == target."os" or null)
                && (
                  ("x86" == target."arch" or null)
                  || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                  || (
                    ("little" == target."endian" or null)
                    && (
                      ("arm" == target."arch" or null)
                      || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                      || ("powerpc64" == target."arch" or null)
                      || ("riscv64" == target."arch" or null)
                      || ("mips" == target."arch" or null)
                      || ("mips64" == target."arch" or null)
                    )
                  )
                )
              );
            features = [
              "general"
              "errno"
              "ioctl"
              "no_std"
            ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_Networking_WinSock"
              "Win32_NetworkManagement_IpHelper"
              "Win32_System_Threading"
            ];
          }
        ];
        devDependencies = [
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
          }
          {
            name = "io-lifetimes";
            packageId = "io-lifetimes";
            usesDefaultFeatures = false;
            features = [ "close" ];
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "all-apis" = [
            "fs"
            "io_uring"
            "mm"
            "net"
            "param"
            "process"
            "procfs"
            "pty"
            "rand"
            "runtime"
            "termios"
            "thread"
            "time"
          ];
          "all-impls" = [
            "os_pipe"
            "fs-err"
          ];
          "alloc" = [ "dep:alloc" ];
          "cc" = [ "dep:cc" ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [
            "std"
            "use-libc-auxv"
          ];
          "fs-err" = [ "io-lifetimes/fs-err" ];
          "io-lifetimes" = [ "dep:io-lifetimes" ];
          "io_uring" = [
            "fs"
            "net"
          ];
          "itoa" = [ "dep:itoa" ];
          "libc" = [ "dep:libc" ];
          "libc_errno" = [ "dep:libc_errno" ];
          "linux_latest" = [ "linux_4_11" ];
          "once_cell" = [ "dep:once_cell" ];
          "os_pipe" = [ "io-lifetimes/os_pipe" ];
          "param" = [ "fs" ];
          "procfs" = [
            "once_cell"
            "itoa"
            "fs"
          ];
          "pty" = [
            "itoa"
            "fs"
          ];
          "rustc-dep-of-std" = [
            "core"
            "alloc"
            "compiler_builtins"
            "linux-raw-sys/rustc-dep-of-std"
            "bitflags/rustc-dep-of-std"
          ];
          "std" = [ "io-lifetimes" ];
          "use-libc" = [
            "libc_errno"
            "libc"
          ];
          "use-libc-auxv" = [ "libc" ];
        };
        resolvedDefaultFeatures = [
          "fs"
          "io-lifetimes"
          "std"
        ];
      };
      "rustix 0.38.37" = rec {
        crateName = "rustix";
        version = "0.38.37";
        edition = "2021";
        sha256 = "04b8f99c2g36gyggf4aphw8742k2b1vls3364n2z493whj5pijwa";
        authors = [
          "Dan Gohman <dev@sunfishcode.online>"
          "Jakub Konka <kubkon@jakubkonka.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
            usesDefaultFeatures = false;
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            optional = true;
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (!(target."rustix_use_libc" or false))
                && (!(target."miri" or false))
                && ("linux" == target."os" or null)
                && ("little" == target."endian" or null)
                && (
                  ("arm" == target."arch" or null)
                  || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                  || ("riscv64" == target."arch" or null)
                  || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null))
                  || ("x86" == target."arch" or null)
                  || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                )
              );
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (!(target."windows" or false))
                && (
                  (target."rustix_use_libc" or false)
                  || (target."miri" or false)
                  || (
                    !(
                      ("linux" == target."os" or null)
                      && ("little" == target."endian" or null)
                      && (
                        ("arm" == target."arch" or null)
                        || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                        || ("riscv64" == target."arch" or null)
                        || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null))
                        || ("x86" == target."arch" or null)
                        || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                      )
                    )
                  )
                )
              );
          }
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (!(target."rustix_use_libc" or false))
                && (!(target."miri" or false))
                && ("linux" == target."os" or null)
                && ("little" == target."endian" or null)
                && (
                  ("arm" == target."arch" or null)
                  || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                  || ("riscv64" == target."arch" or null)
                  || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null))
                  || ("x86" == target."arch" or null)
                  || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                )
              );
          }
          {
            name = "libc";
            packageId = "libc";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (!(target."windows" or false))
                && (
                  (target."rustix_use_libc" or false)
                  || (target."miri" or false)
                  || (
                    !(
                      ("linux" == target."os" or null)
                      && ("little" == target."endian" or null)
                      && (
                        ("arm" == target."arch" or null)
                        || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                        || ("riscv64" == target."arch" or null)
                        || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null))
                        || ("x86" == target."arch" or null)
                        || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                      )
                    )
                  )
                )
              );
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys 0.4.14";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (("android" == target."os" or null) || ("linux" == target."os" or null))
                && (
                  (target."rustix_use_libc" or false)
                  || (target."miri" or false)
                  || (
                    !(
                      ("linux" == target."os" or null)
                      && ("little" == target."endian" or null)
                      && (
                        ("arm" == target."arch" or null)
                        || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                        || ("riscv64" == target."arch" or null)
                        || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null))
                        || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null))
                        || ("x86" == target."arch" or null)
                        || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                      )
                    )
                  )
                )
              );
            features = [
              "general"
              "ioctl"
              "no_std"
            ];
          }
          {
            name = "linux-raw-sys";
            packageId = "linux-raw-sys 0.4.14";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (!(target."rustix_use_libc" or false))
                && (!(target."miri" or false))
                && ("linux" == target."os" or null)
                && ("little" == target."endian" or null)
                && (
                  ("arm" == target."arch" or null)
                  || (("aarch64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                  || ("riscv64" == target."arch" or null)
                  || ((target."rustix_use_experimental_asm" or false) && ("powerpc64" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips32r6" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips64" == target."arch" or null))
                  || ((target."rustix_use_experimental_asm" or false) && ("mips64r6" == target."arch" or null))
                  || ("x86" == target."arch" or null)
                  || (("x86_64" == target."arch" or null) && ("64" == target."pointer_width" or null))
                )
              );
            features = [
              "general"
              "errno"
              "ioctl"
              "no_std"
              "elf"
            ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_Networking_WinSock"
              "Win32_NetworkManagement_IpHelper"
              "Win32_System_Threading"
            ];
          }
        ];
        devDependencies = [
          {
            name = "errno";
            packageId = "errno";
            rename = "libc_errno";
            usesDefaultFeatures = false;
          }
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        features = {
          "all-apis" = [
            "event"
            "fs"
            "io_uring"
            "mm"
            "mount"
            "net"
            "param"
            "pipe"
            "process"
            "procfs"
            "pty"
            "rand"
            "runtime"
            "shm"
            "stdio"
            "system"
            "termios"
            "thread"
            "time"
          ];
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [
            "std"
            "use-libc-auxv"
          ];
          "io_uring" = [
            "event"
            "fs"
            "net"
            "linux-raw-sys/io_uring"
          ];
          "itoa" = [ "dep:itoa" ];
          "libc" = [ "dep:libc" ];
          "libc-extra-traits" = [ "libc?/extra_traits" ];
          "libc_errno" = [ "dep:libc_errno" ];
          "linux_latest" = [ "linux_4_11" ];
          "net" = [
            "linux-raw-sys/net"
            "linux-raw-sys/netlink"
            "linux-raw-sys/if_ether"
            "linux-raw-sys/xdp"
          ];
          "once_cell" = [ "dep:once_cell" ];
          "param" = [ "fs" ];
          "process" = [ "linux-raw-sys/prctl" ];
          "procfs" = [
            "once_cell"
            "itoa"
            "fs"
          ];
          "pty" = [
            "itoa"
            "fs"
          ];
          "runtime" = [ "linux-raw-sys/prctl" ];
          "rustc-dep-of-std" = [
            "core"
            "rustc-std-workspace-alloc"
            "compiler_builtins"
            "linux-raw-sys/rustc-dep-of-std"
            "bitflags/rustc-dep-of-std"
            "compiler_builtins?/rustc-dep-of-std"
          ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
          "shm" = [ "fs" ];
          "std" = [
            "bitflags/std"
            "alloc"
            "libc?/std"
            "libc_errno?/std"
            "libc-extra-traits"
          ];
          "system" = [ "linux-raw-sys/system" ];
          "thread" = [ "linux-raw-sys/prctl" ];
          "use-libc" = [
            "libc_errno"
            "libc"
            "libc-extra-traits"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "event"
          "fs"
          "libc-extra-traits"
          "net"
          "pipe"
          "process"
          "shm"
          "std"
          "system"
          "thread"
          "time"
          "use-libc-auxv"
        ];
      };
      "rustversion" = rec {
        crateName = "rustversion";
        version = "1.0.17";
        edition = "2018";
        sha256 = "1mm3fckyvb0l2209in1n2k05sws5d9mpkszbnwhq3pkq8apjhpcm";
        procMacro = true;
        build = "build/build.rs";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "ryu" = rec {
        crateName = "ryu";
        version = "1.0.18";
        edition = "2018";
        sha256 = "17xx2s8j1lln7iackzd9p0sv546vjq71i779gphjq923vjh5pjzk";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        features = {
          "no-panic" = [ "dep:no-panic" ];
        };
      };
      "same-file" = rec {
        crateName = "same-file";
        version = "1.0.6";
        edition = "2018";
        sha256 = "00h5j1w87dmhnvbv9l8bic3y7xxsnjmssvifw2ayvgx9mb1ivz4k";
        libName = "same_file";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "scoped-tls" = rec {
        crateName = "scoped-tls";
        version = "1.0.1";
        edition = "2015";
        sha256 = "15524h04mafihcvfpgxd8f4bgc3k95aclz8grjkg9a0rxcvn9kz1";
        libName = "scoped_tls";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];

      };
      "scopeguard" = rec {
        crateName = "scopeguard";
        version = "1.2.0";
        edition = "2015";
        sha256 = "0jcz9sd47zlsgcnm1hdw0664krxwb5gczlif4qngj2aif8vky54l";
        authors = [
          "bluss"
        ];
        features = {
          "default" = [ "use_std" ];
        };
      };
      "sctk-adwaita" = rec {
        crateName = "sctk-adwaita";
        version = "0.8.3";
        edition = "2021";
        sha256 = "1iq2wr1rhbpmwkfqxjhrgjrmfc90anww6vwim72r4w19r93i9cvh";
        libName = "sctk_adwaita";
        authors = [
          "Poly <marynczak.bartlomiej@gmail.com>"
        ];
        dependencies = [
          {
            name = "ab_glyph";
            packageId = "ab_glyph";
            optional = true;
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "memmap2";
            packageId = "memmap2";
            optional = true;
          }
          {
            name = "smithay-client-toolkit";
            packageId = "smithay-client-toolkit 0.18.1";
            usesDefaultFeatures = false;
          }
          {
            name = "tiny-skia";
            packageId = "tiny-skia";
            usesDefaultFeatures = false;
            features = [
              "std"
              "simd"
            ];
          }
        ];
        features = {
          "ab_glyph" = [
            "dep:ab_glyph"
            "memmap2"
          ];
          "crossfont" = [ "dep:crossfont" ];
          "default" = [ "ab_glyph" ];
          "memmap2" = [ "dep:memmap2" ];
        };
        resolvedDefaultFeatures = [
          "ab_glyph"
          "memmap2"
        ];
      };
      "serde" = rec {
        crateName = "serde";
        version = "1.0.210";
        edition = "2018";
        sha256 = "0flc0z8wgax1k4j5bf2zyq48bgzyv425jkd5w0i6wbh7f8j5kqy8";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
            optional = true;
          }
          {
            name = "serde_derive";
            packageId = "serde_derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "serde_derive";
            packageId = "serde_derive";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "serde_derive" ];
          "serde_derive" = [ "dep:serde_derive" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "derive"
          "rc"
          "serde_derive"
          "std"
        ];
      };
      "serde_derive" = rec {
        crateName = "serde_derive";
        version = "1.0.210";
        edition = "2015";
        sha256 = "07yzy4wafk79ps0hmbqmsqh5xjna4pm4q57wc847bb8gl3nh4f94";
        procMacro = true;
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
            features = [ "proc-macro" ];
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            usesDefaultFeatures = false;
            features = [
              "clone-impls"
              "derive"
              "parsing"
              "printing"
              "proc-macro"
            ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "serde_json" = rec {
        crateName = "serde_json";
        version = "1.0.128";
        edition = "2021";
        sha256 = "1n43nia50ybpcfmh3gcw4lcc627qsg9nyakzwgkk9pm10xklbxbg";
        authors = [
          "Erick Tryzelaar <erick.tryzelaar@gmail.com>"
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "itoa";
            packageId = "itoa";
          }
          {
            name = "memchr";
            packageId = "memchr";
            usesDefaultFeatures = false;
          }
          {
            name = "ryu";
            packageId = "ryu";
          }
          {
            name = "serde";
            packageId = "serde";
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "alloc" = [ "serde/alloc" ];
          "default" = [ "std" ];
          "indexmap" = [ "dep:indexmap" ];
          "preserve_order" = [
            "indexmap"
            "std"
          ];
          "std" = [
            "memchr/std"
            "serde/std"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "serde_repr" = rec {
        crateName = "serde_repr";
        version = "0.1.19";
        edition = "2021";
        sha256 = "1sb4cplc33z86pzlx38234xr141wr3cmviqgssiadisgl8dlar3c";
        procMacro = true;
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
          }
        ];

      };
      "sha1" = rec {
        crateName = "sha1";
        version = "0.10.6";
        edition = "2018";
        sha256 = "1fnnxlfg08xhkmwf2ahv634as30l1i3xhlhkvxflmasi5nd85gz3";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target =
              { target, features }:
              (
                ("aarch64" == target."arch" or null)
                || ("x86" == target."arch" or null)
                || ("x86_64" == target."arch" or null)
              );
          }
          {
            name = "digest";
            packageId = "digest";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha1-asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "sha1-asm" = [ "dep:sha1-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "sha2" = rec {
        crateName = "sha2";
        version = "0.10.8";
        edition = "2018";
        sha256 = "1j1x78zk9il95w9iv46dh9wm73r6xrgj32y6lzzw7bxws9dbfgbr";
        authors = [
          "RustCrypto Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "cpufeatures";
            packageId = "cpufeatures";
            target =
              { target, features }:
              (
                ("aarch64" == target."arch" or null)
                || ("x86_64" == target."arch" or null)
                || ("x86" == target."arch" or null)
              );
          }
          {
            name = "digest";
            packageId = "digest";
          }
        ];
        devDependencies = [
          {
            name = "digest";
            packageId = "digest";
            features = [ "dev" ];
          }
        ];
        features = {
          "asm" = [ "sha2-asm" ];
          "asm-aarch64" = [ "asm" ];
          "default" = [ "std" ];
          "oid" = [ "digest/oid" ];
          "sha2-asm" = [ "dep:sha2-asm" ];
          "std" = [ "digest/std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "shaderc" = rec {
        crateName = "shaderc";
        version = "0.8.3";
        edition = "2015";
        sha256 = "0yrvwq0xqlc8c7hlhng9pfz3p39mwg5k296ic2xhg1m1ml9pkq17";
        authors = [
          "Lei Zhang <antiagainst@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "shaderc-sys";
            packageId = "shaderc-sys";
          }
        ];
        features = {
          "build-from-source" = [ "shaderc-sys/build-from-source" ];
          "prefer-static-linking" = [ "shaderc-sys/prefer-static-linking" ];
        };
      };
      "shaderc-sys" = rec {
        crateName = "shaderc-sys";
        version = "0.8.3";
        edition = "2015";
        links = "shaderc";
        sha256 = "1xzpf9i3k2r845xv86bvy9h4j09dr93qbjir1wq9c8g21wj0s4kk";
        build = "build/build.rs";
        libName = "shaderc_sys";
        authors = [
          "Lei Zhang <antiagainst@gmail.com>"
          "Mr. Knapp <knappador@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];
        buildDependencies = [
          {
            name = "cmake";
            packageId = "cmake";
          }
          {
            name = "roxmltree";
            packageId = "roxmltree";
          }
        ];
        features = {
        };
      };
      "shlex" = rec {
        crateName = "shlex";
        version = "1.3.0";
        edition = "2015";
        sha256 = "0r1y6bv26c1scpxvhg2cabimrmwgbp4p3wy6syj9n0c4s3q2znhg";
        authors = [
          "comex <comexk@gmail.com>"
          "Fenhl <fenhl@fenhl.net>"
          "Adrian Taylor <adetaylor@chromium.org>"
          "Alex Touchet <alextouchet@outlook.com>"
          "Daniel Parks <dp+git@oxidized.org>"
          "Garrett Berg <googberg@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "signal-hook-registry" = rec {
        crateName = "signal-hook-registry";
        version = "1.4.2";
        edition = "2015";
        sha256 = "1cb5akgq8ajnd5spyn587srvs4n26ryq0p78nswffwhv46sf1sd9";
        libName = "signal_hook_registry";
        authors = [
          "Michal 'vorner' Vaner <vorner@vorner.cz>"
          "Masaki Hara <ackie.h.gmai@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
        ];

      };
      "simd-adler32" = rec {
        crateName = "simd-adler32";
        version = "0.3.7";
        edition = "2018";
        sha256 = "1zkq40c3iajcnr5936gjp9jjh1lpzhy44p3dq3fiw75iwr1w2vfn";
        libName = "simd_adler32";
        authors = [
          "Marvin Countryman <me@maar.vin>"
        ];
        features = {
          "default" = [
            "std"
            "const-generics"
          ];
        };
        resolvedDefaultFeatures = [
          "const-generics"
          "default"
          "std"
        ];
      };
      "similar" = rec {
        crateName = "similar";
        version = "2.6.0";
        edition = "2018";
        sha256 = "0vk89dx2mmjp81pmszsa1s3mpzvbiy4krvfbq3s3mc3k27wd9q8x";
        authors = [
          "Armin Ronacher <armin.ronacher@active-4.com>"
          "Pierre-Étienne Meunier <pe@pijul.org>"
          "Brandon Williams <bwilliams.eng@gmail.com>"
        ];
        features = {
          "bstr" = [ "dep:bstr" ];
          "bytes" = [
            "bstr"
            "text"
          ];
          "default" = [ "text" ];
          "inline" = [ "text" ];
          "serde" = [ "dep:serde" ];
          "unicode" = [
            "text"
            "unicode-segmentation"
            "bstr?/unicode"
            "bstr?/std"
          ];
          "unicode-segmentation" = [ "dep:unicode-segmentation" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "inline"
          "text"
        ];
      };
      "slab" = rec {
        crateName = "slab";
        version = "0.4.9";
        edition = "2018";
        sha256 = "0rxvsgir0qw5lkycrqgb1cxsvxzjv9bmx73bk5y42svnzfba94lg";
        authors = [
          "Carl Lerche <me@carllerche.com>"
        ];
        buildDependencies = [
          {
            name = "autocfg";
            packageId = "autocfg";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "slotmap" = rec {
        crateName = "slotmap";
        version = "1.0.7";
        edition = "2018";
        sha256 = "0amqb2fn9lcy1ri0risblkcp88dl0rnfmynw7lx0nqwza77lmzyv";
        authors = [
          "Orson Peters <orsonpeters@gmail.com>"
        ];
        buildDependencies = [
          {
            name = "version_check";
            packageId = "version_check";
          }
        ];
        features = {
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "smallvec" = rec {
        crateName = "smallvec";
        version = "1.13.2";
        edition = "2018";
        sha256 = "0rsw5samawl3wsw6glrsb127rx6sh89a8wyikicw6dkdcjd1lpiw";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "const_new" = [ "const_generics" ];
          "drain_keep_rest" = [ "drain_filter" ];
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [
          "const_generics"
          "const_new"
          "union"
        ];
      };
      "smithay-client-toolkit 0.18.1" = rec {
        crateName = "smithay-client-toolkit";
        version = "0.18.1";
        edition = "2021";
        sha256 = "0fpm2yfpsif7022w4xalxgn53y8w5dc8zkipcpbj1n1vmgpd6bwj";
        libName = "smithay_client_toolkit";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
          "i509VCB <mail@i509.me>"
          "Ashley Wulber <ashley@system76.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "calloop";
            packageId = "calloop 0.12.4";
            optional = true;
          }
          {
            name = "calloop-wayland-source";
            packageId = "calloop-wayland-source 0.2.0";
            optional = true;
          }
          {
            name = "cursor-icon";
            packageId = "cursor-icon";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "memmap2";
            packageId = "memmap2";
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.37";
            features = [
              "fs"
              "pipe"
              "shm"
            ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
          }
          {
            name = "wayland-csd-frame";
            packageId = "wayland-csd-frame";
          }
          {
            name = "wayland-cursor";
            packageId = "wayland-cursor";
          }
          {
            name = "wayland-protocols";
            packageId = "wayland-protocols 0.31.2";
            features = [
              "client"
              "staging"
              "unstable"
            ];
          }
          {
            name = "wayland-protocols-wlr";
            packageId = "wayland-protocols-wlr 0.2.0";
            features = [ "client" ];
          }
          {
            name = "wayland-scanner";
            packageId = "wayland-scanner";
          }
          {
            name = "xkeysym";
            packageId = "xkeysym";
          }
        ];
        features = {
          "bytemuck" = [ "dep:bytemuck" ];
          "calloop" = [
            "dep:calloop"
            "calloop-wayland-source"
          ];
          "calloop-wayland-source" = [ "dep:calloop-wayland-source" ];
          "default" = [
            "calloop"
            "xkbcommon"
          ];
          "pkg-config" = [ "dep:pkg-config" ];
          "xkbcommon" = [
            "dep:xkbcommon"
            "bytemuck"
            "pkg-config"
            "xkeysym/bytemuck"
          ];
        };
        resolvedDefaultFeatures = [
          "calloop"
          "calloop-wayland-source"
        ];
      };
      "smithay-client-toolkit 0.19.2" = rec {
        crateName = "smithay-client-toolkit";
        version = "0.19.2";
        edition = "2021";
        sha256 = "05h05hg4dn3v6br5jbdbs5nalk076a64s7fn6i01nqzby2hxwmrl";
        libName = "smithay_client_toolkit";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
          "i509VCB <mail@i509.me>"
          "Ashley Wulber <ashley@system76.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "calloop";
            packageId = "calloop 0.13.0";
            optional = true;
          }
          {
            name = "calloop-wayland-source";
            packageId = "calloop-wayland-source 0.3.0";
            optional = true;
          }
          {
            name = "cursor-icon";
            packageId = "cursor-icon";
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "memmap2";
            packageId = "memmap2";
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.37";
            features = [
              "fs"
              "pipe"
              "shm"
            ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
          }
          {
            name = "wayland-csd-frame";
            packageId = "wayland-csd-frame";
          }
          {
            name = "wayland-cursor";
            packageId = "wayland-cursor";
          }
          {
            name = "wayland-protocols";
            packageId = "wayland-protocols 0.32.4";
            features = [
              "client"
              "staging"
              "unstable"
            ];
          }
          {
            name = "wayland-protocols-wlr";
            packageId = "wayland-protocols-wlr 0.3.4";
            features = [ "client" ];
          }
          {
            name = "wayland-scanner";
            packageId = "wayland-scanner";
          }
          {
            name = "xkeysym";
            packageId = "xkeysym";
          }
        ];
        features = {
          "bytemuck" = [ "dep:bytemuck" ];
          "calloop" = [
            "dep:calloop"
            "calloop-wayland-source"
          ];
          "calloop-wayland-source" = [ "dep:calloop-wayland-source" ];
          "default" = [
            "calloop"
            "xkbcommon"
          ];
          "pkg-config" = [ "dep:pkg-config" ];
          "xkbcommon" = [
            "dep:xkbcommon"
            "bytemuck"
            "pkg-config"
            "xkeysym/bytemuck"
          ];
        };
        resolvedDefaultFeatures = [
          "calloop"
          "calloop-wayland-source"
        ];
      };
      "smithay-clipboard" = rec {
        crateName = "smithay-clipboard";
        version = "0.7.2";
        edition = "2021";
        sha256 = "0inqnr4x458nqz0wdcanbgn77dad3bj0m7pjj074lrv3qkp1d0nc";
        libName = "smithay_clipboard";
        authors = [
          "Kirill Chibisov <contact@kchibisov.com>"
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "smithay-client-toolkit";
            packageId = "smithay-client-toolkit 0.19.2";
            rename = "sctk";
            usesDefaultFeatures = false;
            features = [ "calloop" ];
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
            usesDefaultFeatures = false;
            features = [ "client_system" ];
          }
        ];
        devDependencies = [
          {
            name = "smithay-client-toolkit";
            packageId = "smithay-client-toolkit 0.19.2";
            rename = "sctk";
            usesDefaultFeatures = false;
            features = [
              "calloop"
              "xkbcommon"
            ];
          }
        ];
        features = {
          "default" = [ "dlopen" ];
          "dlopen" = [ "wayland-backend/dlopen" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "dlopen"
        ];
      };
      "smol_str" = rec {
        crateName = "smol_str";
        version = "0.2.2";
        edition = "2018";
        sha256 = "1bfylqf2vnqaglw58930vpxm2rfzji5gjp15a2c0kh8aj6v8ylyx";
        authors = [
          "Aleksey Kladov <aleksey.kladov@gmail.com>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "arbitrary" = [ "dep:arbitrary" ];
          "default" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "serde?/std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "snafu" = rec {
        crateName = "snafu";
        version = "0.8.5";
        edition = "2018";
        sha256 = "06ahz9g4f6475rspfcay8512x776wpxc205rizzc6a9abv492f12";
        authors = [
          "Jake Goulding <jake.goulding@gmail.com>"
        ];
        dependencies = [
          {
            name = "snafu-derive";
            packageId = "snafu-derive";
          }
        ];
        features = {
          "backtrace" = [ "dep:backtrace" ];
          "backtraces-impl-backtrace-crate" = [ "backtrace" ];
          "default" = [
            "std"
            "rust_1_65"
          ];
          "futures" = [
            "futures-core-crate"
            "pin-project"
          ];
          "futures-core-crate" = [ "dep:futures-core-crate" ];
          "futures-crate" = [ "dep:futures-crate" ];
          "internal-dev-dependencies" = [ "futures-crate" ];
          "pin-project" = [ "dep:pin-project" ];
          "rust_1_61" = [ "snafu-derive/rust_1_61" ];
          "rust_1_65" = [ "rust_1_61" ];
          "rust_1_81" = [ "rust_1_65" ];
          "unstable-provider-api" = [ "snafu-derive/unstable-provider-api" ];
        };
        resolvedDefaultFeatures = [
          "rust_1_61"
          "rust_1_65"
          "rust_1_81"
        ];
      };
      "snafu-derive" = rec {
        crateName = "snafu-derive";
        version = "0.8.5";
        edition = "2018";
        sha256 = "05zr38bcngn8ha4mfi7lr2pqqfysjhwhxvk9lz57xzkzjavwdhq3";
        procMacro = true;
        libName = "snafu_derive";
        authors = [
          "Jake Goulding <jake.goulding@gmail.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.5.0";
            usesDefaultFeatures = false;
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "rust_1_61" ];
      };
      "snapshot_test_utils" = rec {
        crateName = "snapshot_test_utils";
        version = "0.1.0";
        edition = "2021";
        src = lib.cleanSourceWith {
          filter = sourceFilter;
          src = ./packages/snapshot_test_utils;
        };
        dependencies = [
          {
            name = "anyhow";
            packageId = "anyhow";
          }
          {
            name = "glob";
            packageId = "glob";
          }
        ];

      };
      "socket2" = rec {
        crateName = "socket2";
        version = "0.4.10";
        edition = "2018";
        sha256 = "03ack54dxhgfifzsj14k7qa3r5c9wqy3v6mqhlim99cc03y1cycz";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
          "Thomas de Zeeuw <thomasdezeeuw@gmail.com>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [
              "handleapi"
              "ws2ipdef"
              "ws2tcpip"
            ];
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "all" ];
      };
      "spirv" = rec {
        crateName = "spirv";
        version = "0.3.0+sdk-1.3.268.0";
        edition = "2018";
        sha256 = "0i3qj7yvvprai1s03dvll2gkfy8398nl64wvllkhaaa4vh1i197d";
        libPath = "lib.rs";
        authors = [
          "Lei Zhang <antiagainst@gmail.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
        ];
        features = {
          "deserialize" = [
            "serde"
            "bitflags/serde"
          ];
          "serde" = [ "dep:serde" ];
          "serialize" = [
            "serde"
            "bitflags/serde"
          ];
        };
      };
      "spirv-tools" = rec {
        crateName = "spirv-tools";
        version = "0.10.0";
        edition = "2021";
        sha256 = "0qa2n8s54sys4wg11y2bxcy094alxh4vg0pcnya4k0w1521v1cxw";
        libName = "spirv_tools";
        authors = [
          "Embark <opensource@embark-studios.com>"
        ];
        dependencies = [
          {
            name = "spirv-tools-sys";
            packageId = "spirv-tools-sys";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "use-compiled-tools" ];
          "memchr" = [ "dep:memchr" ];
          "tempfile" = [ "dep:tempfile" ];
          "use-compiled-tools" = [ "spirv-tools-sys/use-compiled-tools" ];
          "use-installed-tools" = [
            "spirv-tools-sys/use-installed-tools"
            "memchr"
            "tempfile"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "use-compiled-tools"
        ];
      };
      "spirv-tools-sys" = rec {
        crateName = "spirv-tools-sys";
        version = "0.8.0";
        edition = "2021";
        links = "spirv-tools";
        sha256 = "1rysbg2763hn681bniz1fdwajxaq89vj8vqa05p8b9ksm5aqprj8";
        libName = "spirv_tools_sys";
        authors = [
          "Embark <opensource@embark-studios.com>"
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
            features = [ "parallel" ];
          }
        ];
        features = {
          "default" = [ "use-compiled-tools" ];
        };
        resolvedDefaultFeatures = [ "use-compiled-tools" ];
      };
      "static_assertions" = rec {
        crateName = "static_assertions";
        version = "1.1.0";
        edition = "2015";
        sha256 = "0gsl6xmw10gvn3zs1rv99laj5ig7ylffnh71f9l34js4nr4r7sx2";
        authors = [
          "Nikolai Vazquez"
        ];
        features = {
        };
      };
      "strict-num" = rec {
        crateName = "strict-num";
        version = "0.1.1";
        edition = "2018";
        sha256 = "0cb7l1vhb8zj90mzm8avlk815k40sql9515s865rqdrdfavvldv6";
        libName = "strict_num";
        authors = [
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        features = {
          "approx-eq" = [ "float-cmp" ];
          "default" = [ "approx-eq" ];
          "float-cmp" = [ "dep:float-cmp" ];
        };
      };
      "strsim" = rec {
        crateName = "strsim";
        version = "0.11.1";
        edition = "2015";
        sha256 = "0kzvqlw8hxqb7y598w1s0hxlnmi84sg5vsipp3yg5na5d1rvba3x";
        authors = [
          "Danny Guo <danny@dannyguo.com>"
          "maxbachmann <oss@maxbachmann.de>"
        ];

      };
      "strum" = rec {
        crateName = "strum";
        version = "0.25.0";
        edition = "2018";
        sha256 = "09g1q55ms8vax1z0mxlbva3vm8n2r1179kfvbccnkjcidzm58399";
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros";
            optional = true;
          }
        ];
        devDependencies = [
          {
            name = "strum_macros";
            packageId = "strum_macros";
          }
        ];
        features = {
          "default" = [ "std" ];
          "derive" = [ "strum_macros" ];
          "phf" = [ "dep:phf" ];
          "strum_macros" = [ "dep:strum_macros" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "derive"
          "std"
          "strum_macros"
        ];
      };
      "strum_macros" = rec {
        crateName = "strum_macros";
        version = "0.25.3";
        edition = "2018";
        sha256 = "184y62g474zqb2f7n16x3ghvlyjbh50viw32p9w9l5lwmjlizp13";
        procMacro = true;
        authors = [
          "Peter Glotfelty <peter.glotfelty@microsoft.com>"
        ];
        dependencies = [
          {
            name = "heck";
            packageId = "heck 0.4.1";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "rustversion";
            packageId = "rustversion";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [
              "parsing"
              "extra-traits"
            ];
          }
        ];

      };
      "syn 1.0.109" = rec {
        crateName = "syn";
        version = "1.0.109";
        edition = "2018";
        sha256 = "0ds2if4600bd59wsv7jjgfkayfzy3hnazs394kz6zdkmna8l3dkj";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [
            "derive"
            "parsing"
            "printing"
            "clone-impls"
            "proc-macro"
          ];
          "printing" = [ "quote" ];
          "proc-macro" = [
            "proc-macro2/proc-macro"
            "quote/proc-macro"
          ];
          "quote" = [ "dep:quote" ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [
          "clone-impls"
          "default"
          "derive"
          "extra-traits"
          "fold"
          "full"
          "parsing"
          "printing"
          "proc-macro"
          "quote"
          "visit"
        ];
      };
      "syn 2.0.77" = rec {
        crateName = "syn";
        version = "2.0.77";
        edition = "2021";
        sha256 = "1vbkwfp9ymmi0fsyyjsqfvnv7gm8vjgl4pzprbk7p3pxc7gvqdcz";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "unicode-ident";
            packageId = "unicode-ident";
          }
        ];
        features = {
          "default" = [
            "derive"
            "parsing"
            "printing"
            "clone-impls"
            "proc-macro"
          ];
          "printing" = [ "dep:quote" ];
          "proc-macro" = [
            "proc-macro2/proc-macro"
            "quote?/proc-macro"
          ];
          "test" = [ "syn-test-suite/all-features" ];
        };
        resolvedDefaultFeatures = [
          "clone-impls"
          "default"
          "derive"
          "extra-traits"
          "fold"
          "full"
          "parsing"
          "printing"
          "proc-macro"
          "visit"
          "visit-mut"
        ];
      };
      "synstructure" = rec {
        crateName = "synstructure";
        version = "0.13.1";
        edition = "2018";
        sha256 = "0wc9f002ia2zqcbj0q2id5x6n7g1zjqba7qkg2mr0qvvmdk7dby8";
        authors = [
          "Nika Layzell <nika@thelayzells.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
            usesDefaultFeatures = false;
          }
          {
            name = "quote";
            packageId = "quote";
            usesDefaultFeatures = false;
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            usesDefaultFeatures = false;
            features = [
              "derive"
              "parsing"
              "printing"
              "clone-impls"
              "visit"
              "extra-traits"
            ];
          }
        ];
        features = {
          "default" = [ "proc-macro" ];
          "proc-macro" = [
            "proc-macro2/proc-macro"
            "syn/proc-macro"
            "quote/proc-macro"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "proc-macro"
        ];
      };
      "tempfile" = rec {
        crateName = "tempfile";
        version = "3.12.0";
        edition = "2021";
        sha256 = "0r3sm3323crr50ranvask8z4qb3x5zfqxs1mrzab1swlqz8cvjq4";
        authors = [
          "Steven Allen <steven@stebalien.com>"
          "The Rust Project Developers"
          "Ashley Mannix <ashleymannix@live.com.au>"
          "Jason White <me@jasonwhite.io>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "fastrand";
            packageId = "fastrand 2.1.1";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.37";
            target = { target, features }: ((target."unix" or false) || ("wasi" == target."os" or null));
            features = [ "fs" ];
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Storage_FileSystem"
              "Win32_Foundation"
            ];
          }
        ];
        features = {
        };
      };
      "termcolor" = rec {
        crateName = "termcolor";
        version = "1.4.1";
        edition = "2018";
        sha256 = "0mappjh3fj3p2nmrg4y7qv94rchwi9mzmgmfflr8p2awdj7lyy86";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "thiserror" = rec {
        crateName = "thiserror";
        version = "1.0.63";
        edition = "2021";
        sha256 = "092p83mf4p1vkjb2j6h6z96dan4raq2simhirjv12slbndq26d60";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "thiserror-impl";
            packageId = "thiserror-impl";
          }
        ];

      };
      "thiserror-impl" = rec {
        crateName = "thiserror-impl";
        version = "1.0.63";
        edition = "2021";
        sha256 = "0qd21l2jjrkvnpr5da3l3b58v4wmrkn6aa0h1z5dg6kb8rc8nmd4";
        procMacro = true;
        libName = "thiserror_impl";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
          }
        ];

      };
      "thread_local" = rec {
        crateName = "thread_local";
        version = "1.1.8";
        edition = "2021";
        sha256 = "173i5lyjh011gsimk21np9jn8al18rxsrkjli20a7b8ks2xgk7lb";
        authors = [
          "Amanieu d'Antras <amanieu@gmail.com>"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        features = {
        };
      };
      "tiny-skia" = rec {
        crateName = "tiny-skia";
        version = "0.11.4";
        edition = "2018";
        sha256 = "1aq9gd4qh4418g8v08qzakqqggx8hl66qcianl3k5bjdsja37lc3";
        libName = "tiny_skia";
        authors = [
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
            usesDefaultFeatures = false;
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "aarch64_simd" ];
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "tiny-skia-path";
            packageId = "tiny-skia-path";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [
            "std"
            "simd"
            "png-format"
          ];
          "no-std-float" = [ "tiny-skia-path/no-std-float" ];
          "png" = [ "dep:png" ];
          "png-format" = [
            "std"
            "png"
          ];
          "std" = [ "tiny-skia-path/std" ];
        };
        resolvedDefaultFeatures = [
          "simd"
          "std"
        ];
      };
      "tiny-skia-path" = rec {
        crateName = "tiny-skia-path";
        version = "0.11.4";
        edition = "2018";
        sha256 = "14ywbdfakvacl6rxxmzbnycplaxpc6i2linh2yqk0sp8qb07z7lw";
        libName = "tiny_skia_path";
        authors = [
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        dependencies = [
          {
            name = "arrayref";
            packageId = "arrayref";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
          }
          {
            name = "strict-num";
            packageId = "strict-num";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
          "libm" = [ "dep:libm" ];
          "no-std-float" = [ "libm" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "tinyvec" = rec {
        crateName = "tinyvec";
        version = "1.8.0";
        edition = "2018";
        sha256 = "0f5rf6a2wzyv6w4jmfga9iw7rp9fp5gf4d604xgjsf3d9wgqhpj4";
        authors = [
          "Lokathor <zefria@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec_macros";
            packageId = "tinyvec_macros";
            optional = true;
          }
        ];
        features = {
          "alloc" = [ "tinyvec_macros" ];
          "arbitrary" = [ "dep:arbitrary" ];
          "real_blackbox" = [ "criterion/real_blackbox" ];
          "rustc_1_57" = [ "rustc_1_55" ];
          "serde" = [ "dep:serde" ];
          "std" = [ "alloc" ];
          "tinyvec_macros" = [ "dep:tinyvec_macros" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "tinyvec_macros"
        ];
      };
      "tinyvec_macros" = rec {
        crateName = "tinyvec_macros";
        version = "0.1.1";
        edition = "2018";
        sha256 = "081gag86208sc3y6sdkshgw3vysm5d34p431dzw0bshz66ncng0z";
        authors = [
          "Soveu <marx.tomasz@gmail.com>"
        ];

      };
      "toml_datetime" = rec {
        crateName = "toml_datetime";
        version = "0.6.8";
        edition = "2021";
        sha256 = "0hgv7v9g35d7y9r2afic58jvlwnf73vgd1mz2k8gihlgrf73bmqd";
        authors = [
          "Alex Crichton <alex@alexcrichton.com>"
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
      };
      "toml_edit 0.19.15" = rec {
        crateName = "toml_edit";
        version = "0.19.15";
        edition = "2021";
        sha256 = "08bl7rp5g6jwmfpad9s8jpw8wjrciadpnbaswgywpr9hv9qbfnqv";
        authors = [
          "Andronik Ordian <write@reusable.software>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap";
            features = [ "std" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
          }
          {
            name = "winnow";
            packageId = "winnow 0.5.40";
          }
        ];
        features = {
          "perf" = [ "dep:kstring" ];
          "serde" = [
            "dep:serde"
            "toml_datetime/serde"
            "dep:serde_spanned"
          ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "toml_edit 0.22.21" = rec {
        crateName = "toml_edit";
        version = "0.22.21";
        edition = "2021";
        sha256 = "1ky5dncf4g4l8hpqizws2ccp37rsvvc2pwynzwvacjf4fgp2q1rv";
        authors = [
          "Andronik Ordian <write@reusable.software>"
          "Ed Page <eopage@gmail.com>"
        ];
        dependencies = [
          {
            name = "indexmap";
            packageId = "indexmap";
            features = [ "std" ];
          }
          {
            name = "toml_datetime";
            packageId = "toml_datetime";
          }
          {
            name = "winnow";
            packageId = "winnow 0.6.18";
            optional = true;
          }
        ];
        features = {
          "default" = [
            "parse"
            "display"
          ];
          "parse" = [ "dep:winnow" ];
          "perf" = [ "dep:kstring" ];
          "serde" = [
            "dep:serde"
            "toml_datetime/serde"
            "dep:serde_spanned"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "display"
          "parse"
        ];
      };
      "tracing" = rec {
        crateName = "tracing";
        version = "0.1.40";
        edition = "2018";
        sha256 = "1vv48dac9zgj9650pg2b4d0j3w6f3x9gbggf43scq5hrlysklln3";
        authors = [
          "Eliza Weisman <eliza@buoyant.io>"
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "pin-project-lite";
            packageId = "pin-project-lite";
          }
          {
            name = "tracing-attributes";
            packageId = "tracing-attributes";
            optional = true;
          }
          {
            name = "tracing-core";
            packageId = "tracing-core";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "attributes" = [ "tracing-attributes" ];
          "default" = [
            "std"
            "attributes"
          ];
          "log" = [ "dep:log" ];
          "log-always" = [ "log" ];
          "std" = [ "tracing-core/std" ];
          "tracing-attributes" = [ "dep:tracing-attributes" ];
          "valuable" = [ "tracing-core/valuable" ];
        };
        resolvedDefaultFeatures = [
          "attributes"
          "default"
          "std"
          "tracing-attributes"
        ];
      };
      "tracing-attributes" = rec {
        crateName = "tracing-attributes";
        version = "0.1.27";
        edition = "2018";
        sha256 = "1rvb5dn9z6d0xdj14r403z0af0bbaqhg02hq4jc97g5wds6lqw1l";
        procMacro = true;
        libName = "tracing_attributes";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
          "Eliza Weisman <eliza@buoyant.io>"
          "David Barsky <dbarsky@amazon.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            usesDefaultFeatures = false;
            features = [
              "full"
              "parsing"
              "printing"
              "visit-mut"
              "clone-impls"
              "extra-traits"
              "proc-macro"
            ];
          }
        ];
        features = {
        };
      };
      "tracing-core" = rec {
        crateName = "tracing-core";
        version = "0.1.32";
        edition = "2018";
        sha256 = "0m5aglin3cdwxpvbg6kz0r9r0k31j48n0kcfwsp6l49z26k3svf0";
        libName = "tracing_core";
        authors = [
          "Tokio Contributors <team@tokio.rs>"
        ];
        dependencies = [
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
        ];
        features = {
          "default" = [
            "std"
            "valuable/std"
          ];
          "once_cell" = [ "dep:once_cell" ];
          "std" = [ "once_cell" ];
          "valuable" = [ "dep:valuable" ];
        };
        resolvedDefaultFeatures = [
          "once_cell"
          "std"
        ];
      };
      "ttf-parser" = rec {
        crateName = "ttf-parser";
        version = "0.24.1";
        edition = "2018";
        sha256 = "0jmcif537g3smzgcx0vfr4wwq4pnaypa7dnklasfhf2xzy813qjv";
        libName = "ttf_parser";
        authors = [
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        features = {
          "core_maths" = [ "dep:core_maths" ];
          "default" = [
            "std"
            "opentype-layout"
            "apple-layout"
            "variable-fonts"
            "glyph-names"
          ];
          "gvar-alloc" = [ "std" ];
          "no-std-float" = [ "core_maths" ];
        };
        resolvedDefaultFeatures = [
          "apple-layout"
          "glyph-names"
          "opentype-layout"
          "std"
          "variable-fonts"
        ];
      };
      "type-map" = rec {
        crateName = "type-map";
        version = "0.5.0";
        edition = "2018";
        sha256 = "17qaga12nkankr7hi2mv43f4lnc78hg480kz6j9zmy4g0h28ddny";
        libName = "type_map";
        authors = [
          "Jacob Brown <kardeiz@gmail.com>"
        ];
        dependencies = [
          {
            name = "rustc-hash";
            packageId = "rustc-hash";
          }
        ];

      };
      "typenum" = rec {
        crateName = "typenum";
        version = "1.17.0";
        edition = "2018";
        sha256 = "09dqxv69m9lj9zvv6xw5vxaqx15ps0vxyy5myg33i0kbqvq0pzs2";
        build = "build/main.rs";
        authors = [
          "Paho Lurie-Gregg <paho@paholg.com>"
          "Andre Bogus <bogusandre@gmail.com>"
        ];
        features = {
          "scale-info" = [ "dep:scale-info" ];
          "scale_info" = [ "scale-info/derive" ];
        };
      };
      "uds_windows" = rec {
        crateName = "uds_windows";
        version = "1.1.0";
        edition = "2015";
        sha256 = "1fb4y65pw0rsp0gyfyinjazlzxz1f6zv7j4zmb20l5pxwv1ypnl9";
        authors = [
          "Azure IoT Edge Devs"
          "Harald Hoyer <harald@redhat.com>"
        ];
        dependencies = [
          {
            name = "memoffset";
            packageId = "memoffset 0.9.1";
          }
          {
            name = "tempfile";
            packageId = "tempfile";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [
              "winsock2"
              "ws2def"
              "minwinbase"
              "ntdef"
              "processthreadsapi"
              "handleapi"
              "ws2tcpip"
              "winbase"
            ];
          }
        ];

      };
      "unicode-bidi" = rec {
        crateName = "unicode-bidi";
        version = "0.3.15";
        edition = "2018";
        sha256 = "0xcdxm7h0ydyprwpcbh436rbs6s6lph7f3gr527lzgv6lw053y88";
        libName = "unicode_bidi";
        authors = [
          "The Servo Project Developers"
        ];
        features = {
          "default" = [
            "std"
            "hardcoded-data"
          ];
          "flame" = [ "dep:flame" ];
          "flame_it" = [
            "flame"
            "flamer"
          ];
          "flamer" = [ "dep:flamer" ];
          "serde" = [ "dep:serde" ];
          "with_serde" = [ "serde" ];
        };
        resolvedDefaultFeatures = [
          "hardcoded-data"
          "std"
        ];
      };
      "unicode-ident" = rec {
        crateName = "unicode-ident";
        version = "1.0.13";
        edition = "2018";
        sha256 = "1zm1xylzsdfvm2a5ib9li3g5pp7qnkv4amhspydvgbmd9k6mc6z9";
        libName = "unicode_ident";
        authors = [
          "David Tolnay <dtolnay@gmail.com>"
        ];

      };
      "unicode-normalization" = rec {
        crateName = "unicode-normalization";
        version = "0.1.24";
        edition = "2018";
        sha256 = "0mnrk809z3ix1wspcqy97ld5wxdb31f3xz6nsvg5qcv289ycjcsh";
        libName = "unicode_normalization";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        dependencies = [
          {
            name = "tinyvec";
            packageId = "tinyvec";
            features = [ "alloc" ];
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [ "std" ];
      };
      "unicode-segmentation" = rec {
        crateName = "unicode-segmentation";
        version = "1.12.0";
        edition = "2018";
        sha256 = "14qla2jfx74yyb9ds3d2mpwpa4l4lzb9z57c6d2ba511458z5k7n";
        libName = "unicode_segmentation";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
      };
      "unicode-width" = rec {
        crateName = "unicode-width";
        version = "0.1.13";
        edition = "2021";
        sha256 = "0p92vl8n7qc8mxz45xn6qbgi0259z96n32a158l6vj5bywwdadh3";
        libName = "unicode_width";
        authors = [
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "rustc-dep-of-std" = [
            "std"
            "core"
            "compiler_builtins"
          ];
          "std" = [ "dep:std" ];
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "unicode-xid" = rec {
        crateName = "unicode-xid";
        version = "0.2.5";
        edition = "2015";
        sha256 = "02n96yhcjwx7vphbwf9p7xfqbwvqgzdw2qz4h0x3wd5wgxj315r2";
        libName = "unicode_xid";
        authors = [
          "erick.tryzelaar <erick.tryzelaar@gmail.com>"
          "kwantam <kwantam@gmail.com>"
          "Manish Goregaokar <manishsmail@gmail.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "url" = rec {
        crateName = "url";
        version = "2.5.2";
        edition = "2018";
        sha256 = "0v2dx50mx7xzl9454cl5qmpjnhkbahmn59gd3apyipbgyyylsy12";
        authors = [
          "The rust-url developers"
        ];
        dependencies = [
          {
            name = "form_urlencoded";
            packageId = "form_urlencoded";
          }
          {
            name = "idna";
            packageId = "idna";
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
            features = [ "derive" ];
          }
        ];
        devDependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "serde"
        ];
      };
      "urlencoding" = rec {
        crateName = "urlencoding";
        version = "2.1.3";
        edition = "2021";
        sha256 = "1nj99jp37k47n0hvaz5fvz7z6jd0sb4ppvfy3nphr1zbnyixpy6s";
        authors = [
          "Kornel <kornel@geekhood.net>"
          "Bertram Truong <b@bertramtruong.com>"
        ];

      };
      "utf8parse" = rec {
        crateName = "utf8parse";
        version = "0.2.2";
        edition = "2018";
        sha256 = "088807qwjq46azicqwbhlmzwrbkz7l4hpw43sdkdyyk524vdxaq6";
        authors = [
          "Joe Wilm <joe@jwilm.com>"
          "Christian Duerr <contact@christianduerr.com>"
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "version_check" = rec {
        crateName = "version_check";
        version = "0.9.5";
        edition = "2015";
        sha256 = "0nhhi4i5x89gm911azqbn7avs9mdacw2i3vcz3cnmz3mv4rqz4hb";
        authors = [
          "Sergio Benitez <sb@sergio.bz>"
        ];

      };
      "vk-parse" = rec {
        crateName = "vk-parse";
        version = "0.12.0";
        edition = "2015";
        sha256 = "0ycfhz8w5jd1smsfpiazc1s0h3jjgf7krfqcv2f7ba37pql6q241";
        libName = "vk_parse";
        authors = [
          "Martin Krošlák <kroslakma@gmail.com>"
        ];
        dependencies = [
          {
            name = "xml-rs";
            packageId = "xml-rs";
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
          "serde_derive" = [ "dep:serde_derive" ];
          "serialize" = [
            "serde"
            "serde_derive"
          ];
          "vkxml" = [ "dep:vkxml" ];
          "vkxml-convert" = [ "vkxml" ];
        };
      };
      "vulkano" = rec {
        crateName = "vulkano";
        version = "0.34.1";
        edition = "2021";
        sha256 = "0x9xcn1fs95n4qy8flxsrllxx42ggcwln8vrhqw3qyrhfs7jgx3h";
        authors = [
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
          "The vulkano contributors"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
          }
          {
            name = "ash";
            packageId = "ash";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            features = [ "min_const_generics" ];
          }
          {
            name = "core-graphics-types";
            packageId = "core-graphics-types";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "crossbeam-queue";
            packageId = "crossbeam-queue";
          }
          {
            name = "half";
            packageId = "half";
            features = [ "bytemuck" ];
          }
          {
            name = "libloading";
            packageId = "libloading 0.8.5";
          }
          {
            name = "objc";
            packageId = "objc";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            features = [ "send_guard" ];
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle 0.5.2";
          }
          {
            name = "serde";
            packageId = "serde";
            optional = true;
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "thread_local";
            packageId = "thread_local";
          }
          {
            name = "vulkano-macros";
            packageId = "vulkano-macros";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "ahash";
            packageId = "ahash";
          }
          {
            name = "heck";
            packageId = "heck 0.4.1";
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_json";
            packageId = "serde_json";
          }
          {
            name = "vk-parse";
            packageId = "vk-parse";
          }
        ];
        features = {
          "default" = [ "macros" ];
          "macros" = [ "vulkano-macros" ];
          "serde" = [ "dep:serde" ];
          "vulkano-macros" = [ "dep:vulkano-macros" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "macros"
          "vulkano-macros"
        ];
      };
      "vulkano-macros" = rec {
        crateName = "vulkano-macros";
        version = "0.34.0";
        edition = "2021";
        sha256 = "0r9rgvp2qh9mafw6xf3wd3kndbj7hn7gdrwqw9vzswj26qnn5gjj";
        procMacro = true;
        libName = "vulkano_macros";
        authors = [
          "The vulkano contributors"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 1.3.1";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
          }
        ];

      };
      "vulkano-shaders" = rec {
        crateName = "vulkano-shaders";
        version = "0.34.0";
        edition = "2021";
        sha256 = "1vpl093bmdlfb8rfw30l6mif9n474p8svscnzd5dfrbm540k9xni";
        procMacro = true;
        libName = "vulkano_shaders";
        authors = [
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
          "The vulkano contributors"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
          }
          {
            name = "heck";
            packageId = "heck 0.4.1";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "shaderc";
            packageId = "shaderc";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [
              "full"
              "extra-traits"
            ];
          }
          {
            name = "vulkano";
            packageId = "vulkano";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "shaderc-build-from-source" = [ "shaderc/build-from-source" ];
        };
      };
      "waker-fn" = rec {
        crateName = "waker-fn";
        version = "1.2.0";
        edition = "2018";
        sha256 = "1dvk0qsv88kiq22x8w0qz0k9nyrxxm5a9a9czdwdvvhcvjh12wii";
        libName = "waker_fn";
        authors = [
          "Stjepan Glavina <stjepang@gmail.com>"
        ];
        features = {
          "portable-atomic" = [ "portable-atomic-util" ];
          "portable-atomic-util" = [ "dep:portable-atomic-util" ];
        };
      };
      "walkdir" = rec {
        crateName = "walkdir";
        version = "2.5.0";
        edition = "2018";
        sha256 = "0jsy7a710qv8gld5957ybrnc07gavppp963gs32xk4ag8130jy99";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "same-file";
            packageId = "same-file";
          }
          {
            name = "winapi-util";
            packageId = "winapi-util";
            target = { target, features }: (target."windows" or false);
          }
        ];

      };
      "wasi" = rec {
        crateName = "wasi";
        version = "0.11.0+wasi-snapshot-preview1";
        edition = "2018";
        sha256 = "08z4hxwkpdpalxjps1ai9y7ihin26y9f476i53dv98v45gkqg3cw";
        authors = [
          "The Cranelift Project Developers"
        ];
        features = {
          "compiler_builtins" = [ "dep:compiler_builtins" ];
          "core" = [ "dep:core" ];
          "default" = [ "std" ];
          "rustc-dep-of-std" = [
            "compiler_builtins"
            "core"
            "rustc-std-workspace-alloc"
          ];
          "rustc-std-workspace-alloc" = [ "dep:rustc-std-workspace-alloc" ];
        };
      };
      "wasm-bindgen" = rec {
        crateName = "wasm-bindgen";
        version = "0.2.93";
        edition = "2021";
        sha256 = "1dfr7pka5kwvky2fx82m9d060p842hc5fyyw8igryikcdb0xybm8";
        libName = "wasm_bindgen";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "wasm-bindgen-macro";
            packageId = "wasm-bindgen-macro";
          }
        ];
        features = {
          "default" = [
            "spans"
            "std"
          ];
          "enable-interning" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "serde-serialize" = [
            "serde"
            "serde_json"
            "std"
          ];
          "serde_json" = [ "dep:serde_json" ];
          "spans" = [ "wasm-bindgen-macro/spans" ];
          "strict-macro" = [ "wasm-bindgen-macro/strict-macro" ];
          "xxx_debug_only_print_generated_code" = [
            "wasm-bindgen-macro/xxx_debug_only_print_generated_code"
          ];
        };
        resolvedDefaultFeatures = [
          "default"
          "spans"
          "std"
        ];
      };
      "wasm-bindgen-backend" = rec {
        crateName = "wasm-bindgen-backend";
        version = "0.2.93";
        edition = "2021";
        sha256 = "0yypblaf94rdgqs5xw97499xfwgs1096yx026d6h88v563d9dqwx";
        libName = "wasm_bindgen_backend";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "bumpalo";
            packageId = "bumpalo";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [ "full" ];
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-futures" = rec {
        crateName = "wasm-bindgen-futures";
        version = "0.4.43";
        edition = "2021";
        sha256 = "1vf8kmaj95xn5893y1bdlav47y5niq85q5bms9pfj8d6cc7k1sb1";
        libName = "wasm_bindgen_futures";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: (builtins.elem "atomics" targetFeatures);
            features = [
              "MessageEvent"
              "Worker"
            ];
          }
        ];
        features = {
          "futures-core" = [ "dep:futures-core" ];
          "futures-core-03-stream" = [ "futures-core" ];
        };
      };
      "wasm-bindgen-macro" = rec {
        crateName = "wasm-bindgen-macro";
        version = "0.2.93";
        edition = "2021";
        sha256 = "1kycd1xfx4d9xzqknvzbiqhwb5fzvjqrrn88x692q1vblj8lqp2q";
        procMacro = true;
        libName = "wasm_bindgen_macro";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "wasm-bindgen-macro-support";
            packageId = "wasm-bindgen-macro-support";
          }
        ];
        features = {
          "spans" = [ "wasm-bindgen-macro-support/spans" ];
          "strict-macro" = [ "wasm-bindgen-macro-support/strict-macro" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-macro-support" = rec {
        crateName = "wasm-bindgen-macro-support";
        version = "0.2.93";
        edition = "2021";
        sha256 = "0dp8w6jmw44srym6l752nkr3hkplyw38a2fxz5f3j1ch9p3l1hxg";
        libName = "wasm_bindgen_macro_support";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [
              "visit"
              "full"
            ];
          }
          {
            name = "wasm-bindgen-backend";
            packageId = "wasm-bindgen-backend";
          }
          {
            name = "wasm-bindgen-shared";
            packageId = "wasm-bindgen-shared";
          }
        ];
        features = {
          "extra-traits" = [ "syn/extra-traits" ];
          "spans" = [ "wasm-bindgen-backend/spans" ];
        };
        resolvedDefaultFeatures = [ "spans" ];
      };
      "wasm-bindgen-shared" = rec {
        crateName = "wasm-bindgen-shared";
        version = "0.2.93";
        edition = "2021";
        links = "wasm_bindgen";
        sha256 = "1104bny0hv40jfap3hp8jhs0q4ya244qcrvql39i38xlghq0lan6";
        libName = "wasm_bindgen_shared";
        authors = [
          "The wasm-bindgen Developers"
        ];

      };
      "wayland-backend" = rec {
        crateName = "wayland-backend";
        version = "0.3.7";
        edition = "2021";
        sha256 = "1xhnh0mn4cv0wmq3zcm0iic2sbhsz4qdra6kb58x8l51sz73ar85";
        libName = "wayland_backend";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "downcast-rs";
            packageId = "downcast-rs";
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.37";
            features = [
              "event"
              "fs"
              "net"
              "process"
            ];
          }
          {
            name = "scoped-tls";
            packageId = "scoped-tls";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            features = [
              "union"
              "const_generics"
              "const_new"
            ];
          }
          {
            name = "wayland-sys";
            packageId = "wayland-sys";
          }
        ];
        buildDependencies = [
          {
            name = "cc";
            packageId = "cc";
          }
        ];
        features = {
          "client_system" = [ "wayland-sys/client" ];
          "dlopen" = [ "wayland-sys/dlopen" ];
          "log" = [ "dep:log" ];
          "raw-window-handle" = [ "dep:raw-window-handle" ];
          "rwh_06" = [ "dep:rwh_06" ];
          "server_system" = [ "wayland-sys/server" ];
        };
        resolvedDefaultFeatures = [
          "client_system"
          "dlopen"
        ];
      };
      "wayland-client" = rec {
        crateName = "wayland-client";
        version = "0.31.6";
        edition = "2021";
        sha256 = "0bas1aym4ykzhz1kbsj38ijvf94nklfhq8jp43yz2pli4895vx73";
        libName = "wayland_client";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.37";
            features = [ "event" ];
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
          }
          {
            name = "wayland-scanner";
            packageId = "wayland-scanner";
          }
        ];
        features = {
          "log" = [ "dep:log" ];
        };
      };
      "wayland-csd-frame" = rec {
        crateName = "wayland-csd-frame";
        version = "0.3.0";
        edition = "2021";
        sha256 = "0zjcmcqprfzx57hlm741n89ssp4sha5yh5cnmbk2agflvclm0p32";
        libName = "wayland_csd_frame";
        authors = [
          "Kirill Chibisov <contact@kchibisov.com>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "cursor-icon";
            packageId = "cursor-icon";
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
            usesDefaultFeatures = false;
          }
        ];

      };
      "wayland-cursor" = rec {
        crateName = "wayland-cursor";
        version = "0.31.6";
        edition = "2021";
        sha256 = "1jrpbnknvnplq0bd6izwb1pndw78a71a0a0d7f98av77crz6k51s";
        libName = "wayland_cursor";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "rustix";
            packageId = "rustix 0.38.37";
            features = [ "shm" ];
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
          }
          {
            name = "xcursor";
            packageId = "xcursor";
          }
        ];

      };
      "wayland-protocols 0.31.2" = rec {
        crateName = "wayland-protocols";
        version = "0.31.2";
        edition = "2021";
        sha256 = "1x310l1p6p3p3l76nl1l2yava9408dy77s605917zadlp1jz70cg";
        libName = "wayland_protocols";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            optional = true;
          }
          {
            name = "wayland-scanner";
            packageId = "wayland-scanner";
          }
        ];
        features = {
          "client" = [ "wayland-client" ];
          "server" = [ "wayland-server" ];
          "wayland-client" = [ "dep:wayland-client" ];
          "wayland-server" = [ "dep:wayland-server" ];
        };
        resolvedDefaultFeatures = [
          "client"
          "staging"
          "unstable"
          "wayland-client"
        ];
      };
      "wayland-protocols 0.32.4" = rec {
        crateName = "wayland-protocols";
        version = "0.32.4";
        edition = "2021";
        sha256 = "1q3x0n0pv87v4l6yj8yrbzkhmjz4biajcl52faw0n179gbbmamrb";
        libName = "wayland_protocols";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            optional = true;
          }
          {
            name = "wayland-scanner";
            packageId = "wayland-scanner";
          }
        ];
        features = {
          "client" = [ "wayland-client" ];
          "server" = [ "wayland-server" ];
          "wayland-client" = [ "dep:wayland-client" ];
          "wayland-server" = [ "dep:wayland-server" ];
        };
        resolvedDefaultFeatures = [
          "client"
          "staging"
          "unstable"
          "wayland-client"
        ];
      };
      "wayland-protocols-plasma" = rec {
        crateName = "wayland-protocols-plasma";
        version = "0.2.0";
        edition = "2018";
        sha256 = "0yglbxd4ka8284k0j0ssh9hf6wd9qp2n0s2qrsdymyaz258kb013";
        libName = "wayland_protocols_plasma";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            optional = true;
          }
          {
            name = "wayland-protocols";
            packageId = "wayland-protocols 0.31.2";
          }
          {
            name = "wayland-scanner";
            packageId = "wayland-scanner";
          }
        ];
        features = {
          "client" = [
            "wayland-client"
            "wayland-protocols/client"
          ];
          "server" = [
            "wayland-server"
            "wayland-protocols/server"
          ];
          "wayland-client" = [ "dep:wayland-client" ];
          "wayland-server" = [ "dep:wayland-server" ];
        };
        resolvedDefaultFeatures = [
          "client"
          "wayland-client"
        ];
      };
      "wayland-protocols-wlr 0.2.0" = rec {
        crateName = "wayland-protocols-wlr";
        version = "0.2.0";
        edition = "2018";
        sha256 = "1mjww9psk2nc5hm2q4s3qas30rbzfg1sb6qgw518fbbcdfvn27xd";
        libName = "wayland_protocols_wlr";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            optional = true;
          }
          {
            name = "wayland-protocols";
            packageId = "wayland-protocols 0.31.2";
          }
          {
            name = "wayland-scanner";
            packageId = "wayland-scanner";
          }
        ];
        features = {
          "client" = [
            "wayland-client"
            "wayland-protocols/client"
          ];
          "server" = [
            "wayland-server"
            "wayland-protocols/server"
          ];
          "wayland-client" = [ "dep:wayland-client" ];
          "wayland-server" = [ "dep:wayland-server" ];
        };
        resolvedDefaultFeatures = [
          "client"
          "wayland-client"
        ];
      };
      "wayland-protocols-wlr 0.3.4" = rec {
        crateName = "wayland-protocols-wlr";
        version = "0.3.4";
        edition = "2021";
        sha256 = "02ciz2cvcnhpg9phjwbv0zhky7m1la3gdy1dg4pwmlxis5gppn6s";
        libName = "wayland_protocols_wlr";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            optional = true;
          }
          {
            name = "wayland-protocols";
            packageId = "wayland-protocols 0.32.4";
          }
          {
            name = "wayland-scanner";
            packageId = "wayland-scanner";
          }
        ];
        features = {
          "client" = [
            "wayland-client"
            "wayland-protocols/client"
          ];
          "server" = [
            "wayland-server"
            "wayland-protocols/server"
          ];
          "wayland-client" = [ "dep:wayland-client" ];
          "wayland-server" = [ "dep:wayland-server" ];
        };
        resolvedDefaultFeatures = [
          "client"
          "wayland-client"
        ];
      };
      "wayland-scanner" = rec {
        crateName = "wayland-scanner";
        version = "0.31.5";
        edition = "2021";
        sha256 = "1hv16shy6j32hi9i0r54pyk5pw3q7qfpkffmwchi3z75n80j0zsr";
        procMacro = true;
        libName = "wayland_scanner";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quick-xml";
            packageId = "quick-xml";
          }
          {
            name = "quote";
            packageId = "quote";
          }
        ];

      };
      "wayland-sys" = rec {
        crateName = "wayland-sys";
        version = "0.31.5";
        edition = "2021";
        sha256 = "02cyl94ydazgjdjf7asm2phni8h62j4cg4pwr6sy7lwfiq6sra7g";
        libName = "wayland_sys";
        authors = [
          "Elinor Berger <elinor@safaradeg.net>"
        ];
        dependencies = [
          {
            name = "dlib";
            packageId = "dlib";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];
        features = {
          "cursor" = [ "client" ];
          "dlopen" = [ "once_cell" ];
          "egl" = [ "client" ];
          "libc" = [ "dep:libc" ];
          "memoffset" = [ "dep:memoffset" ];
          "once_cell" = [ "dep:once_cell" ];
          "server" = [
            "libc"
            "memoffset"
          ];
        };
        resolvedDefaultFeatures = [
          "client"
          "dlopen"
          "egl"
          "once_cell"
        ];
      };
      "web-sys" = rec {
        crateName = "web-sys";
        version = "0.3.70";
        edition = "2021";
        sha256 = "1h1jspkqnrx1iybwhwhc3qq8c8fn4hy5jcf0wxjry4mxv6pymz96";
        libName = "web_sys";
        authors = [
          "The wasm-bindgen Developers"
        ];
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
          }
        ];
        features = {
          "AbortSignal" = [ "EventTarget" ];
          "AnalyserNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "Animation" = [ "EventTarget" ];
          "AnimationEvent" = [ "Event" ];
          "AnimationPlaybackEvent" = [ "Event" ];
          "Attr" = [
            "EventTarget"
            "Node"
          ];
          "AudioBufferSourceNode" = [
            "AudioNode"
            "AudioScheduledSourceNode"
            "EventTarget"
          ];
          "AudioContext" = [
            "BaseAudioContext"
            "EventTarget"
          ];
          "AudioDestinationNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "AudioNode" = [ "EventTarget" ];
          "AudioProcessingEvent" = [ "Event" ];
          "AudioScheduledSourceNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "AudioStreamTrack" = [
            "EventTarget"
            "MediaStreamTrack"
          ];
          "AudioTrackList" = [ "EventTarget" ];
          "AudioWorklet" = [ "Worklet" ];
          "AudioWorkletGlobalScope" = [ "WorkletGlobalScope" ];
          "AudioWorkletNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "AuthenticatorAssertionResponse" = [ "AuthenticatorResponse" ];
          "AuthenticatorAttestationResponse" = [ "AuthenticatorResponse" ];
          "BaseAudioContext" = [ "EventTarget" ];
          "BatteryManager" = [ "EventTarget" ];
          "BeforeUnloadEvent" = [ "Event" ];
          "BiquadFilterNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "BlobEvent" = [ "Event" ];
          "Bluetooth" = [ "EventTarget" ];
          "BluetoothAdvertisingEvent" = [ "Event" ];
          "BluetoothDevice" = [ "EventTarget" ];
          "BluetoothPermissionResult" = [
            "EventTarget"
            "PermissionStatus"
          ];
          "BluetoothRemoteGattCharacteristic" = [ "EventTarget" ];
          "BluetoothRemoteGattService" = [ "EventTarget" ];
          "BroadcastChannel" = [ "EventTarget" ];
          "CanvasCaptureMediaStream" = [
            "EventTarget"
            "MediaStream"
          ];
          "CanvasCaptureMediaStreamTrack" = [
            "EventTarget"
            "MediaStreamTrack"
          ];
          "CdataSection" = [
            "CharacterData"
            "EventTarget"
            "Node"
            "Text"
          ];
          "ChannelMergerNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "ChannelSplitterNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "CharacterData" = [
            "EventTarget"
            "Node"
          ];
          "ChromeWorker" = [
            "EventTarget"
            "Worker"
          ];
          "Clipboard" = [ "EventTarget" ];
          "ClipboardEvent" = [ "Event" ];
          "CloseEvent" = [ "Event" ];
          "Comment" = [
            "CharacterData"
            "EventTarget"
            "Node"
          ];
          "CompositionEvent" = [
            "Event"
            "UiEvent"
          ];
          "ConstantSourceNode" = [
            "AudioNode"
            "AudioScheduledSourceNode"
            "EventTarget"
          ];
          "ConvolverNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "CssAnimation" = [
            "Animation"
            "EventTarget"
          ];
          "CssConditionRule" = [
            "CssGroupingRule"
            "CssRule"
          ];
          "CssCounterStyleRule" = [ "CssRule" ];
          "CssFontFaceRule" = [ "CssRule" ];
          "CssFontFeatureValuesRule" = [ "CssRule" ];
          "CssGroupingRule" = [ "CssRule" ];
          "CssImportRule" = [ "CssRule" ];
          "CssKeyframeRule" = [ "CssRule" ];
          "CssKeyframesRule" = [ "CssRule" ];
          "CssMediaRule" = [
            "CssConditionRule"
            "CssGroupingRule"
            "CssRule"
          ];
          "CssNamespaceRule" = [ "CssRule" ];
          "CssPageRule" = [ "CssRule" ];
          "CssStyleRule" = [ "CssRule" ];
          "CssStyleSheet" = [ "StyleSheet" ];
          "CssSupportsRule" = [
            "CssConditionRule"
            "CssGroupingRule"
            "CssRule"
          ];
          "CssTransition" = [
            "Animation"
            "EventTarget"
          ];
          "CustomEvent" = [ "Event" ];
          "DedicatedWorkerGlobalScope" = [
            "EventTarget"
            "WorkerGlobalScope"
          ];
          "DelayNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "DeviceLightEvent" = [ "Event" ];
          "DeviceMotionEvent" = [ "Event" ];
          "DeviceOrientationEvent" = [ "Event" ];
          "DeviceProximityEvent" = [ "Event" ];
          "Document" = [
            "EventTarget"
            "Node"
          ];
          "DocumentFragment" = [
            "EventTarget"
            "Node"
          ];
          "DocumentTimeline" = [ "AnimationTimeline" ];
          "DocumentType" = [
            "EventTarget"
            "Node"
          ];
          "DomMatrix" = [ "DomMatrixReadOnly" ];
          "DomPoint" = [ "DomPointReadOnly" ];
          "DomRect" = [ "DomRectReadOnly" ];
          "DomRequest" = [ "EventTarget" ];
          "DragEvent" = [
            "Event"
            "MouseEvent"
            "UiEvent"
          ];
          "DynamicsCompressorNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "Element" = [
            "EventTarget"
            "Node"
          ];
          "ErrorEvent" = [ "Event" ];
          "EventSource" = [ "EventTarget" ];
          "ExtendableEvent" = [ "Event" ];
          "ExtendableMessageEvent" = [
            "Event"
            "ExtendableEvent"
          ];
          "FetchEvent" = [
            "Event"
            "ExtendableEvent"
          ];
          "FetchObserver" = [ "EventTarget" ];
          "File" = [ "Blob" ];
          "FileReader" = [ "EventTarget" ];
          "FileSystemDirectoryEntry" = [ "FileSystemEntry" ];
          "FileSystemDirectoryHandle" = [ "FileSystemHandle" ];
          "FileSystemFileEntry" = [ "FileSystemEntry" ];
          "FileSystemFileHandle" = [ "FileSystemHandle" ];
          "FileSystemWritableFileStream" = [ "WritableStream" ];
          "FocusEvent" = [
            "Event"
            "UiEvent"
          ];
          "FontFaceSet" = [ "EventTarget" ];
          "FontFaceSetLoadEvent" = [ "Event" ];
          "GainNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "GamepadAxisMoveEvent" = [
            "Event"
            "GamepadEvent"
          ];
          "GamepadButtonEvent" = [
            "Event"
            "GamepadEvent"
          ];
          "GamepadEvent" = [ "Event" ];
          "GpuDevice" = [ "EventTarget" ];
          "GpuInternalError" = [ "GpuError" ];
          "GpuOutOfMemoryError" = [ "GpuError" ];
          "GpuPipelineError" = [ "DomException" ];
          "GpuUncapturedErrorEvent" = [ "Event" ];
          "GpuValidationError" = [ "GpuError" ];
          "HashChangeEvent" = [ "Event" ];
          "Hid" = [ "EventTarget" ];
          "HidConnectionEvent" = [ "Event" ];
          "HidDevice" = [ "EventTarget" ];
          "HidInputReportEvent" = [ "Event" ];
          "HtmlAnchorElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlAreaElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlAudioElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "HtmlMediaElement"
            "Node"
          ];
          "HtmlBaseElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlBodyElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlBrElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlButtonElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlCanvasElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlDListElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlDataElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlDataListElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlDetailsElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlDialogElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlDirectoryElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlDivElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlDocument" = [
            "Document"
            "EventTarget"
            "Node"
          ];
          "HtmlElement" = [
            "Element"
            "EventTarget"
            "Node"
          ];
          "HtmlEmbedElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlFieldSetElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlFontElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlFormControlsCollection" = [ "HtmlCollection" ];
          "HtmlFormElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlFrameElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlFrameSetElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlHeadElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlHeadingElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlHrElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlHtmlElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlIFrameElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlImageElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlInputElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlLabelElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlLegendElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlLiElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlLinkElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlMapElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlMediaElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlMenuElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlMenuItemElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlMetaElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlMeterElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlModElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlOListElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlObjectElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlOptGroupElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlOptionElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlOptionsCollection" = [ "HtmlCollection" ];
          "HtmlOutputElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlParagraphElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlParamElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlPictureElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlPreElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlProgressElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlQuoteElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlScriptElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlSelectElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlSlotElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlSourceElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlSpanElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlStyleElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlTableCaptionElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlTableCellElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlTableColElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlTableElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlTableRowElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlTableSectionElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlTemplateElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlTextAreaElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlTimeElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlTitleElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlTrackElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlUListElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlUnknownElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "Node"
          ];
          "HtmlVideoElement" = [
            "Element"
            "EventTarget"
            "HtmlElement"
            "HtmlMediaElement"
            "Node"
          ];
          "IdbCursorWithValue" = [ "IdbCursor" ];
          "IdbDatabase" = [ "EventTarget" ];
          "IdbFileHandle" = [ "EventTarget" ];
          "IdbFileRequest" = [
            "DomRequest"
            "EventTarget"
          ];
          "IdbLocaleAwareKeyRange" = [ "IdbKeyRange" ];
          "IdbMutableFile" = [ "EventTarget" ];
          "IdbOpenDbRequest" = [
            "EventTarget"
            "IdbRequest"
          ];
          "IdbRequest" = [ "EventTarget" ];
          "IdbTransaction" = [ "EventTarget" ];
          "IdbVersionChangeEvent" = [ "Event" ];
          "IirFilterNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "ImageCaptureErrorEvent" = [ "Event" ];
          "ImageTrack" = [ "EventTarget" ];
          "InputDeviceInfo" = [ "MediaDeviceInfo" ];
          "InputEvent" = [
            "Event"
            "UiEvent"
          ];
          "KeyboardEvent" = [
            "Event"
            "UiEvent"
          ];
          "KeyframeEffect" = [ "AnimationEffect" ];
          "LocalMediaStream" = [
            "EventTarget"
            "MediaStream"
          ];
          "MediaDevices" = [ "EventTarget" ];
          "MediaElementAudioSourceNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "MediaEncryptedEvent" = [ "Event" ];
          "MediaKeyError" = [ "Event" ];
          "MediaKeyMessageEvent" = [ "Event" ];
          "MediaKeySession" = [ "EventTarget" ];
          "MediaQueryList" = [ "EventTarget" ];
          "MediaQueryListEvent" = [ "Event" ];
          "MediaRecorder" = [ "EventTarget" ];
          "MediaRecorderErrorEvent" = [ "Event" ];
          "MediaSource" = [ "EventTarget" ];
          "MediaStream" = [ "EventTarget" ];
          "MediaStreamAudioDestinationNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "MediaStreamAudioSourceNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "MediaStreamEvent" = [ "Event" ];
          "MediaStreamTrack" = [ "EventTarget" ];
          "MediaStreamTrackEvent" = [ "Event" ];
          "MediaStreamTrackGenerator" = [
            "EventTarget"
            "MediaStreamTrack"
          ];
          "MessageEvent" = [ "Event" ];
          "MessagePort" = [ "EventTarget" ];
          "MidiAccess" = [ "EventTarget" ];
          "MidiConnectionEvent" = [ "Event" ];
          "MidiInput" = [
            "EventTarget"
            "MidiPort"
          ];
          "MidiMessageEvent" = [ "Event" ];
          "MidiOutput" = [
            "EventTarget"
            "MidiPort"
          ];
          "MidiPort" = [ "EventTarget" ];
          "MouseEvent" = [
            "Event"
            "UiEvent"
          ];
          "MouseScrollEvent" = [
            "Event"
            "MouseEvent"
            "UiEvent"
          ];
          "MutationEvent" = [ "Event" ];
          "NetworkInformation" = [ "EventTarget" ];
          "Node" = [ "EventTarget" ];
          "Notification" = [ "EventTarget" ];
          "NotificationEvent" = [
            "Event"
            "ExtendableEvent"
          ];
          "OfflineAudioCompletionEvent" = [ "Event" ];
          "OfflineAudioContext" = [
            "BaseAudioContext"
            "EventTarget"
          ];
          "OfflineResourceList" = [ "EventTarget" ];
          "OffscreenCanvas" = [ "EventTarget" ];
          "OscillatorNode" = [
            "AudioNode"
            "AudioScheduledSourceNode"
            "EventTarget"
          ];
          "PageTransitionEvent" = [ "Event" ];
          "PaintWorkletGlobalScope" = [ "WorkletGlobalScope" ];
          "PannerNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "PaymentMethodChangeEvent" = [
            "Event"
            "PaymentRequestUpdateEvent"
          ];
          "PaymentRequestUpdateEvent" = [ "Event" ];
          "Performance" = [ "EventTarget" ];
          "PerformanceMark" = [ "PerformanceEntry" ];
          "PerformanceMeasure" = [ "PerformanceEntry" ];
          "PerformanceNavigationTiming" = [
            "PerformanceEntry"
            "PerformanceResourceTiming"
          ];
          "PerformanceResourceTiming" = [ "PerformanceEntry" ];
          "PermissionStatus" = [ "EventTarget" ];
          "PointerEvent" = [
            "Event"
            "MouseEvent"
            "UiEvent"
          ];
          "PopStateEvent" = [ "Event" ];
          "PopupBlockedEvent" = [ "Event" ];
          "PresentationAvailability" = [ "EventTarget" ];
          "PresentationConnection" = [ "EventTarget" ];
          "PresentationConnectionAvailableEvent" = [ "Event" ];
          "PresentationConnectionCloseEvent" = [ "Event" ];
          "PresentationConnectionList" = [ "EventTarget" ];
          "PresentationRequest" = [ "EventTarget" ];
          "ProcessingInstruction" = [
            "CharacterData"
            "EventTarget"
            "Node"
          ];
          "ProgressEvent" = [ "Event" ];
          "PromiseRejectionEvent" = [ "Event" ];
          "PublicKeyCredential" = [ "Credential" ];
          "PushEvent" = [
            "Event"
            "ExtendableEvent"
          ];
          "RadioNodeList" = [ "NodeList" ];
          "RtcDataChannel" = [ "EventTarget" ];
          "RtcDataChannelEvent" = [ "Event" ];
          "RtcPeerConnection" = [ "EventTarget" ];
          "RtcPeerConnectionIceErrorEvent" = [ "Event" ];
          "RtcPeerConnectionIceEvent" = [ "Event" ];
          "RtcTrackEvent" = [ "Event" ];
          "RtcdtmfSender" = [ "EventTarget" ];
          "RtcdtmfToneChangeEvent" = [ "Event" ];
          "Screen" = [ "EventTarget" ];
          "ScreenOrientation" = [ "EventTarget" ];
          "ScriptProcessorNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "ScrollAreaEvent" = [
            "Event"
            "UiEvent"
          ];
          "SecurityPolicyViolationEvent" = [ "Event" ];
          "Serial" = [ "EventTarget" ];
          "SerialPort" = [ "EventTarget" ];
          "ServiceWorker" = [ "EventTarget" ];
          "ServiceWorkerContainer" = [ "EventTarget" ];
          "ServiceWorkerGlobalScope" = [
            "EventTarget"
            "WorkerGlobalScope"
          ];
          "ServiceWorkerRegistration" = [ "EventTarget" ];
          "ShadowRoot" = [
            "DocumentFragment"
            "EventTarget"
            "Node"
          ];
          "SharedWorker" = [ "EventTarget" ];
          "SharedWorkerGlobalScope" = [
            "EventTarget"
            "WorkerGlobalScope"
          ];
          "SourceBuffer" = [ "EventTarget" ];
          "SourceBufferList" = [ "EventTarget" ];
          "SpeechRecognition" = [ "EventTarget" ];
          "SpeechRecognitionError" = [ "Event" ];
          "SpeechRecognitionEvent" = [ "Event" ];
          "SpeechSynthesis" = [ "EventTarget" ];
          "SpeechSynthesisErrorEvent" = [
            "Event"
            "SpeechSynthesisEvent"
          ];
          "SpeechSynthesisEvent" = [ "Event" ];
          "SpeechSynthesisUtterance" = [ "EventTarget" ];
          "StereoPannerNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "StorageEvent" = [ "Event" ];
          "SubmitEvent" = [ "Event" ];
          "SvgAnimateElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgAnimationElement"
            "SvgElement"
          ];
          "SvgAnimateMotionElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgAnimationElement"
            "SvgElement"
          ];
          "SvgAnimateTransformElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgAnimationElement"
            "SvgElement"
          ];
          "SvgAnimationElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgCircleElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGeometryElement"
            "SvgGraphicsElement"
          ];
          "SvgClipPathElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgComponentTransferFunctionElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgDefsElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
          ];
          "SvgDescElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgElement" = [
            "Element"
            "EventTarget"
            "Node"
          ];
          "SvgEllipseElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGeometryElement"
            "SvgGraphicsElement"
          ];
          "SvgFilterElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgForeignObjectElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
          ];
          "SvgGeometryElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
          ];
          "SvgGradientElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgGraphicsElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgImageElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
          ];
          "SvgLineElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGeometryElement"
            "SvgGraphicsElement"
          ];
          "SvgLinearGradientElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGradientElement"
          ];
          "SvgMarkerElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgMaskElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgMetadataElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgPathElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGeometryElement"
            "SvgGraphicsElement"
          ];
          "SvgPathSegArcAbs" = [ "SvgPathSeg" ];
          "SvgPathSegArcRel" = [ "SvgPathSeg" ];
          "SvgPathSegClosePath" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicSmoothAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoCubicSmoothRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticRel" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticSmoothAbs" = [ "SvgPathSeg" ];
          "SvgPathSegCurvetoQuadraticSmoothRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoHorizontalAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoHorizontalRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoRel" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoVerticalAbs" = [ "SvgPathSeg" ];
          "SvgPathSegLinetoVerticalRel" = [ "SvgPathSeg" ];
          "SvgPathSegMovetoAbs" = [ "SvgPathSeg" ];
          "SvgPathSegMovetoRel" = [ "SvgPathSeg" ];
          "SvgPatternElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgPolygonElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGeometryElement"
            "SvgGraphicsElement"
          ];
          "SvgPolylineElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGeometryElement"
            "SvgGraphicsElement"
          ];
          "SvgRadialGradientElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGradientElement"
          ];
          "SvgRectElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGeometryElement"
            "SvgGraphicsElement"
          ];
          "SvgScriptElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgSetElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgAnimationElement"
            "SvgElement"
          ];
          "SvgStopElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgStyleElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgSwitchElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
          ];
          "SvgSymbolElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgTextContentElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
          ];
          "SvgTextElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
            "SvgTextContentElement"
            "SvgTextPositioningElement"
          ];
          "SvgTextPathElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
            "SvgTextContentElement"
          ];
          "SvgTextPositioningElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
            "SvgTextContentElement"
          ];
          "SvgTitleElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgUseElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
          ];
          "SvgViewElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgaElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
          ];
          "SvgfeBlendElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeColorMatrixElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeComponentTransferElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeCompositeElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeConvolveMatrixElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeDiffuseLightingElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeDisplacementMapElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeDistantLightElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeDropShadowElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeFloodElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeFuncAElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgComponentTransferFunctionElement"
            "SvgElement"
          ];
          "SvgfeFuncBElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgComponentTransferFunctionElement"
            "SvgElement"
          ];
          "SvgfeFuncGElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgComponentTransferFunctionElement"
            "SvgElement"
          ];
          "SvgfeFuncRElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgComponentTransferFunctionElement"
            "SvgElement"
          ];
          "SvgfeGaussianBlurElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeImageElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeMergeElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeMergeNodeElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeMorphologyElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeOffsetElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfePointLightElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeSpecularLightingElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeSpotLightElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeTileElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgfeTurbulenceElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvggElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
          ];
          "SvgmPathElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
          ];
          "SvgsvgElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
          ];
          "SvgtSpanElement" = [
            "Element"
            "EventTarget"
            "Node"
            "SvgElement"
            "SvgGraphicsElement"
            "SvgTextContentElement"
            "SvgTextPositioningElement"
          ];
          "TaskController" = [ "AbortController" ];
          "TaskPriorityChangeEvent" = [ "Event" ];
          "TaskSignal" = [
            "AbortSignal"
            "EventTarget"
          ];
          "TcpServerSocket" = [ "EventTarget" ];
          "TcpServerSocketEvent" = [ "Event" ];
          "TcpSocket" = [ "EventTarget" ];
          "TcpSocketErrorEvent" = [ "Event" ];
          "TcpSocketEvent" = [ "Event" ];
          "Text" = [
            "CharacterData"
            "EventTarget"
            "Node"
          ];
          "TextTrack" = [ "EventTarget" ];
          "TextTrackCue" = [ "EventTarget" ];
          "TextTrackList" = [ "EventTarget" ];
          "TimeEvent" = [ "Event" ];
          "ToggleEvent" = [ "Event" ];
          "TouchEvent" = [
            "Event"
            "UiEvent"
          ];
          "TrackEvent" = [ "Event" ];
          "TransitionEvent" = [ "Event" ];
          "UiEvent" = [ "Event" ];
          "Usb" = [ "EventTarget" ];
          "UsbConnectionEvent" = [ "Event" ];
          "UsbPermissionResult" = [
            "EventTarget"
            "PermissionStatus"
          ];
          "UserProximityEvent" = [ "Event" ];
          "ValueEvent" = [ "Event" ];
          "VideoStreamTrack" = [
            "EventTarget"
            "MediaStreamTrack"
          ];
          "VideoTrackList" = [ "EventTarget" ];
          "VisualViewport" = [ "EventTarget" ];
          "VrDisplay" = [ "EventTarget" ];
          "VttCue" = [
            "EventTarget"
            "TextTrackCue"
          ];
          "WakeLockSentinel" = [ "EventTarget" ];
          "WaveShaperNode" = [
            "AudioNode"
            "EventTarget"
          ];
          "WebGlContextEvent" = [ "Event" ];
          "WebKitCssMatrix" = [
            "DomMatrix"
            "DomMatrixReadOnly"
          ];
          "WebSocket" = [ "EventTarget" ];
          "WebTransportError" = [ "DomException" ];
          "WebTransportReceiveStream" = [ "ReadableStream" ];
          "WebTransportSendStream" = [ "WritableStream" ];
          "WheelEvent" = [
            "Event"
            "MouseEvent"
            "UiEvent"
          ];
          "Window" = [ "EventTarget" ];
          "WindowClient" = [ "Client" ];
          "Worker" = [ "EventTarget" ];
          "WorkerDebuggerGlobalScope" = [ "EventTarget" ];
          "WorkerGlobalScope" = [ "EventTarget" ];
          "XmlDocument" = [
            "Document"
            "EventTarget"
            "Node"
          ];
          "XmlHttpRequest" = [
            "EventTarget"
            "XmlHttpRequestEventTarget"
          ];
          "XmlHttpRequestEventTarget" = [ "EventTarget" ];
          "XmlHttpRequestUpload" = [
            "EventTarget"
            "XmlHttpRequestEventTarget"
          ];
          "XrBoundedReferenceSpace" = [
            "EventTarget"
            "XrReferenceSpace"
            "XrSpace"
          ];
          "XrInputSourceEvent" = [ "Event" ];
          "XrInputSourcesChangeEvent" = [ "Event" ];
          "XrJointPose" = [ "XrPose" ];
          "XrJointSpace" = [
            "EventTarget"
            "XrSpace"
          ];
          "XrLayer" = [ "EventTarget" ];
          "XrPermissionStatus" = [
            "EventTarget"
            "PermissionStatus"
          ];
          "XrReferenceSpace" = [
            "EventTarget"
            "XrSpace"
          ];
          "XrReferenceSpaceEvent" = [ "Event" ];
          "XrSession" = [ "EventTarget" ];
          "XrSessionEvent" = [ "Event" ];
          "XrSpace" = [ "EventTarget" ];
          "XrSystem" = [ "EventTarget" ];
          "XrViewerPose" = [ "XrPose" ];
          "XrWebGlLayer" = [
            "EventTarget"
            "XrLayer"
          ];
        };
        resolvedDefaultFeatures = [
          "AbortController"
          "AbortSignal"
          "AngleInstancedArrays"
          "BinaryType"
          "Blob"
          "BlobPropertyBag"
          "Clipboard"
          "ClipboardEvent"
          "CompositionEvent"
          "CssStyleDeclaration"
          "DataTransfer"
          "DataTransferItem"
          "DataTransferItemList"
          "Document"
          "DomRect"
          "DomRectReadOnly"
          "DragEvent"
          "Element"
          "Event"
          "EventListener"
          "EventTarget"
          "ExtBlendMinmax"
          "ExtColorBufferFloat"
          "ExtColorBufferHalfFloat"
          "ExtDisjointTimerQuery"
          "ExtFragDepth"
          "ExtSRgb"
          "ExtShaderTextureLod"
          "ExtTextureFilterAnisotropic"
          "File"
          "FileList"
          "FileReader"
          "FocusEvent"
          "HtmlAnchorElement"
          "HtmlButtonElement"
          "HtmlCanvasElement"
          "HtmlElement"
          "HtmlImageElement"
          "HtmlInputElement"
          "HtmlMediaElement"
          "HtmlVideoElement"
          "ImageBitmap"
          "ImageBitmapRenderingContext"
          "InputEvent"
          "IntersectionObserver"
          "IntersectionObserverEntry"
          "KeyboardEvent"
          "Location"
          "MediaQueryList"
          "MediaQueryListEvent"
          "MessageChannel"
          "MessageEvent"
          "MessagePort"
          "MouseEvent"
          "Navigator"
          "Node"
          "NodeList"
          "OesElementIndexUint"
          "OesStandardDerivatives"
          "OesTextureFloat"
          "OesTextureFloatLinear"
          "OesTextureHalfFloat"
          "OesTextureHalfFloatLinear"
          "OesVertexArrayObject"
          "OffscreenCanvas"
          "OvrMultiview2"
          "PageTransitionEvent"
          "Performance"
          "PointerEvent"
          "ResizeObserver"
          "ResizeObserverBoxOptions"
          "ResizeObserverEntry"
          "ResizeObserverOptions"
          "ResizeObserverSize"
          "SpeechSynthesis"
          "SpeechSynthesisUtterance"
          "Storage"
          "Touch"
          "TouchEvent"
          "TouchList"
          "UiEvent"
          "Url"
          "VideoFrame"
          "VisibilityState"
          "WebGl2RenderingContext"
          "WebGlActiveInfo"
          "WebGlBuffer"
          "WebGlFramebuffer"
          "WebGlProgram"
          "WebGlQuery"
          "WebGlRenderbuffer"
          "WebGlRenderingContext"
          "WebGlSampler"
          "WebGlShader"
          "WebGlSync"
          "WebGlTexture"
          "WebGlTransformFeedback"
          "WebGlUniformLocation"
          "WebGlVertexArrayObject"
          "WebglColorBufferFloat"
          "WebglCompressedTextureAstc"
          "WebglCompressedTextureEtc"
          "WebglCompressedTextureEtc1"
          "WebglCompressedTexturePvrtc"
          "WebglCompressedTextureS3tc"
          "WebglCompressedTextureS3tcSrgb"
          "WebglDebugRendererInfo"
          "WebglDebugShaders"
          "WebglDepthTexture"
          "WebglDrawBuffers"
          "WebglLoseContext"
          "WheelEvent"
          "Window"
          "Worker"
          "WorkerGlobalScope"
          "WorkerNavigator"
          "console"
        ];
      };
      "web-time" = rec {
        crateName = "web-time";
        version = "0.2.4";
        edition = "2021";
        sha256 = "1q6gk0nkwbfz30g1pz8g52mq00zjx7m5im36k3474aw73jdh8c5a";
        libName = "web_time";
        dependencies = [
          {
            name = "js-sys";
            packageId = "js-sys";
            target =
              { target, features }:
              (
                (builtins.elem "wasm" target."family")
                && (!(("emscripten" == target."os" or null) || ("wasi" == target."os" or null)))
              );
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (builtins.elem "wasm" target."family")
                && (!(("emscripten" == target."os" or null) || ("wasi" == target."os" or null)))
              );
          }
        ];

      };
      "webbrowser" = rec {
        crateName = "webbrowser";
        version = "1.0.2";
        edition = "2021";
        sha256 = "08z9z8ffyv3iaa5w8s75g7b3yrrhajkp2jmjwvgjvpn8kgxhfprf";
        authors = [
          "Amod Malviya @amodm"
        ];
        dependencies = [
          {
            name = "block2";
            packageId = "block2 0.5.1";
            target =
              { target, features }:
              (
                ("ios" == target."os" or null)
                || ("tvos" == target."os" or null)
                || ("visionos" == target."os" or null)
              );
          }
          {
            name = "core-foundation";
            packageId = "core-foundation 0.10.0";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "home";
            packageId = "home";
            target =
              { target, features }:
              (
                ("aix" == target."os" or null)
                || ("linux" == target."os" or null)
                || ("freebsd" == target."os" or null)
                || ("netbsd" == target."os" or null)
                || ("openbsd" == target."os" or null)
                || ("haiku" == target."os" or null)
                || ("illumos" == target."os" or null)
              );
          }
          {
            name = "jni";
            packageId = "jni";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "ndk-context";
            packageId = "ndk-context";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "objc2";
            packageId = "objc2 0.5.2";
            target =
              { target, features }:
              (
                ("ios" == target."os" or null)
                || ("tvos" == target."os" or null)
                || ("visionos" == target."os" or null)
              );
          }
          {
            name = "objc2-foundation";
            packageId = "objc2-foundation";
            target =
              { target, features }:
              (
                ("ios" == target."os" or null)
                || ("tvos" == target."os" or null)
                || ("visionos" == target."os" or null)
              );
            features = [
              "NSDictionary"
              "NSString"
              "NSURL"
            ];
          }
          {
            name = "url";
            packageId = "url";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [ "Window" ];
          }
        ];
        features = {
          "wasm-console" = [ "web-sys/console" ];
        };
      };
      "wgpu" = rec {
        crateName = "wgpu";
        version = "0.20.1";
        edition = "2021";
        sha256 = "0p1mika0wkjqrsp85p72lvgi6vz3pkf3z5yx4vymvdr1k5xprqwh";
        authors = [
          "gfx-rs developers"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
          }
          {
            name = "cfg-if";
            packageId = "cfg-if";
          }
          {
            name = "document-features";
            packageId = "document-features";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "profiling";
            packageId = "profiling";
            usesDefaultFeatures = false;
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle 0.6.2";
            features = [ "std" ];
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [
              "Document"
              "Navigator"
              "Node"
              "NodeList"
              "HtmlCanvasElement"
              "OffscreenCanvas"
              "ImageBitmap"
              "ImageBitmapRenderingContext"
              "Window"
              "WorkerGlobalScope"
              "WorkerNavigator"
              "Event"
              "EventTarget"
            ];
          }
          {
            name = "wgpu-core";
            packageId = "wgpu-core";
            rename = "wgc";
            optional = true;
            features = [ "raw-window-handle" ];
          }
          {
            name = "wgpu-core";
            packageId = "wgpu-core";
            rename = "wgc";
            target =
              { target, features }:
              (
                (target."unix" or false) && (!("ios" == target."os" or null)) && (!("macos" == target."os" or null))
              );
            features = [ "gles" ];
          }
          {
            name = "wgpu-core";
            packageId = "wgpu-core";
            rename = "wgc";
            target =
              { target, features }:
              ((!("wasm32" == target."arch" or null)) || ("emscripten" == target."os" or null));
            features = [ "raw-window-handle" ];
          }
          {
            name = "wgpu-core";
            packageId = "wgpu-core";
            rename = "wgc";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "wgpu-core";
            packageId = "wgpu-core";
            rename = "wgc";
            target =
              { target, features }:
              (
                (target."windows" or false)
                || (
                  (target."unix" or false)
                  && (!("emscripten" == target."os" or null))
                  && (!("ios" == target."os" or null))
                  && (!("macos" == target."os" or null))
                )
              );
            features = [ "vulkan" ];
          }
          {
            name = "wgpu-core";
            packageId = "wgpu-core";
            rename = "wgc";
            target = { target, features }: (target."windows" or false);
            features = [ "gles" ];
          }
          {
            name = "wgpu-hal";
            packageId = "wgpu-hal";
            rename = "hal";
            target =
              { target, features }:
              (
                (!("wasm32" == target."arch" or null))
                && (target."unix" or false)
                && (!("ios" == target."os" or null))
                && (!("macos" == target."os" or null))
              );
            features = [ "renderdoc" ];
          }
          {
            name = "wgpu-hal";
            packageId = "wgpu-hal";
            rename = "hal";
            target =
              { target, features }:
              ((!("wasm32" == target."arch" or null)) || ("emscripten" == target."os" or null));
          }
          {
            name = "wgpu-hal";
            packageId = "wgpu-hal";
            rename = "hal";
            optional = true;
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "wgpu-hal";
            packageId = "wgpu-hal";
            rename = "hal";
            target = { target, features }: (target."windows" or false);
            features = [
              "dxc_shader_compiler"
              "renderdoc"
              "windows_rs"
            ];
          }
          {
            name = "wgpu-types";
            packageId = "wgpu-types";
            rename = "wgt";
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases 0.1.1";
          }
        ];
        features = {
          "angle" = [ "wgc?/gles" ];
          "api_log_info" = [ "wgc/api_log_info" ];
          "default" = [
            "wgsl"
            "dx12"
            "metal"
            "webgpu"
          ];
          "dx12" = [ "wgc?/dx12" ];
          "fragile-send-sync-non-atomic-wasm" = [
            "hal/fragile-send-sync-non-atomic-wasm"
            "wgc/fragile-send-sync-non-atomic-wasm"
            "wgt/fragile-send-sync-non-atomic-wasm"
          ];
          "glsl" = [
            "naga/glsl-in"
            "wgc/glsl"
          ];
          "hal" = [ "dep:hal" ];
          "metal" = [ "wgc?/metal" ];
          "naga" = [ "dep:naga" ];
          "naga-ir" = [ "naga" ];
          "replay" = [
            "serde"
            "wgc/replay"
          ];
          "serde" = [
            "dep:serde"
            "wgc/serde"
          ];
          "spirv" = [
            "naga/spv-in"
            "wgc/spirv"
          ];
          "strict_asserts" = [
            "wgc?/strict_asserts"
            "wgt/strict_asserts"
          ];
          "trace" = [
            "serde"
            "wgc/trace"
          ];
          "vulkan-portability" = [ "wgc?/vulkan" ];
          "webgl" = [
            "hal"
            "wgc/gles"
          ];
          "webgpu" = [ "naga?/wgsl-out" ];
          "wgc" = [ "dep:wgc" ];
          "wgsl" = [ "wgc?/wgsl" ];
        };
        resolvedDefaultFeatures = [
          "fragile-send-sync-non-atomic-wasm"
          "hal"
          "wgc"
          "wgsl"
        ];
      };
      "wgpu-core" = rec {
        crateName = "wgpu-core";
        version = "0.21.1";
        edition = "2021";
        sha256 = "0fcx7ic11bqlld636hr93zd1apydj1mpa7ad8n57v1jvajmij26m";
        libName = "wgpu_core";
        authors = [
          "gfx-rs developers"
        ];
        dependencies = [
          {
            name = "arrayvec";
            packageId = "arrayvec";
          }
          {
            name = "bit-vec";
            packageId = "bit-vec";
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "codespan-reporting";
            packageId = "codespan-reporting";
          }
          {
            name = "document-features";
            packageId = "document-features";
          }
          {
            name = "indexmap";
            packageId = "indexmap";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "naga";
            packageId = "naga";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "profiling";
            packageId = "profiling";
            usesDefaultFeatures = false;
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle 0.6.2";
            optional = true;
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target =
              { target, features }:
              (("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null)));
            features = [
              "HtmlCanvasElement"
              "OffscreenCanvas"
            ];
          }
          {
            name = "wgpu-hal";
            packageId = "wgpu-hal";
            rename = "hal";
            usesDefaultFeatures = false;
          }
          {
            name = "wgpu-types";
            packageId = "wgpu-types";
            rename = "wgt";
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases 0.1.1";
          }
        ];
        features = {
          "default" = [ "link" ];
          "dx12" = [ "hal/dx12" ];
          "fragile-send-sync-non-atomic-wasm" = [
            "hal/fragile-send-sync-non-atomic-wasm"
            "wgt/fragile-send-sync-non-atomic-wasm"
          ];
          "gles" = [ "hal/gles" ];
          "glsl" = [ "naga/glsl-in" ];
          "link" = [ "hal/link" ];
          "metal" = [ "hal/metal" ];
          "raw-window-handle" = [ "dep:raw-window-handle" ];
          "renderdoc" = [ "hal/renderdoc" ];
          "replay" = [
            "serde"
            "naga/deserialize"
          ];
          "ron" = [ "dep:ron" ];
          "serde" = [
            "dep:serde"
            "wgt/serde"
            "arrayvec/serde"
          ];
          "spirv" = [
            "naga/spv-in"
            "dep:bytemuck"
          ];
          "strict_asserts" = [ "wgt/strict_asserts" ];
          "trace" = [
            "ron"
            "serde"
            "naga/serialize"
          ];
          "vulkan" = [ "hal/vulkan" ];
          "wgsl" = [ "naga/wgsl-in" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "fragile-send-sync-non-atomic-wasm"
          "gles"
          "link"
          "raw-window-handle"
          "vulkan"
          "wgsl"
        ];
      };
      "wgpu-hal" = rec {
        crateName = "wgpu-hal";
        version = "0.21.1";
        edition = "2021";
        sha256 = "08ijsszwnn54pi44akdh65i6yf47imwnbwf0zkrn8m99hw54jbhp";
        libName = "wgpu_hal";
        authors = [
          "gfx-rs developers"
        ];
        dependencies = [
          {
            name = "android_system_properties";
            packageId = "android_system_properties";
            optional = true;
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "arrayvec";
            packageId = "arrayvec";
          }
          {
            name = "ash";
            packageId = "ash";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "core-graphics-types";
            packageId = "core-graphics-types";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "glow";
            packageId = "glow";
            optional = true;
          }
          {
            name = "glutin_wgl_sys";
            packageId = "glutin_wgl_sys";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "gpu-alloc";
            packageId = "gpu-alloc";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "gpu-allocator";
            packageId = "gpu-allocator";
            optional = true;
            usesDefaultFeatures = false;
            target = { target, features }: (target."windows" or false);
            features = [
              "d3d12"
              "public-winapi"
            ];
          }
          {
            name = "gpu-descriptor";
            packageId = "gpu-descriptor";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "hassle-rs";
            packageId = "hassle-rs";
            optional = true;
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target =
              { target, features }:
              (("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null)));
          }
          {
            name = "khronos-egl";
            packageId = "khronos-egl";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "dynamic" ];
          }
          {
            name = "khronos-egl";
            packageId = "khronos-egl";
            target = { target, features }: ("emscripten" == target."os" or null);
            features = [
              "static"
              "no-pkg-config"
            ];
          }
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "libloading";
            packageId = "libloading 0.8.5";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "libloading";
            packageId = "libloading 0.8.5";
            optional = true;
            target = { target, features }: ("emscripten" == target."os" or null);
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "metal";
            packageId = "metal";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "naga";
            packageId = "naga";
          }
          {
            name = "ndk-sys";
            packageId = "ndk-sys";
            optional = true;
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "objc";
            packageId = "objc";
            target = { target, features }: (("macos" == target."os" or null) || ("ios" == target."os" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "parking_lot";
            packageId = "parking_lot";
          }
          {
            name = "profiling";
            packageId = "profiling";
            usesDefaultFeatures = false;
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle 0.6.2";
          }
          {
            name = "renderdoc-sys";
            packageId = "renderdoc-sys";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
          }
          {
            name = "rustc-hash";
            packageId = "rustc-hash";
          }
          {
            name = "smallvec";
            packageId = "smallvec";
            optional = true;
            target = { target, features }: (!("wasm32" == target."arch" or null));
            features = [ "union" ];
          }
          {
            name = "thiserror";
            packageId = "thiserror";
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target =
              { target, features }:
              (("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null)));
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target =
              { target, features }:
              (("wasm32" == target."arch" or null) && (!("emscripten" == target."os" or null)));
            features = [
              "Window"
              "HtmlCanvasElement"
              "WebGl2RenderingContext"
              "OffscreenCanvas"
            ];
          }
          {
            name = "wgpu-types";
            packageId = "wgpu-types";
            rename = "wgt";
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [
              "profileapi"
              "libloaderapi"
              "windef"
              "winuser"
              "dcomp"
            ];
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases 0.1.1";
          }
        ];
        devDependencies = [
          {
            name = "naga";
            packageId = "naga";
            features = [ "wgsl-in" ];
          }
        ];
        features = {
          "android_system_properties" = [ "dep:android_system_properties" ];
          "ash" = [ "dep:ash" ];
          "bit-set" = [ "dep:bit-set" ];
          "block" = [ "dep:block" ];
          "d3d12" = [ "dep:d3d12" ];
          "default" = [ "link" ];
          "dx12" = [
            "naga/hlsl-out"
            "d3d12"
            "bit-set"
            "libloading"
            "range-alloc"
            "winapi/std"
            "winapi/winbase"
            "winapi/d3d12"
            "winapi/d3d12shader"
            "winapi/d3d12sdklayers"
            "winapi/dxgi1_6"
          ];
          "dxc_shader_compiler" = [ "hassle-rs" ];
          "fragile-send-sync-non-atomic-wasm" = [ "wgt/fragile-send-sync-non-atomic-wasm" ];
          "gles" = [
            "naga/glsl-out"
            "glow"
            "glutin_wgl_sys"
            "khronos-egl"
            "libloading"
            "ndk-sys"
          ];
          "glow" = [ "dep:glow" ];
          "glutin_wgl_sys" = [ "dep:glutin_wgl_sys" ];
          "gpu-alloc" = [ "dep:gpu-alloc" ];
          "gpu-allocator" = [ "dep:gpu-allocator" ];
          "gpu-descriptor" = [ "dep:gpu-descriptor" ];
          "hassle-rs" = [ "dep:hassle-rs" ];
          "khronos-egl" = [ "dep:khronos-egl" ];
          "libloading" = [ "dep:libloading" ];
          "link" = [ "metal/link" ];
          "metal" = [
            "naga/msl-out"
            "block"
          ];
          "ndk-sys" = [ "dep:ndk-sys" ];
          "range-alloc" = [ "dep:range-alloc" ];
          "renderdoc" = [
            "libloading"
            "renderdoc-sys"
          ];
          "renderdoc-sys" = [ "dep:renderdoc-sys" ];
          "smallvec" = [ "dep:smallvec" ];
          "vulkan" = [
            "naga/spv-out"
            "ash"
            "gpu-alloc"
            "gpu-descriptor"
            "libloading"
            "smallvec"
            "android_system_properties"
          ];
          "windows_rs" = [ "gpu-allocator" ];
        };
        resolvedDefaultFeatures = [
          "android_system_properties"
          "ash"
          "default"
          "dxc_shader_compiler"
          "fragile-send-sync-non-atomic-wasm"
          "gles"
          "glow"
          "glutin_wgl_sys"
          "gpu-alloc"
          "gpu-allocator"
          "gpu-descriptor"
          "hassle-rs"
          "khronos-egl"
          "libloading"
          "link"
          "ndk-sys"
          "renderdoc"
          "renderdoc-sys"
          "smallvec"
          "vulkan"
          "windows_rs"
        ];
      };
      "wgpu-types" = rec {
        crateName = "wgpu-types";
        version = "0.20.0";
        edition = "2021";
        sha256 = "1vwkww5g0vmym7rxdqbn4362h9hjd56g6xq5d1d9azzzdfjdjlqk";
        libName = "wgpu_types";
        authors = [
          "gfx-rs developers"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: ("wasm32" == target."arch" or null);
            features = [
              "ImageBitmap"
              "HtmlVideoElement"
              "HtmlCanvasElement"
              "OffscreenCanvas"
            ];
          }
        ];
        features = {
          "serde" = [ "dep:serde" ];
        };
        resolvedDefaultFeatures = [ "fragile-send-sync-non-atomic-wasm" ];
      };
      "widestring" = rec {
        crateName = "widestring";
        version = "1.1.0";
        edition = "2021";
        sha256 = "048kxd6iykzi5la9nikpc5hvpp77hmjf1sw43sl3z2dcdrmx66bj";
        features = {
          "debugger_visualizer" = [ "alloc" ];
          "default" = [ "std" ];
          "std" = [ "alloc" ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "winapi" = rec {
        crateName = "winapi";
        version = "0.3.9";
        edition = "2015";
        sha256 = "06gl025x418lchw1wxj64ycr7gha83m44cjr5sarhynd9xkrm0sw";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi-i686-pc-windows-gnu";
            packageId = "winapi-i686-pc-windows-gnu";
            target = { target, features }: (target.name == "i686-pc-windows-gnu");
          }
          {
            name = "winapi-x86_64-pc-windows-gnu";
            packageId = "winapi-x86_64-pc-windows-gnu";
            target = { target, features }: (target.name == "x86_64-pc-windows-gnu");
          }
        ];
        features = {
          "debug" = [ "impl-debug" ];
        };
        resolvedDefaultFeatures = [
          "combaseapi"
          "consoleapi"
          "d3d11"
          "d3d12"
          "dcomp"
          "errhandlingapi"
          "fileapi"
          "handleapi"
          "impl-debug"
          "impl-default"
          "iphlpapi"
          "libloaderapi"
          "memoryapi"
          "minwinbase"
          "minwindef"
          "ntdef"
          "oleauto"
          "processthreadsapi"
          "profileapi"
          "sddl"
          "securitybaseapi"
          "std"
          "synchapi"
          "tcpmib"
          "unknwnbase"
          "winbase"
          "wincon"
          "windef"
          "winerror"
          "winnt"
          "winsock2"
          "winuser"
          "ws2def"
          "ws2ipdef"
          "ws2tcpip"
          "wtypes"
        ];
      };
      "winapi-i686-pc-windows-gnu" = rec {
        crateName = "winapi-i686-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "1dmpa6mvcvzz16zg6d5vrfy4bxgg541wxrcip7cnshi06v38ffxc";
        libName = "winapi_i686_pc_windows_gnu";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "winapi-util" = rec {
        crateName = "winapi-util";
        version = "0.1.9";
        edition = "2021";
        sha256 = "1fqhkcl9scd230cnfj8apfficpf5c9vhwnk4yy9xfc1sw69iq8ng";
        libName = "winapi_util";
        authors = [
          "Andrew Gallant <jamslam@gmail.com>"
        ];
        dependencies = [
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_Storage_FileSystem"
              "Win32_System_Console"
              "Win32_System_SystemInformation"
            ];
          }
        ];

      };
      "winapi-x86_64-pc-windows-gnu" = rec {
        crateName = "winapi-x86_64-pc-windows-gnu";
        version = "0.4.0";
        edition = "2015";
        sha256 = "0gqq64czqb64kskjryj8isp62m2sgvx25yyj3kpc2myh85w24bki";
        libName = "winapi_x86_64_pc_windows_gnu";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];

      };
      "windows 0.48.0" = rec {
        crateName = "windows";
        version = "0.48.0";
        edition = "2018";
        sha256 = "03vh89ilnxdxdh0n9np4ns4m10fvm93h3b0cc05ipg3qq1mqi1p6";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-implement";
            packageId = "windows-implement";
            optional = true;
          }
          {
            name = "windows-interface";
            packageId = "windows-interface";
            optional = true;
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.48.5";
          }
        ];
        features = {
          "AI_MachineLearning" = [ "AI" ];
          "ApplicationModel_Activation" = [ "ApplicationModel" ];
          "ApplicationModel_AppExtensions" = [ "ApplicationModel" ];
          "ApplicationModel_AppService" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments_AppointmentsProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Appointments_DataProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Background" = [ "ApplicationModel" ];
          "ApplicationModel_Calls" = [ "ApplicationModel" ];
          "ApplicationModel_Calls_Background" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Calls_Provider" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Chat" = [ "ApplicationModel" ];
          "ApplicationModel_CommunicationBlocking" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts_DataProvider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_Contacts_Provider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_ConversationalAgent" = [ "ApplicationModel" ];
          "ApplicationModel_Core" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer_DragDrop" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_DataTransfer_DragDrop_Core" = [ "ApplicationModel_DataTransfer_DragDrop" ];
          "ApplicationModel_DataTransfer_ShareTarget" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_Email" = [ "ApplicationModel" ];
          "ApplicationModel_Email_DataProvider" = [ "ApplicationModel_Email" ];
          "ApplicationModel_ExtendedExecution" = [ "ApplicationModel" ];
          "ApplicationModel_ExtendedExecution_Foreground" = [ "ApplicationModel_ExtendedExecution" ];
          "ApplicationModel_Holographic" = [ "ApplicationModel" ];
          "ApplicationModel_LockScreen" = [ "ApplicationModel" ];
          "ApplicationModel_Payments" = [ "ApplicationModel" ];
          "ApplicationModel_Payments_Provider" = [ "ApplicationModel_Payments" ];
          "ApplicationModel_Preview" = [ "ApplicationModel" ];
          "ApplicationModel_Preview_Holographic" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_InkWorkspace" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_Notes" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Resources" = [ "ApplicationModel" ];
          "ApplicationModel_Resources_Core" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Resources_Management" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Search" = [ "ApplicationModel" ];
          "ApplicationModel_Search_Core" = [ "ApplicationModel_Search" ];
          "ApplicationModel_Store" = [ "ApplicationModel" ];
          "ApplicationModel_Store_LicenseManagement" = [ "ApplicationModel_Store" ];
          "ApplicationModel_Store_Preview" = [ "ApplicationModel_Store" ];
          "ApplicationModel_Store_Preview_InstallControl" = [ "ApplicationModel_Store_Preview" ];
          "ApplicationModel_UserActivities" = [ "ApplicationModel" ];
          "ApplicationModel_UserActivities_Core" = [ "ApplicationModel_UserActivities" ];
          "ApplicationModel_UserDataAccounts" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataAccounts_Provider" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataAccounts_SystemAccess" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataTasks" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataTasks_DataProvider" = [ "ApplicationModel_UserDataTasks" ];
          "ApplicationModel_VoiceCommands" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet_System" = [ "ApplicationModel_Wallet" ];
          "Data_Html" = [ "Data" ];
          "Data_Json" = [ "Data" ];
          "Data_Pdf" = [ "Data" ];
          "Data_Text" = [ "Data" ];
          "Data_Xml" = [ "Data" ];
          "Data_Xml_Dom" = [ "Data_Xml" ];
          "Data_Xml_Xsl" = [ "Data_Xml" ];
          "Devices_Adc" = [ "Devices" ];
          "Devices_Adc_Provider" = [ "Devices_Adc" ];
          "Devices_Background" = [ "Devices" ];
          "Devices_Bluetooth" = [ "Devices" ];
          "Devices_Bluetooth_Advertisement" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Background" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_GenericAttributeProfile" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Rfcomm" = [ "Devices_Bluetooth" ];
          "Devices_Custom" = [ "Devices" ];
          "Devices_Display" = [ "Devices" ];
          "Devices_Display_Core" = [ "Devices_Display" ];
          "Devices_Enumeration" = [ "Devices" ];
          "Devices_Enumeration_Pnp" = [ "Devices_Enumeration" ];
          "Devices_Geolocation" = [ "Devices" ];
          "Devices_Geolocation_Geofencing" = [ "Devices_Geolocation" ];
          "Devices_Geolocation_Provider" = [ "Devices_Geolocation" ];
          "Devices_Gpio" = [ "Devices" ];
          "Devices_Gpio_Provider" = [ "Devices_Gpio" ];
          "Devices_Haptics" = [ "Devices" ];
          "Devices_HumanInterfaceDevice" = [ "Devices" ];
          "Devices_I2c" = [ "Devices" ];
          "Devices_I2c_Provider" = [ "Devices_I2c" ];
          "Devices_Input" = [ "Devices" ];
          "Devices_Input_Preview" = [ "Devices_Input" ];
          "Devices_Lights" = [ "Devices" ];
          "Devices_Lights_Effects" = [ "Devices_Lights" ];
          "Devices_Midi" = [ "Devices" ];
          "Devices_PointOfService" = [ "Devices" ];
          "Devices_PointOfService_Provider" = [ "Devices_PointOfService" ];
          "Devices_Portable" = [ "Devices" ];
          "Devices_Power" = [ "Devices" ];
          "Devices_Printers" = [ "Devices" ];
          "Devices_Printers_Extensions" = [ "Devices_Printers" ];
          "Devices_Pwm" = [ "Devices" ];
          "Devices_Pwm_Provider" = [ "Devices_Pwm" ];
          "Devices_Radios" = [ "Devices" ];
          "Devices_Scanners" = [ "Devices" ];
          "Devices_Sensors" = [ "Devices" ];
          "Devices_Sensors_Custom" = [ "Devices_Sensors" ];
          "Devices_SerialCommunication" = [ "Devices" ];
          "Devices_SmartCards" = [ "Devices" ];
          "Devices_Sms" = [ "Devices" ];
          "Devices_Spi" = [ "Devices" ];
          "Devices_Spi_Provider" = [ "Devices_Spi" ];
          "Devices_Usb" = [ "Devices" ];
          "Devices_WiFi" = [ "Devices" ];
          "Devices_WiFiDirect" = [ "Devices" ];
          "Devices_WiFiDirect_Services" = [ "Devices_WiFiDirect" ];
          "Embedded_DeviceLockdown" = [ "Embedded" ];
          "Foundation_Collections" = [ "Foundation" ];
          "Foundation_Diagnostics" = [ "Foundation" ];
          "Foundation_Metadata" = [ "Foundation" ];
          "Foundation_Numerics" = [ "Foundation" ];
          "Gaming_Input" = [ "Gaming" ];
          "Gaming_Input_Custom" = [ "Gaming_Input" ];
          "Gaming_Input_ForceFeedback" = [ "Gaming_Input" ];
          "Gaming_Input_Preview" = [ "Gaming_Input" ];
          "Gaming_Preview" = [ "Gaming" ];
          "Gaming_Preview_GamesEnumeration" = [ "Gaming_Preview" ];
          "Gaming_UI" = [ "Gaming" ];
          "Gaming_XboxLive" = [ "Gaming" ];
          "Gaming_XboxLive_Storage" = [ "Gaming_XboxLive" ];
          "Globalization_Collation" = [ "Globalization" ];
          "Globalization_DateTimeFormatting" = [ "Globalization" ];
          "Globalization_Fonts" = [ "Globalization" ];
          "Globalization_NumberFormatting" = [ "Globalization" ];
          "Globalization_PhoneNumberFormatting" = [ "Globalization" ];
          "Graphics_Capture" = [ "Graphics" ];
          "Graphics_DirectX" = [ "Graphics" ];
          "Graphics_DirectX_Direct3D11" = [ "Graphics_DirectX" ];
          "Graphics_Display" = [ "Graphics" ];
          "Graphics_Display_Core" = [ "Graphics_Display" ];
          "Graphics_Effects" = [ "Graphics" ];
          "Graphics_Holographic" = [ "Graphics" ];
          "Graphics_Imaging" = [ "Graphics" ];
          "Graphics_Printing" = [ "Graphics" ];
          "Graphics_Printing3D" = [ "Graphics" ];
          "Graphics_Printing_OptionDetails" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintSupport" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintTicket" = [ "Graphics_Printing" ];
          "Graphics_Printing_Workflow" = [ "Graphics_Printing" ];
          "Management_Core" = [ "Management" ];
          "Management_Deployment" = [ "Management" ];
          "Management_Deployment_Preview" = [ "Management_Deployment" ];
          "Management_Policies" = [ "Management" ];
          "Management_Update" = [ "Management" ];
          "Management_Workplace" = [ "Management" ];
          "Media_AppBroadcasting" = [ "Media" ];
          "Media_AppRecording" = [ "Media" ];
          "Media_Audio" = [ "Media" ];
          "Media_Capture" = [ "Media" ];
          "Media_Capture_Core" = [ "Media_Capture" ];
          "Media_Capture_Frames" = [ "Media_Capture" ];
          "Media_Casting" = [ "Media" ];
          "Media_ClosedCaptioning" = [ "Media" ];
          "Media_ContentRestrictions" = [ "Media" ];
          "Media_Control" = [ "Media" ];
          "Media_Core" = [ "Media" ];
          "Media_Core_Preview" = [ "Media_Core" ];
          "Media_Devices" = [ "Media" ];
          "Media_Devices_Core" = [ "Media_Devices" ];
          "Media_DialProtocol" = [ "Media" ];
          "Media_Editing" = [ "Media" ];
          "Media_Effects" = [ "Media" ];
          "Media_FaceAnalysis" = [ "Media" ];
          "Media_Import" = [ "Media" ];
          "Media_MediaProperties" = [ "Media" ];
          "Media_Miracast" = [ "Media" ];
          "Media_Ocr" = [ "Media" ];
          "Media_PlayTo" = [ "Media" ];
          "Media_Playback" = [ "Media" ];
          "Media_Playlists" = [ "Media" ];
          "Media_Protection" = [ "Media" ];
          "Media_Protection_PlayReady" = [ "Media_Protection" ];
          "Media_Render" = [ "Media" ];
          "Media_SpeechRecognition" = [ "Media" ];
          "Media_SpeechSynthesis" = [ "Media" ];
          "Media_Streaming" = [ "Media" ];
          "Media_Streaming_Adaptive" = [ "Media_Streaming" ];
          "Media_Transcoding" = [ "Media" ];
          "Networking_BackgroundTransfer" = [ "Networking" ];
          "Networking_Connectivity" = [ "Networking" ];
          "Networking_NetworkOperators" = [ "Networking" ];
          "Networking_Proximity" = [ "Networking" ];
          "Networking_PushNotifications" = [ "Networking" ];
          "Networking_ServiceDiscovery" = [ "Networking" ];
          "Networking_ServiceDiscovery_Dnssd" = [ "Networking_ServiceDiscovery" ];
          "Networking_Sockets" = [ "Networking" ];
          "Networking_Vpn" = [ "Networking" ];
          "Networking_XboxLive" = [ "Networking" ];
          "Perception_Automation" = [ "Perception" ];
          "Perception_Automation_Core" = [ "Perception_Automation" ];
          "Perception_People" = [ "Perception" ];
          "Perception_Spatial" = [ "Perception" ];
          "Perception_Spatial_Preview" = [ "Perception_Spatial" ];
          "Perception_Spatial_Surfaces" = [ "Perception_Spatial" ];
          "Phone_ApplicationModel" = [ "Phone" ];
          "Phone_Devices" = [ "Phone" ];
          "Phone_Devices_Notification" = [ "Phone_Devices" ];
          "Phone_Devices_Power" = [ "Phone_Devices" ];
          "Phone_Management" = [ "Phone" ];
          "Phone_Management_Deployment" = [ "Phone_Management" ];
          "Phone_Media" = [ "Phone" ];
          "Phone_Media_Devices" = [ "Phone_Media" ];
          "Phone_Notification" = [ "Phone" ];
          "Phone_Notification_Management" = [ "Phone_Notification" ];
          "Phone_PersonalInformation" = [ "Phone" ];
          "Phone_PersonalInformation_Provisioning" = [ "Phone_PersonalInformation" ];
          "Phone_Speech" = [ "Phone" ];
          "Phone_Speech_Recognition" = [ "Phone_Speech" ];
          "Phone_StartScreen" = [ "Phone" ];
          "Phone_System" = [ "Phone" ];
          "Phone_System_Power" = [ "Phone_System" ];
          "Phone_System_Profile" = [ "Phone_System" ];
          "Phone_System_UserProfile" = [ "Phone_System" ];
          "Phone_System_UserProfile_GameServices" = [ "Phone_System_UserProfile" ];
          "Phone_System_UserProfile_GameServices_Core" = [ "Phone_System_UserProfile_GameServices" ];
          "Phone_UI" = [ "Phone" ];
          "Phone_UI_Input" = [ "Phone_UI" ];
          "Security_Authentication" = [ "Security" ];
          "Security_Authentication_Identity" = [ "Security_Authentication" ];
          "Security_Authentication_Identity_Core" = [ "Security_Authentication_Identity" ];
          "Security_Authentication_OnlineId" = [ "Security_Authentication" ];
          "Security_Authentication_Web" = [ "Security_Authentication" ];
          "Security_Authentication_Web_Core" = [ "Security_Authentication_Web" ];
          "Security_Authentication_Web_Provider" = [ "Security_Authentication_Web" ];
          "Security_Authorization" = [ "Security" ];
          "Security_Authorization_AppCapabilityAccess" = [ "Security_Authorization" ];
          "Security_Credentials" = [ "Security" ];
          "Security_Credentials_UI" = [ "Security_Credentials" ];
          "Security_Cryptography" = [ "Security" ];
          "Security_Cryptography_Certificates" = [ "Security_Cryptography" ];
          "Security_Cryptography_Core" = [ "Security_Cryptography" ];
          "Security_Cryptography_DataProtection" = [ "Security_Cryptography" ];
          "Security_DataProtection" = [ "Security" ];
          "Security_EnterpriseData" = [ "Security" ];
          "Security_ExchangeActiveSyncProvisioning" = [ "Security" ];
          "Security_Isolation" = [ "Security" ];
          "Services_Maps" = [ "Services" ];
          "Services_Maps_Guidance" = [ "Services_Maps" ];
          "Services_Maps_LocalSearch" = [ "Services_Maps" ];
          "Services_Maps_OfflineMaps" = [ "Services_Maps" ];
          "Services_Store" = [ "Services" ];
          "Services_TargetedContent" = [ "Services" ];
          "Storage_AccessCache" = [ "Storage" ];
          "Storage_BulkAccess" = [ "Storage" ];
          "Storage_Compression" = [ "Storage" ];
          "Storage_FileProperties" = [ "Storage" ];
          "Storage_Pickers" = [ "Storage" ];
          "Storage_Pickers_Provider" = [ "Storage_Pickers" ];
          "Storage_Provider" = [ "Storage" ];
          "Storage_Search" = [ "Storage" ];
          "Storage_Streams" = [ "Storage" ];
          "System_Diagnostics" = [ "System" ];
          "System_Diagnostics_DevicePortal" = [ "System_Diagnostics" ];
          "System_Diagnostics_Telemetry" = [ "System_Diagnostics" ];
          "System_Diagnostics_TraceReporting" = [ "System_Diagnostics" ];
          "System_Display" = [ "System" ];
          "System_Implementation" = [ "System" ];
          "System_Implementation_FileExplorer" = [ "System_Implementation" ];
          "System_Inventory" = [ "System" ];
          "System_Power" = [ "System" ];
          "System_Profile" = [ "System" ];
          "System_Profile_SystemManufacturers" = [ "System_Profile" ];
          "System_RemoteDesktop" = [ "System" ];
          "System_RemoteDesktop_Input" = [ "System_RemoteDesktop" ];
          "System_RemoteSystems" = [ "System" ];
          "System_Threading" = [ "System" ];
          "System_Threading_Core" = [ "System_Threading" ];
          "System_Update" = [ "System" ];
          "System_UserProfile" = [ "System" ];
          "UI_Accessibility" = [ "UI" ];
          "UI_ApplicationSettings" = [ "UI" ];
          "UI_Composition" = [ "UI" ];
          "UI_Composition_Core" = [ "UI_Composition" ];
          "UI_Composition_Desktop" = [ "UI_Composition" ];
          "UI_Composition_Diagnostics" = [ "UI_Composition" ];
          "UI_Composition_Effects" = [ "UI_Composition" ];
          "UI_Composition_Interactions" = [ "UI_Composition" ];
          "UI_Composition_Scenes" = [ "UI_Composition" ];
          "UI_Core" = [ "UI" ];
          "UI_Core_AnimationMetrics" = [ "UI_Core" ];
          "UI_Core_Preview" = [ "UI_Core" ];
          "UI_Input" = [ "UI" ];
          "UI_Input_Core" = [ "UI_Input" ];
          "UI_Input_Inking" = [ "UI_Input" ];
          "UI_Input_Inking_Analysis" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Core" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Preview" = [ "UI_Input_Inking" ];
          "UI_Input_Preview" = [ "UI_Input" ];
          "UI_Input_Preview_Injection" = [ "UI_Input_Preview" ];
          "UI_Input_Spatial" = [ "UI_Input" ];
          "UI_Notifications" = [ "UI" ];
          "UI_Notifications_Management" = [ "UI_Notifications" ];
          "UI_Popups" = [ "UI" ];
          "UI_Shell" = [ "UI" ];
          "UI_StartScreen" = [ "UI" ];
          "UI_Text" = [ "UI" ];
          "UI_Text_Core" = [ "UI_Text" ];
          "UI_UIAutomation" = [ "UI" ];
          "UI_UIAutomation_Core" = [ "UI_UIAutomation" ];
          "UI_ViewManagement" = [ "UI" ];
          "UI_ViewManagement_Core" = [ "UI_ViewManagement" ];
          "UI_WebUI" = [ "UI" ];
          "UI_WebUI_Core" = [ "UI_WebUI" ];
          "UI_WindowManagement" = [ "UI" ];
          "UI_WindowManagement_Preview" = [ "UI_WindowManagement" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Web_AtomPub" = [ "Web" ];
          "Web_Http" = [ "Web" ];
          "Web_Http_Diagnostics" = [ "Web_Http" ];
          "Web_Http_Filters" = [ "Web_Http" ];
          "Web_Http_Headers" = [ "Web_Http" ];
          "Web_Syndication" = [ "Web" ];
          "Web_UI" = [ "Web" ];
          "Web_UI_Interop" = [ "Web_UI" ];
          "Win32_AI" = [ "Win32" ];
          "Win32_AI_MachineLearning" = [ "Win32_AI" ];
          "Win32_AI_MachineLearning_DirectML" = [ "Win32_AI_MachineLearning" ];
          "Win32_AI_MachineLearning_WinML" = [ "Win32_AI_MachineLearning" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_CompositionSwapchain" = [ "Win32_Graphics" ];
          "Win32_Graphics_DXCore" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D_Common" = [ "Win32_Graphics_Direct2D" ];
          "Win32_Graphics_Direct3D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D10" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D_Dxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_Direct3D_Fxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_DirectComposition" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectDraw" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectManipulation" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectWrite" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi_Common" = [ "Win32_Graphics_Dxgi" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging_D2D" = [ "Win32_Graphics_Imaging" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectSound" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DirectShow" = [ "Win32_Media" ];
          "Win32_Media_DirectShow_Tv" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DirectShow_Xml" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaFoundation" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_PictureAcquisition" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ClrProfiling" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_ActiveScript" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_SideShow" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_TransactionServer" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WinRT" = [ "Win32_System" ];
          "Win32_System_WinRT_AllJoyn" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Composition" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_CoreInputView" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Direct3D11" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Display" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics_Capture" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Direct2D" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Imaging" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Holographic" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Isolation" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_ML" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Media" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Metadata" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Pdf" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Printing" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Shell" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Storage" = [ "Win32_System_WinRT" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
          "implement" = [
            "windows-implement"
            "windows-interface"
          ];
          "windows-implement" = [ "dep:windows-implement" ];
          "windows-interface" = [ "dep:windows-interface" ];
        };
        resolvedDefaultFeatures = [
          "Win32"
          "Win32_Foundation"
          "Win32_Graphics"
          "Win32_Graphics_Gdi"
          "Win32_System"
          "Win32_System_Com"
          "Win32_System_LibraryLoader"
          "Win32_System_Ole"
          "Win32_UI"
          "Win32_UI_Accessibility"
          "Win32_UI_Input"
          "Win32_UI_Input_KeyboardAndMouse"
          "Win32_UI_WindowsAndMessaging"
          "default"
          "implement"
          "windows-implement"
          "windows-interface"
        ];
      };
      "windows 0.52.0" = rec {
        crateName = "windows";
        version = "0.52.0";
        edition = "2021";
        sha256 = "1gnh210qjlprpd1szaq04rjm1zqgdm9j7l9absg0kawi2rwm72p4";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-core";
            packageId = "windows-core";
          }
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "AI_MachineLearning" = [ "AI" ];
          "ApplicationModel_Activation" = [ "ApplicationModel" ];
          "ApplicationModel_AppExtensions" = [ "ApplicationModel" ];
          "ApplicationModel_AppService" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments" = [ "ApplicationModel" ];
          "ApplicationModel_Appointments_AppointmentsProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Appointments_DataProvider" = [ "ApplicationModel_Appointments" ];
          "ApplicationModel_Background" = [ "ApplicationModel" ];
          "ApplicationModel_Calls" = [ "ApplicationModel" ];
          "ApplicationModel_Calls_Background" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Calls_Provider" = [ "ApplicationModel_Calls" ];
          "ApplicationModel_Chat" = [ "ApplicationModel" ];
          "ApplicationModel_CommunicationBlocking" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts" = [ "ApplicationModel" ];
          "ApplicationModel_Contacts_DataProvider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_Contacts_Provider" = [ "ApplicationModel_Contacts" ];
          "ApplicationModel_ConversationalAgent" = [ "ApplicationModel" ];
          "ApplicationModel_Core" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer" = [ "ApplicationModel" ];
          "ApplicationModel_DataTransfer_DragDrop" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_DataTransfer_DragDrop_Core" = [ "ApplicationModel_DataTransfer_DragDrop" ];
          "ApplicationModel_DataTransfer_ShareTarget" = [ "ApplicationModel_DataTransfer" ];
          "ApplicationModel_Email" = [ "ApplicationModel" ];
          "ApplicationModel_Email_DataProvider" = [ "ApplicationModel_Email" ];
          "ApplicationModel_ExtendedExecution" = [ "ApplicationModel" ];
          "ApplicationModel_ExtendedExecution_Foreground" = [ "ApplicationModel_ExtendedExecution" ];
          "ApplicationModel_Holographic" = [ "ApplicationModel" ];
          "ApplicationModel_LockScreen" = [ "ApplicationModel" ];
          "ApplicationModel_Payments" = [ "ApplicationModel" ];
          "ApplicationModel_Payments_Provider" = [ "ApplicationModel_Payments" ];
          "ApplicationModel_Preview" = [ "ApplicationModel" ];
          "ApplicationModel_Preview_Holographic" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_InkWorkspace" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Preview_Notes" = [ "ApplicationModel_Preview" ];
          "ApplicationModel_Resources" = [ "ApplicationModel" ];
          "ApplicationModel_Resources_Core" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Resources_Management" = [ "ApplicationModel_Resources" ];
          "ApplicationModel_Search" = [ "ApplicationModel" ];
          "ApplicationModel_Search_Core" = [ "ApplicationModel_Search" ];
          "ApplicationModel_Store" = [ "ApplicationModel" ];
          "ApplicationModel_Store_LicenseManagement" = [ "ApplicationModel_Store" ];
          "ApplicationModel_Store_Preview" = [ "ApplicationModel_Store" ];
          "ApplicationModel_Store_Preview_InstallControl" = [ "ApplicationModel_Store_Preview" ];
          "ApplicationModel_UserActivities" = [ "ApplicationModel" ];
          "ApplicationModel_UserActivities_Core" = [ "ApplicationModel_UserActivities" ];
          "ApplicationModel_UserDataAccounts" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataAccounts_Provider" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataAccounts_SystemAccess" = [ "ApplicationModel_UserDataAccounts" ];
          "ApplicationModel_UserDataTasks" = [ "ApplicationModel" ];
          "ApplicationModel_UserDataTasks_DataProvider" = [ "ApplicationModel_UserDataTasks" ];
          "ApplicationModel_VoiceCommands" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet" = [ "ApplicationModel" ];
          "ApplicationModel_Wallet_System" = [ "ApplicationModel_Wallet" ];
          "Data_Html" = [ "Data" ];
          "Data_Json" = [ "Data" ];
          "Data_Pdf" = [ "Data" ];
          "Data_Text" = [ "Data" ];
          "Data_Xml" = [ "Data" ];
          "Data_Xml_Dom" = [ "Data_Xml" ];
          "Data_Xml_Xsl" = [ "Data_Xml" ];
          "Devices_Adc" = [ "Devices" ];
          "Devices_Adc_Provider" = [ "Devices_Adc" ];
          "Devices_Background" = [ "Devices" ];
          "Devices_Bluetooth" = [ "Devices" ];
          "Devices_Bluetooth_Advertisement" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Background" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_GenericAttributeProfile" = [ "Devices_Bluetooth" ];
          "Devices_Bluetooth_Rfcomm" = [ "Devices_Bluetooth" ];
          "Devices_Custom" = [ "Devices" ];
          "Devices_Display" = [ "Devices" ];
          "Devices_Display_Core" = [ "Devices_Display" ];
          "Devices_Enumeration" = [ "Devices" ];
          "Devices_Enumeration_Pnp" = [ "Devices_Enumeration" ];
          "Devices_Geolocation" = [ "Devices" ];
          "Devices_Geolocation_Geofencing" = [ "Devices_Geolocation" ];
          "Devices_Geolocation_Provider" = [ "Devices_Geolocation" ];
          "Devices_Gpio" = [ "Devices" ];
          "Devices_Gpio_Provider" = [ "Devices_Gpio" ];
          "Devices_Haptics" = [ "Devices" ];
          "Devices_HumanInterfaceDevice" = [ "Devices" ];
          "Devices_I2c" = [ "Devices" ];
          "Devices_I2c_Provider" = [ "Devices_I2c" ];
          "Devices_Input" = [ "Devices" ];
          "Devices_Input_Preview" = [ "Devices_Input" ];
          "Devices_Lights" = [ "Devices" ];
          "Devices_Lights_Effects" = [ "Devices_Lights" ];
          "Devices_Midi" = [ "Devices" ];
          "Devices_PointOfService" = [ "Devices" ];
          "Devices_PointOfService_Provider" = [ "Devices_PointOfService" ];
          "Devices_Portable" = [ "Devices" ];
          "Devices_Power" = [ "Devices" ];
          "Devices_Printers" = [ "Devices" ];
          "Devices_Printers_Extensions" = [ "Devices_Printers" ];
          "Devices_Pwm" = [ "Devices" ];
          "Devices_Pwm_Provider" = [ "Devices_Pwm" ];
          "Devices_Radios" = [ "Devices" ];
          "Devices_Scanners" = [ "Devices" ];
          "Devices_Sensors" = [ "Devices" ];
          "Devices_Sensors_Custom" = [ "Devices_Sensors" ];
          "Devices_SerialCommunication" = [ "Devices" ];
          "Devices_SmartCards" = [ "Devices" ];
          "Devices_Sms" = [ "Devices" ];
          "Devices_Spi" = [ "Devices" ];
          "Devices_Spi_Provider" = [ "Devices_Spi" ];
          "Devices_Usb" = [ "Devices" ];
          "Devices_WiFi" = [ "Devices" ];
          "Devices_WiFiDirect" = [ "Devices" ];
          "Devices_WiFiDirect_Services" = [ "Devices_WiFiDirect" ];
          "Embedded_DeviceLockdown" = [ "Embedded" ];
          "Foundation_Collections" = [ "Foundation" ];
          "Foundation_Diagnostics" = [ "Foundation" ];
          "Foundation_Metadata" = [ "Foundation" ];
          "Foundation_Numerics" = [ "Foundation" ];
          "Gaming_Input" = [ "Gaming" ];
          "Gaming_Input_Custom" = [ "Gaming_Input" ];
          "Gaming_Input_ForceFeedback" = [ "Gaming_Input" ];
          "Gaming_Input_Preview" = [ "Gaming_Input" ];
          "Gaming_Preview" = [ "Gaming" ];
          "Gaming_Preview_GamesEnumeration" = [ "Gaming_Preview" ];
          "Gaming_UI" = [ "Gaming" ];
          "Gaming_XboxLive" = [ "Gaming" ];
          "Gaming_XboxLive_Storage" = [ "Gaming_XboxLive" ];
          "Globalization_Collation" = [ "Globalization" ];
          "Globalization_DateTimeFormatting" = [ "Globalization" ];
          "Globalization_Fonts" = [ "Globalization" ];
          "Globalization_NumberFormatting" = [ "Globalization" ];
          "Globalization_PhoneNumberFormatting" = [ "Globalization" ];
          "Graphics_Capture" = [ "Graphics" ];
          "Graphics_DirectX" = [ "Graphics" ];
          "Graphics_DirectX_Direct3D11" = [ "Graphics_DirectX" ];
          "Graphics_Display" = [ "Graphics" ];
          "Graphics_Display_Core" = [ "Graphics_Display" ];
          "Graphics_Effects" = [ "Graphics" ];
          "Graphics_Holographic" = [ "Graphics" ];
          "Graphics_Imaging" = [ "Graphics" ];
          "Graphics_Printing" = [ "Graphics" ];
          "Graphics_Printing3D" = [ "Graphics" ];
          "Graphics_Printing_OptionDetails" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintSupport" = [ "Graphics_Printing" ];
          "Graphics_Printing_PrintTicket" = [ "Graphics_Printing" ];
          "Graphics_Printing_Workflow" = [ "Graphics_Printing" ];
          "Management_Core" = [ "Management" ];
          "Management_Deployment" = [ "Management" ];
          "Management_Deployment_Preview" = [ "Management_Deployment" ];
          "Management_Policies" = [ "Management" ];
          "Management_Update" = [ "Management" ];
          "Management_Workplace" = [ "Management" ];
          "Media_AppBroadcasting" = [ "Media" ];
          "Media_AppRecording" = [ "Media" ];
          "Media_Audio" = [ "Media" ];
          "Media_Capture" = [ "Media" ];
          "Media_Capture_Core" = [ "Media_Capture" ];
          "Media_Capture_Frames" = [ "Media_Capture" ];
          "Media_Casting" = [ "Media" ];
          "Media_ClosedCaptioning" = [ "Media" ];
          "Media_ContentRestrictions" = [ "Media" ];
          "Media_Control" = [ "Media" ];
          "Media_Core" = [ "Media" ];
          "Media_Core_Preview" = [ "Media_Core" ];
          "Media_Devices" = [ "Media" ];
          "Media_Devices_Core" = [ "Media_Devices" ];
          "Media_DialProtocol" = [ "Media" ];
          "Media_Editing" = [ "Media" ];
          "Media_Effects" = [ "Media" ];
          "Media_FaceAnalysis" = [ "Media" ];
          "Media_Import" = [ "Media" ];
          "Media_MediaProperties" = [ "Media" ];
          "Media_Miracast" = [ "Media" ];
          "Media_Ocr" = [ "Media" ];
          "Media_PlayTo" = [ "Media" ];
          "Media_Playback" = [ "Media" ];
          "Media_Playlists" = [ "Media" ];
          "Media_Protection" = [ "Media" ];
          "Media_Protection_PlayReady" = [ "Media_Protection" ];
          "Media_Render" = [ "Media" ];
          "Media_SpeechRecognition" = [ "Media" ];
          "Media_SpeechSynthesis" = [ "Media" ];
          "Media_Streaming" = [ "Media" ];
          "Media_Streaming_Adaptive" = [ "Media_Streaming" ];
          "Media_Transcoding" = [ "Media" ];
          "Networking_BackgroundTransfer" = [ "Networking" ];
          "Networking_Connectivity" = [ "Networking" ];
          "Networking_NetworkOperators" = [ "Networking" ];
          "Networking_Proximity" = [ "Networking" ];
          "Networking_PushNotifications" = [ "Networking" ];
          "Networking_ServiceDiscovery" = [ "Networking" ];
          "Networking_ServiceDiscovery_Dnssd" = [ "Networking_ServiceDiscovery" ];
          "Networking_Sockets" = [ "Networking" ];
          "Networking_Vpn" = [ "Networking" ];
          "Networking_XboxLive" = [ "Networking" ];
          "Perception_Automation" = [ "Perception" ];
          "Perception_Automation_Core" = [ "Perception_Automation" ];
          "Perception_People" = [ "Perception" ];
          "Perception_Spatial" = [ "Perception" ];
          "Perception_Spatial_Preview" = [ "Perception_Spatial" ];
          "Perception_Spatial_Surfaces" = [ "Perception_Spatial" ];
          "Phone_ApplicationModel" = [ "Phone" ];
          "Phone_Devices" = [ "Phone" ];
          "Phone_Devices_Notification" = [ "Phone_Devices" ];
          "Phone_Devices_Power" = [ "Phone_Devices" ];
          "Phone_Management" = [ "Phone" ];
          "Phone_Management_Deployment" = [ "Phone_Management" ];
          "Phone_Media" = [ "Phone" ];
          "Phone_Media_Devices" = [ "Phone_Media" ];
          "Phone_Notification" = [ "Phone" ];
          "Phone_Notification_Management" = [ "Phone_Notification" ];
          "Phone_PersonalInformation" = [ "Phone" ];
          "Phone_PersonalInformation_Provisioning" = [ "Phone_PersonalInformation" ];
          "Phone_Speech" = [ "Phone" ];
          "Phone_Speech_Recognition" = [ "Phone_Speech" ];
          "Phone_StartScreen" = [ "Phone" ];
          "Phone_System" = [ "Phone" ];
          "Phone_System_Power" = [ "Phone_System" ];
          "Phone_System_Profile" = [ "Phone_System" ];
          "Phone_System_UserProfile" = [ "Phone_System" ];
          "Phone_System_UserProfile_GameServices" = [ "Phone_System_UserProfile" ];
          "Phone_System_UserProfile_GameServices_Core" = [ "Phone_System_UserProfile_GameServices" ];
          "Phone_UI" = [ "Phone" ];
          "Phone_UI_Input" = [ "Phone_UI" ];
          "Security_Authentication" = [ "Security" ];
          "Security_Authentication_Identity" = [ "Security_Authentication" ];
          "Security_Authentication_Identity_Core" = [ "Security_Authentication_Identity" ];
          "Security_Authentication_OnlineId" = [ "Security_Authentication" ];
          "Security_Authentication_Web" = [ "Security_Authentication" ];
          "Security_Authentication_Web_Core" = [ "Security_Authentication_Web" ];
          "Security_Authentication_Web_Provider" = [ "Security_Authentication_Web" ];
          "Security_Authorization" = [ "Security" ];
          "Security_Authorization_AppCapabilityAccess" = [ "Security_Authorization" ];
          "Security_Credentials" = [ "Security" ];
          "Security_Credentials_UI" = [ "Security_Credentials" ];
          "Security_Cryptography" = [ "Security" ];
          "Security_Cryptography_Certificates" = [ "Security_Cryptography" ];
          "Security_Cryptography_Core" = [ "Security_Cryptography" ];
          "Security_Cryptography_DataProtection" = [ "Security_Cryptography" ];
          "Security_DataProtection" = [ "Security" ];
          "Security_EnterpriseData" = [ "Security" ];
          "Security_ExchangeActiveSyncProvisioning" = [ "Security" ];
          "Security_Isolation" = [ "Security" ];
          "Services_Maps" = [ "Services" ];
          "Services_Maps_Guidance" = [ "Services_Maps" ];
          "Services_Maps_LocalSearch" = [ "Services_Maps" ];
          "Services_Maps_OfflineMaps" = [ "Services_Maps" ];
          "Services_Store" = [ "Services" ];
          "Services_TargetedContent" = [ "Services" ];
          "Storage_AccessCache" = [ "Storage" ];
          "Storage_BulkAccess" = [ "Storage" ];
          "Storage_Compression" = [ "Storage" ];
          "Storage_FileProperties" = [ "Storage" ];
          "Storage_Pickers" = [ "Storage" ];
          "Storage_Pickers_Provider" = [ "Storage_Pickers" ];
          "Storage_Provider" = [ "Storage" ];
          "Storage_Search" = [ "Storage" ];
          "Storage_Streams" = [ "Storage" ];
          "System_Diagnostics" = [ "System" ];
          "System_Diagnostics_DevicePortal" = [ "System_Diagnostics" ];
          "System_Diagnostics_Telemetry" = [ "System_Diagnostics" ];
          "System_Diagnostics_TraceReporting" = [ "System_Diagnostics" ];
          "System_Display" = [ "System" ];
          "System_Implementation" = [ "System" ];
          "System_Implementation_FileExplorer" = [ "System_Implementation" ];
          "System_Inventory" = [ "System" ];
          "System_Power" = [ "System" ];
          "System_Profile" = [ "System" ];
          "System_Profile_SystemManufacturers" = [ "System_Profile" ];
          "System_RemoteDesktop" = [ "System" ];
          "System_RemoteDesktop_Input" = [ "System_RemoteDesktop" ];
          "System_RemoteSystems" = [ "System" ];
          "System_Threading" = [ "System" ];
          "System_Threading_Core" = [ "System_Threading" ];
          "System_Update" = [ "System" ];
          "System_UserProfile" = [ "System" ];
          "UI_Accessibility" = [ "UI" ];
          "UI_ApplicationSettings" = [ "UI" ];
          "UI_Composition" = [ "UI" ];
          "UI_Composition_Core" = [ "UI_Composition" ];
          "UI_Composition_Desktop" = [ "UI_Composition" ];
          "UI_Composition_Diagnostics" = [ "UI_Composition" ];
          "UI_Composition_Effects" = [ "UI_Composition" ];
          "UI_Composition_Interactions" = [ "UI_Composition" ];
          "UI_Composition_Scenes" = [ "UI_Composition" ];
          "UI_Core" = [ "UI" ];
          "UI_Core_AnimationMetrics" = [ "UI_Core" ];
          "UI_Core_Preview" = [ "UI_Core" ];
          "UI_Input" = [ "UI" ];
          "UI_Input_Core" = [ "UI_Input" ];
          "UI_Input_Inking" = [ "UI_Input" ];
          "UI_Input_Inking_Analysis" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Core" = [ "UI_Input_Inking" ];
          "UI_Input_Inking_Preview" = [ "UI_Input_Inking" ];
          "UI_Input_Preview" = [ "UI_Input" ];
          "UI_Input_Preview_Injection" = [ "UI_Input_Preview" ];
          "UI_Input_Spatial" = [ "UI_Input" ];
          "UI_Notifications" = [ "UI" ];
          "UI_Notifications_Management" = [ "UI_Notifications" ];
          "UI_Popups" = [ "UI" ];
          "UI_Shell" = [ "UI" ];
          "UI_StartScreen" = [ "UI" ];
          "UI_Text" = [ "UI" ];
          "UI_Text_Core" = [ "UI_Text" ];
          "UI_UIAutomation" = [ "UI" ];
          "UI_UIAutomation_Core" = [ "UI_UIAutomation" ];
          "UI_ViewManagement" = [ "UI" ];
          "UI_ViewManagement_Core" = [ "UI_ViewManagement" ];
          "UI_WebUI" = [ "UI" ];
          "UI_WebUI_Core" = [ "UI_WebUI" ];
          "UI_WindowManagement" = [ "UI" ];
          "UI_WindowManagement_Preview" = [ "UI_WindowManagement" ];
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Web_AtomPub" = [ "Web" ];
          "Web_Http" = [ "Web" ];
          "Web_Http_Diagnostics" = [ "Web_Http" ];
          "Web_Http_Filters" = [ "Web_Http" ];
          "Web_Http_Headers" = [ "Web_Http" ];
          "Web_Syndication" = [ "Web" ];
          "Web_UI" = [ "Web" ];
          "Web_UI_Interop" = [ "Web_UI" ];
          "Win32_AI" = [ "Win32" ];
          "Win32_AI_MachineLearning" = [ "Win32_AI" ];
          "Win32_AI_MachineLearning_DirectML" = [ "Win32_AI_MachineLearning" ];
          "Win32_AI_MachineLearning_WinML" = [ "Win32_AI_MachineLearning" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_CompositionSwapchain" = [ "Win32_Graphics" ];
          "Win32_Graphics_DXCore" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct2D_Common" = [ "Win32_Graphics_Direct2D" ];
          "Win32_Graphics_Direct3D" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D10" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D11on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D9on12" = [ "Win32_Graphics" ];
          "Win32_Graphics_Direct3D_Dxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_Direct3D_Fxc" = [ "Win32_Graphics_Direct3D" ];
          "Win32_Graphics_DirectComposition" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectDraw" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectManipulation" = [ "Win32_Graphics" ];
          "Win32_Graphics_DirectWrite" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Dxgi_Common" = [ "Win32_Graphics_Dxgi" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging" = [ "Win32_Graphics" ];
          "Win32_Graphics_Imaging_D2D" = [ "Win32_Graphics_Imaging" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectSound" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DirectShow" = [ "Win32_Media" ];
          "Win32_Media_DirectShow_Tv" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DirectShow_Xml" = [ "Win32_Media_DirectShow" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaFoundation" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_PictureAcquisition" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ClrProfiling" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_ActiveScript" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_SideShow" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_TransactionServer" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WinRT" = [ "Win32_System" ];
          "Win32_System_WinRT_AllJoyn" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Composition" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_CoreInputView" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Direct3D11" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Display" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Graphics_Capture" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Direct2D" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Graphics_Imaging" = [ "Win32_System_WinRT_Graphics" ];
          "Win32_System_WinRT_Holographic" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Isolation" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_ML" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Media" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Metadata" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Pdf" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Printing" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Shell" = [ "Win32_System_WinRT" ];
          "Win32_System_WinRT_Storage" = [ "Win32_System_WinRT" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
          "implement" = [
            "windows-implement"
            "windows-interface"
            "windows-core/implement"
          ];
          "windows-implement" = [ "dep:windows-implement" ];
          "windows-interface" = [ "dep:windows-interface" ];
        };
        resolvedDefaultFeatures = [
          "Win32"
          "Win32_Foundation"
          "Win32_Graphics"
          "Win32_Graphics_Direct3D"
          "Win32_Graphics_Direct3D12"
          "Win32_Graphics_Dxgi"
          "Win32_Graphics_Dxgi_Common"
          "default"
        ];
      };
      "windows-core" = rec {
        crateName = "windows-core";
        version = "0.52.0";
        edition = "2021";
        sha256 = "1nc3qv7sy24x0nlnb32f7alzpd6f72l4p24vl65vydbyil669ark";
        libName = "windows_core";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "default" ];
      };
      "windows-implement" = rec {
        crateName = "windows-implement";
        version = "0.48.0";
        edition = "2018";
        sha256 = "1764n853zd7bb0wn94i0qxfs6kdy7wrz7v9qhdn7x7hvk64fabjy";
        procMacro = true;
        libName = "windows_implement";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            usesDefaultFeatures = false;
            features = [
              "parsing"
              "proc-macro"
              "printing"
              "full"
              "derive"
            ];
          }
        ];

      };
      "windows-interface" = rec {
        crateName = "windows-interface";
        version = "0.48.0";
        edition = "2018";
        sha256 = "1iqcilw0hfyzwhk12xfmcy40r10406sgf4xmdansijlv1kr8vyz6";
        procMacro = true;
        libName = "windows_interface";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            usesDefaultFeatures = false;
            features = [
              "parsing"
              "proc-macro"
              "printing"
              "full"
              "derive"
            ];
          }
        ];

      };
      "windows-sys 0.45.0" = rec {
        crateName = "windows-sys";
        version = "0.45.0";
        edition = "2018";
        sha256 = "1l36bcqm4g89pknfp8r9rl1w4bn017q6a8qlx8viv0xjxzjkna3m";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.42.2";
            target = { target, features }: (!(target."windows_raw_dylib" or false));
          }
        ];
        features = {
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
        };
        resolvedDefaultFeatures = [
          "Win32"
          "Win32_Globalization"
          "default"
        ];
      };
      "windows-sys 0.48.0" = rec {
        crateName = "windows-sys";
        version = "0.48.0";
        edition = "2018";
        sha256 = "1aan23v5gs7gya1lc46hqn9mdh8yph3fhxmhxlw36pn6pqc28zb7";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.48.5";
          }
        ];
        features = {
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Data_Xml" = [ "Win32_Data" ];
          "Win32_Data_Xml_MsXml" = [ "Win32_Data_Xml" ];
          "Win32_Data_Xml_XmlLite" = [ "Win32_Data_Xml" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAccess" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_FunctionDiscovery" = [ "Win32_Devices" ];
          "Win32_Devices_Geolocation" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_ImageAcquisition" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_Audio_Apo" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_DirectMusic" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_Endpoints" = [ "Win32_Media_Audio" ];
          "Win32_Media_Audio_XAudio2" = [ "Win32_Media_Audio" ];
          "Win32_Media_DeviceManager" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_LibrarySharingServices" = [ "Win32_Media" ];
          "Win32_Media_MediaPlayer" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Speech" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_MobileBroadband" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkPolicyServer" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectNow" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_BackgroundIntelligentTransferService" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_NetworkListManager" = [ "Win32_Networking" ];
          "Win32_Networking_RemoteDifferentialCompression" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authentication_Identity_Provider" = [ "Win32_Security_Authentication_Identity" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Authorization_UI" = [ "Win32_Security_Authorization" ];
          "Win32_Security_ConfigurationSnapin" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_Tpm" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DataDeduplication" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_EnhancedStorage" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileServerResourceManager" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_Packaging_Opc" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_VirtualDiskService" = [ "Win32_Storage" ];
          "Win32_Storage_Vss" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_Storage_Xps_Printing" = [ "Win32_Storage_Xps" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_AssessmentTool" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_CallObj" = [ "Win32_System_Com" ];
          "Win32_System_Com_ChannelCredentials" = [ "Win32_System_Com" ];
          "Win32_System_Com_Events" = [ "Win32_System_Com" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_UI" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_Contacts" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DesktopSharing" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ClrProfiling" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_ActiveScript" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Mmc" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_ParentalControls" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_RealTimeCommunications" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteAssistance" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_ServerBackup" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SettingsManagementInfrastructure" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_TaskScheduler" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UpdateAgent" = [ "Win32_System" ];
          "Win32_System_UpdateAssessment" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_WindowsSync" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_Animation" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_Controls_RichEdit" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Ink" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Radial" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_LegacyWindowsEnvironmentFeatures" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Notifications" = [ "Win32_UI" ];
          "Win32_UI_Ribbon" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_UI_Wpf" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [
          "Win32"
          "Win32_Devices"
          "Win32_Devices_HumanInterfaceDevice"
          "Win32_Foundation"
          "Win32_Globalization"
          "Win32_Graphics"
          "Win32_Graphics_Dwm"
          "Win32_Graphics_Gdi"
          "Win32_Graphics_OpenGL"
          "Win32_Media"
          "Win32_NetworkManagement"
          "Win32_NetworkManagement_IpHelper"
          "Win32_Networking"
          "Win32_Networking_WinSock"
          "Win32_Security"
          "Win32_Storage"
          "Win32_Storage_FileSystem"
          "Win32_System"
          "Win32_System_Com"
          "Win32_System_Com_StructuredStorage"
          "Win32_System_IO"
          "Win32_System_LibraryLoader"
          "Win32_System_Ole"
          "Win32_System_SystemInformation"
          "Win32_System_SystemServices"
          "Win32_System_Threading"
          "Win32_System_WindowsProgramming"
          "Win32_UI"
          "Win32_UI_Accessibility"
          "Win32_UI_Controls"
          "Win32_UI_HiDpi"
          "Win32_UI_Input"
          "Win32_UI_Input_Ime"
          "Win32_UI_Input_KeyboardAndMouse"
          "Win32_UI_Input_Pointer"
          "Win32_UI_Input_Touch"
          "Win32_UI_Shell"
          "Win32_UI_Shell_Common"
          "Win32_UI_TextServices"
          "Win32_UI_WindowsAndMessaging"
          "default"
        ];
      };
      "windows-sys 0.52.0" = rec {
        crateName = "windows-sys";
        version = "0.52.0";
        edition = "2021";
        sha256 = "0gd3v4ji88490zgb6b5mq5zgbvwv7zx1ibn8v3x83rwcdbryaar8";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [
          "Win32"
          "Win32_Foundation"
          "Win32_NetworkManagement"
          "Win32_NetworkManagement_IpHelper"
          "Win32_Networking"
          "Win32_Networking_WinSock"
          "Win32_Security"
          "Win32_Security_Authorization"
          "Win32_Storage"
          "Win32_Storage_FileSystem"
          "Win32_System"
          "Win32_System_Com"
          "Win32_System_Console"
          "Win32_System_Diagnostics"
          "Win32_System_Diagnostics_Debug"
          "Win32_System_Memory"
          "Win32_System_Threading"
          "Win32_UI"
          "Win32_UI_Input"
          "Win32_UI_Input_KeyboardAndMouse"
          "Win32_UI_Shell"
          "default"
        ];
      };
      "windows-sys 0.59.0" = rec {
        crateName = "windows-sys";
        version = "0.59.0";
        edition = "2021";
        sha256 = "0fw5672ziw8b3zpmnbp9pdv1famk74f1l9fcbc3zsrzdg56vqf0y";
        libName = "windows_sys";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows-targets";
            packageId = "windows-targets 0.52.6";
          }
        ];
        features = {
          "Wdk" = [ "Win32_Foundation" ];
          "Wdk_Devices" = [ "Wdk" ];
          "Wdk_Devices_Bluetooth" = [ "Wdk_Devices" ];
          "Wdk_Devices_HumanInterfaceDevice" = [ "Wdk_Devices" ];
          "Wdk_Foundation" = [ "Wdk" ];
          "Wdk_Graphics" = [ "Wdk" ];
          "Wdk_Graphics_Direct3D" = [ "Wdk_Graphics" ];
          "Wdk_NetworkManagement" = [ "Wdk" ];
          "Wdk_NetworkManagement_Ndis" = [ "Wdk_NetworkManagement" ];
          "Wdk_NetworkManagement_WindowsFilteringPlatform" = [ "Wdk_NetworkManagement" ];
          "Wdk_Storage" = [ "Wdk" ];
          "Wdk_Storage_FileSystem" = [ "Wdk_Storage" ];
          "Wdk_Storage_FileSystem_Minifilters" = [ "Wdk_Storage_FileSystem" ];
          "Wdk_System" = [ "Wdk" ];
          "Wdk_System_IO" = [ "Wdk_System" ];
          "Wdk_System_Memory" = [ "Wdk_System" ];
          "Wdk_System_OfflineRegistry" = [ "Wdk_System" ];
          "Wdk_System_Registry" = [ "Wdk_System" ];
          "Wdk_System_SystemInformation" = [ "Wdk_System" ];
          "Wdk_System_SystemServices" = [ "Wdk_System" ];
          "Wdk_System_Threading" = [ "Wdk_System" ];
          "Win32" = [ "Win32_Foundation" ];
          "Win32_Data" = [ "Win32" ];
          "Win32_Data_HtmlHelp" = [ "Win32_Data" ];
          "Win32_Data_RightsManagement" = [ "Win32_Data" ];
          "Win32_Devices" = [ "Win32" ];
          "Win32_Devices_AllJoyn" = [ "Win32_Devices" ];
          "Win32_Devices_BiometricFramework" = [ "Win32_Devices" ];
          "Win32_Devices_Bluetooth" = [ "Win32_Devices" ];
          "Win32_Devices_Communication" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceAndDriverInstallation" = [ "Win32_Devices" ];
          "Win32_Devices_DeviceQuery" = [ "Win32_Devices" ];
          "Win32_Devices_Display" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration" = [ "Win32_Devices" ];
          "Win32_Devices_Enumeration_Pnp" = [ "Win32_Devices_Enumeration" ];
          "Win32_Devices_Fax" = [ "Win32_Devices" ];
          "Win32_Devices_HumanInterfaceDevice" = [ "Win32_Devices" ];
          "Win32_Devices_PortableDevices" = [ "Win32_Devices" ];
          "Win32_Devices_Properties" = [ "Win32_Devices" ];
          "Win32_Devices_Pwm" = [ "Win32_Devices" ];
          "Win32_Devices_Sensors" = [ "Win32_Devices" ];
          "Win32_Devices_SerialCommunication" = [ "Win32_Devices" ];
          "Win32_Devices_Tapi" = [ "Win32_Devices" ];
          "Win32_Devices_Usb" = [ "Win32_Devices" ];
          "Win32_Devices_WebServicesOnDevices" = [ "Win32_Devices" ];
          "Win32_Foundation" = [ "Win32" ];
          "Win32_Gaming" = [ "Win32" ];
          "Win32_Globalization" = [ "Win32" ];
          "Win32_Graphics" = [ "Win32" ];
          "Win32_Graphics_Dwm" = [ "Win32_Graphics" ];
          "Win32_Graphics_Gdi" = [ "Win32_Graphics" ];
          "Win32_Graphics_GdiPlus" = [ "Win32_Graphics" ];
          "Win32_Graphics_Hlsl" = [ "Win32_Graphics" ];
          "Win32_Graphics_OpenGL" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing" = [ "Win32_Graphics" ];
          "Win32_Graphics_Printing_PrintTicket" = [ "Win32_Graphics_Printing" ];
          "Win32_Management" = [ "Win32" ];
          "Win32_Management_MobileDeviceManagementRegistration" = [ "Win32_Management" ];
          "Win32_Media" = [ "Win32" ];
          "Win32_Media_Audio" = [ "Win32_Media" ];
          "Win32_Media_DxMediaObjects" = [ "Win32_Media" ];
          "Win32_Media_KernelStreaming" = [ "Win32_Media" ];
          "Win32_Media_Multimedia" = [ "Win32_Media" ];
          "Win32_Media_Streaming" = [ "Win32_Media" ];
          "Win32_Media_WindowsMediaFormat" = [ "Win32_Media" ];
          "Win32_NetworkManagement" = [ "Win32" ];
          "Win32_NetworkManagement_Dhcp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Dns" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_InternetConnectionWizard" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_IpHelper" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Multicast" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Ndis" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetBios" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetManagement" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetShell" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_NetworkDiagnosticsFramework" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_P2P" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_QoS" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Rras" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_Snmp" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WNet" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WebDav" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WiFi" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsConnectionManager" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFilteringPlatform" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsFirewall" = [ "Win32_NetworkManagement" ];
          "Win32_NetworkManagement_WindowsNetworkVirtualization" = [ "Win32_NetworkManagement" ];
          "Win32_Networking" = [ "Win32" ];
          "Win32_Networking_ActiveDirectory" = [ "Win32_Networking" ];
          "Win32_Networking_Clustering" = [ "Win32_Networking" ];
          "Win32_Networking_HttpServer" = [ "Win32_Networking" ];
          "Win32_Networking_Ldap" = [ "Win32_Networking" ];
          "Win32_Networking_WebSocket" = [ "Win32_Networking" ];
          "Win32_Networking_WinHttp" = [ "Win32_Networking" ];
          "Win32_Networking_WinInet" = [ "Win32_Networking" ];
          "Win32_Networking_WinSock" = [ "Win32_Networking" ];
          "Win32_Networking_WindowsWebServices" = [ "Win32_Networking" ];
          "Win32_Security" = [ "Win32" ];
          "Win32_Security_AppLocker" = [ "Win32_Security" ];
          "Win32_Security_Authentication" = [ "Win32_Security" ];
          "Win32_Security_Authentication_Identity" = [ "Win32_Security_Authentication" ];
          "Win32_Security_Authorization" = [ "Win32_Security" ];
          "Win32_Security_Credentials" = [ "Win32_Security" ];
          "Win32_Security_Cryptography" = [ "Win32_Security" ];
          "Win32_Security_Cryptography_Catalog" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Certificates" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_Sip" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_Cryptography_UI" = [ "Win32_Security_Cryptography" ];
          "Win32_Security_DiagnosticDataQuery" = [ "Win32_Security" ];
          "Win32_Security_DirectoryServices" = [ "Win32_Security" ];
          "Win32_Security_EnterpriseData" = [ "Win32_Security" ];
          "Win32_Security_ExtensibleAuthenticationProtocol" = [ "Win32_Security" ];
          "Win32_Security_Isolation" = [ "Win32_Security" ];
          "Win32_Security_LicenseProtection" = [ "Win32_Security" ];
          "Win32_Security_NetworkAccessProtection" = [ "Win32_Security" ];
          "Win32_Security_WinTrust" = [ "Win32_Security" ];
          "Win32_Security_WinWlx" = [ "Win32_Security" ];
          "Win32_Storage" = [ "Win32" ];
          "Win32_Storage_Cabinets" = [ "Win32_Storage" ];
          "Win32_Storage_CloudFilters" = [ "Win32_Storage" ];
          "Win32_Storage_Compression" = [ "Win32_Storage" ];
          "Win32_Storage_DistributedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_FileHistory" = [ "Win32_Storage" ];
          "Win32_Storage_FileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_Imapi" = [ "Win32_Storage" ];
          "Win32_Storage_IndexServer" = [ "Win32_Storage" ];
          "Win32_Storage_InstallableFileSystems" = [ "Win32_Storage" ];
          "Win32_Storage_IscsiDisc" = [ "Win32_Storage" ];
          "Win32_Storage_Jet" = [ "Win32_Storage" ];
          "Win32_Storage_Nvme" = [ "Win32_Storage" ];
          "Win32_Storage_OfflineFiles" = [ "Win32_Storage" ];
          "Win32_Storage_OperationRecorder" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging" = [ "Win32_Storage" ];
          "Win32_Storage_Packaging_Appx" = [ "Win32_Storage_Packaging" ];
          "Win32_Storage_ProjectedFileSystem" = [ "Win32_Storage" ];
          "Win32_Storage_StructuredStorage" = [ "Win32_Storage" ];
          "Win32_Storage_Vhd" = [ "Win32_Storage" ];
          "Win32_Storage_Xps" = [ "Win32_Storage" ];
          "Win32_System" = [ "Win32" ];
          "Win32_System_AddressBook" = [ "Win32_System" ];
          "Win32_System_Antimalware" = [ "Win32_System" ];
          "Win32_System_ApplicationInstallationAndServicing" = [ "Win32_System" ];
          "Win32_System_ApplicationVerifier" = [ "Win32_System" ];
          "Win32_System_ClrHosting" = [ "Win32_System" ];
          "Win32_System_Com" = [ "Win32_System" ];
          "Win32_System_Com_Marshal" = [ "Win32_System_Com" ];
          "Win32_System_Com_StructuredStorage" = [ "Win32_System_Com" ];
          "Win32_System_Com_Urlmon" = [ "Win32_System_Com" ];
          "Win32_System_ComponentServices" = [ "Win32_System" ];
          "Win32_System_Console" = [ "Win32_System" ];
          "Win32_System_CorrelationVector" = [ "Win32_System" ];
          "Win32_System_DataExchange" = [ "Win32_System" ];
          "Win32_System_DeploymentServices" = [ "Win32_System" ];
          "Win32_System_DeveloperLicensing" = [ "Win32_System" ];
          "Win32_System_Diagnostics" = [ "Win32_System" ];
          "Win32_System_Diagnostics_Ceip" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_Debug_Extensions" = [ "Win32_System_Diagnostics_Debug" ];
          "Win32_System_Diagnostics_Etw" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ProcessSnapshotting" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_ToolHelp" = [ "Win32_System_Diagnostics" ];
          "Win32_System_Diagnostics_TraceLogging" = [ "Win32_System_Diagnostics" ];
          "Win32_System_DistributedTransactionCoordinator" = [ "Win32_System" ];
          "Win32_System_Environment" = [ "Win32_System" ];
          "Win32_System_ErrorReporting" = [ "Win32_System" ];
          "Win32_System_EventCollector" = [ "Win32_System" ];
          "Win32_System_EventLog" = [ "Win32_System" ];
          "Win32_System_EventNotificationService" = [ "Win32_System" ];
          "Win32_System_GroupPolicy" = [ "Win32_System" ];
          "Win32_System_HostCompute" = [ "Win32_System" ];
          "Win32_System_HostComputeNetwork" = [ "Win32_System" ];
          "Win32_System_HostComputeSystem" = [ "Win32_System" ];
          "Win32_System_Hypervisor" = [ "Win32_System" ];
          "Win32_System_IO" = [ "Win32_System" ];
          "Win32_System_Iis" = [ "Win32_System" ];
          "Win32_System_Ioctl" = [ "Win32_System" ];
          "Win32_System_JobObjects" = [ "Win32_System" ];
          "Win32_System_Js" = [ "Win32_System" ];
          "Win32_System_Kernel" = [ "Win32_System" ];
          "Win32_System_LibraryLoader" = [ "Win32_System" ];
          "Win32_System_Mailslots" = [ "Win32_System" ];
          "Win32_System_Mapi" = [ "Win32_System" ];
          "Win32_System_Memory" = [ "Win32_System" ];
          "Win32_System_Memory_NonVolatile" = [ "Win32_System_Memory" ];
          "Win32_System_MessageQueuing" = [ "Win32_System" ];
          "Win32_System_MixedReality" = [ "Win32_System" ];
          "Win32_System_Ole" = [ "Win32_System" ];
          "Win32_System_PasswordManagement" = [ "Win32_System" ];
          "Win32_System_Performance" = [ "Win32_System" ];
          "Win32_System_Performance_HardwareCounterProfiling" = [ "Win32_System_Performance" ];
          "Win32_System_Pipes" = [ "Win32_System" ];
          "Win32_System_Power" = [ "Win32_System" ];
          "Win32_System_ProcessStatus" = [ "Win32_System" ];
          "Win32_System_Recovery" = [ "Win32_System" ];
          "Win32_System_Registry" = [ "Win32_System" ];
          "Win32_System_RemoteDesktop" = [ "Win32_System" ];
          "Win32_System_RemoteManagement" = [ "Win32_System" ];
          "Win32_System_RestartManager" = [ "Win32_System" ];
          "Win32_System_Restore" = [ "Win32_System" ];
          "Win32_System_Rpc" = [ "Win32_System" ];
          "Win32_System_Search" = [ "Win32_System" ];
          "Win32_System_Search_Common" = [ "Win32_System_Search" ];
          "Win32_System_SecurityCenter" = [ "Win32_System" ];
          "Win32_System_Services" = [ "Win32_System" ];
          "Win32_System_SetupAndMigration" = [ "Win32_System" ];
          "Win32_System_Shutdown" = [ "Win32_System" ];
          "Win32_System_StationsAndDesktops" = [ "Win32_System" ];
          "Win32_System_SubsystemForLinux" = [ "Win32_System" ];
          "Win32_System_SystemInformation" = [ "Win32_System" ];
          "Win32_System_SystemServices" = [ "Win32_System" ];
          "Win32_System_Threading" = [ "Win32_System" ];
          "Win32_System_Time" = [ "Win32_System" ];
          "Win32_System_TpmBaseServices" = [ "Win32_System" ];
          "Win32_System_UserAccessLogging" = [ "Win32_System" ];
          "Win32_System_Variant" = [ "Win32_System" ];
          "Win32_System_VirtualDosMachines" = [ "Win32_System" ];
          "Win32_System_WindowsProgramming" = [ "Win32_System" ];
          "Win32_System_Wmi" = [ "Win32_System" ];
          "Win32_UI" = [ "Win32" ];
          "Win32_UI_Accessibility" = [ "Win32_UI" ];
          "Win32_UI_ColorSystem" = [ "Win32_UI" ];
          "Win32_UI_Controls" = [ "Win32_UI" ];
          "Win32_UI_Controls_Dialogs" = [ "Win32_UI_Controls" ];
          "Win32_UI_HiDpi" = [ "Win32_UI" ];
          "Win32_UI_Input" = [ "Win32_UI" ];
          "Win32_UI_Input_Ime" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_KeyboardAndMouse" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Pointer" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_Touch" = [ "Win32_UI_Input" ];
          "Win32_UI_Input_XboxController" = [ "Win32_UI_Input" ];
          "Win32_UI_InteractionContext" = [ "Win32_UI" ];
          "Win32_UI_Magnification" = [ "Win32_UI" ];
          "Win32_UI_Shell" = [ "Win32_UI" ];
          "Win32_UI_Shell_Common" = [ "Win32_UI_Shell" ];
          "Win32_UI_Shell_PropertiesSystem" = [ "Win32_UI_Shell" ];
          "Win32_UI_TabletPC" = [ "Win32_UI" ];
          "Win32_UI_TextServices" = [ "Win32_UI" ];
          "Win32_UI_WindowsAndMessaging" = [ "Win32_UI" ];
          "Win32_Web" = [ "Win32" ];
          "Win32_Web_InternetExplorer" = [ "Win32_Web" ];
        };
        resolvedDefaultFeatures = [
          "Wdk"
          "Wdk_Foundation"
          "Wdk_Storage"
          "Wdk_Storage_FileSystem"
          "Win32"
          "Win32_Foundation"
          "Win32_Networking"
          "Win32_Networking_WinSock"
          "Win32_Security"
          "Win32_Storage"
          "Win32_Storage_FileSystem"
          "Win32_System"
          "Win32_System_Com"
          "Win32_System_Console"
          "Win32_System_IO"
          "Win32_System_LibraryLoader"
          "Win32_System_SystemInformation"
          "Win32_System_Threading"
          "Win32_System_WindowsProgramming"
          "Win32_UI"
          "Win32_UI_Shell"
          "default"
        ];
      };
      "windows-targets 0.42.2" = rec {
        crateName = "windows-targets";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0wfhnib2fisxlx8c507dbmh97kgij4r6kcxdi0f9nk6l1k080lcf";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.42.2";
            target = { target, features }: (target.name == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.42.2";
            target = { target, features }: (target.name == "aarch64-pc-windows-msvc");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.42.2";
            target = { target, features }: (target.name == "aarch64-uwp-windows-msvc");
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.42.2";
            target = { target, features }: (target.name == "i686-pc-windows-gnu");
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.42.2";
            target = { target, features }: (target.name == "i686-uwp-windows-gnu");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.42.2";
            target = { target, features }: (target.name == "i686-pc-windows-msvc");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.42.2";
            target = { target, features }: (target.name == "i686-uwp-windows-msvc");
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.42.2";
            target = { target, features }: (target.name == "x86_64-pc-windows-gnu");
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.42.2";
            target = { target, features }: (target.name == "x86_64-uwp-windows-gnu");
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.42.2";
            target = { target, features }: (target.name == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.42.2";
            target = { target, features }: (target.name == "x86_64-pc-windows-msvc");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.42.2";
            target = { target, features }: (target.name == "x86_64-uwp-windows-msvc");
          }
        ];

      };
      "windows-targets 0.48.5" = rec {
        crateName = "windows-targets";
        version = "0.48.5";
        edition = "2018";
        sha256 = "034ljxqshifs1lan89xwpcy1hp0lhdh4b5n0d2z4fwjx2piacbws";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.48.5";
            target = { target, features }: (target.name == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.48.5";
            target =
              { target, features }:
              (
                ("aarch64" == target."arch" or null)
                && ("msvc" == target."env" or null)
                && (!(target."windows_raw_dylib" or false))
              );
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.48.5";
            target =
              { target, features }:
              (
                ("x86" == target."arch" or null)
                && ("gnu" == target."env" or null)
                && (!(target."windows_raw_dylib" or false))
              );
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.48.5";
            target =
              { target, features }:
              (
                ("x86" == target."arch" or null)
                && ("msvc" == target."env" or null)
                && (!(target."windows_raw_dylib" or false))
              );
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.48.5";
            target =
              { target, features }:
              (
                ("x86_64" == target."arch" or null)
                && ("gnu" == target."env" or null)
                && (!("llvm" == target."abi" or null))
                && (!(target."windows_raw_dylib" or false))
              );
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.48.5";
            target = { target, features }: (target.name == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.48.5";
            target =
              { target, features }:
              (
                ("x86_64" == target."arch" or null)
                && ("msvc" == target."env" or null)
                && (!(target."windows_raw_dylib" or false))
              );
          }
        ];

      };
      "windows-targets 0.52.6" = rec {
        crateName = "windows-targets";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0wwrx625nwlfp7k93r2rra568gad1mwd888h1jwnl0vfg5r4ywlv";
        libName = "windows_targets";
        authors = [
          "Microsoft"
        ];
        dependencies = [
          {
            name = "windows_aarch64_gnullvm";
            packageId = "windows_aarch64_gnullvm 0.52.6";
            target = { target, features }: (target.name == "aarch64-pc-windows-gnullvm");
          }
          {
            name = "windows_aarch64_msvc";
            packageId = "windows_aarch64_msvc 0.52.6";
            target =
              { target, features }:
              (
                ("aarch64" == target."arch" or null)
                && ("msvc" == target."env" or null)
                && (!(target."windows_raw_dylib" or false))
              );
          }
          {
            name = "windows_i686_gnu";
            packageId = "windows_i686_gnu 0.52.6";
            target =
              { target, features }:
              (
                ("x86" == target."arch" or null)
                && ("gnu" == target."env" or null)
                && (!("llvm" == target."abi" or null))
                && (!(target."windows_raw_dylib" or false))
              );
          }
          {
            name = "windows_i686_gnullvm";
            packageId = "windows_i686_gnullvm";
            target = { target, features }: (target.name == "i686-pc-windows-gnullvm");
          }
          {
            name = "windows_i686_msvc";
            packageId = "windows_i686_msvc 0.52.6";
            target =
              { target, features }:
              (
                ("x86" == target."arch" or null)
                && ("msvc" == target."env" or null)
                && (!(target."windows_raw_dylib" or false))
              );
          }
          {
            name = "windows_x86_64_gnu";
            packageId = "windows_x86_64_gnu 0.52.6";
            target =
              { target, features }:
              (
                ("x86_64" == target."arch" or null)
                && ("gnu" == target."env" or null)
                && (!("llvm" == target."abi" or null))
                && (!(target."windows_raw_dylib" or false))
              );
          }
          {
            name = "windows_x86_64_gnullvm";
            packageId = "windows_x86_64_gnullvm 0.52.6";
            target = { target, features }: (target.name == "x86_64-pc-windows-gnullvm");
          }
          {
            name = "windows_x86_64_msvc";
            packageId = "windows_x86_64_msvc 0.52.6";
            target =
              { target, features }:
              (
                (("x86_64" == target."arch" or null) || ("arm64ec" == target."arch" or null))
                && ("msvc" == target."env" or null)
                && (!(target."windows_raw_dylib" or false))
              );
          }
        ];

      };
      "windows_aarch64_gnullvm 0.42.2" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.42.2";
        edition = "2018";
        sha256 = "1y4q0qmvl0lvp7syxvfykafvmwal5hrjb4fmv04bqs0bawc52yjr";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_gnullvm 0.48.5" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1n05v7qblg1ci3i567inc7xrkmywczxrs1z3lj3rkkxw18py6f1b";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_gnullvm 0.52.6" = rec {
        crateName = "windows_aarch64_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "1lrcq38cr2arvmz19v32qaggvj8bh1640mdm9c2fr877h0hn591j";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.42.2" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0hsdikjl5sa1fva5qskpwlxzpc5q9l909fpl1w6yy1hglrj8i3p0";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.48.5" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1g5l4ry968p73g6bg6jgyvy9lb8fyhcs54067yzxpcpkf44k2dfw";
        authors = [
          "Microsoft"
        ];

      };
      "windows_aarch64_msvc 0.52.6" = rec {
        crateName = "windows_aarch64_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0sfl0nysnz32yyfh773hpi49b1q700ah6y7sacmjbqjjn5xjmv09";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.42.2" = rec {
        crateName = "windows_i686_gnu";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0kx866dfrby88lqs9v1vgmrkk1z6af9lhaghh5maj7d4imyr47f6";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.48.5" = rec {
        crateName = "windows_i686_gnu";
        version = "0.48.5";
        edition = "2018";
        sha256 = "0gklnglwd9ilqx7ac3cn8hbhkraqisd0n83jxzf9837nvvkiand7";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnu 0.52.6" = rec {
        crateName = "windows_i686_gnu";
        version = "0.52.6";
        edition = "2021";
        sha256 = "02zspglbykh1jh9pi7gn8g1f97jh1rrccni9ivmrfbl0mgamm6wf";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_gnullvm" = rec {
        crateName = "windows_i686_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0rpdx1537mw6slcpqa0rm3qixmsb79nbhqy5fsm3q2q9ik9m5vhf";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.42.2" = rec {
        crateName = "windows_i686_msvc";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0q0h9m2aq1pygc199pa5jgc952qhcnf0zn688454i7v4xjv41n24";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.48.5" = rec {
        crateName = "windows_i686_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "01m4rik437dl9rdf0ndnm2syh10hizvq0dajdkv2fjqcywrw4mcg";
        authors = [
          "Microsoft"
        ];

      };
      "windows_i686_msvc 0.52.6" = rec {
        crateName = "windows_i686_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0rkcqmp4zzmfvrrrx01260q3xkpzi6fzi2x2pgdcdry50ny4h294";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.42.2" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.42.2";
        edition = "2018";
        sha256 = "0dnbf2xnp3xrvy8v9mgs3var4zq9v9yh9kv79035rdgyp2w15scd";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.48.5" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.48.5";
        edition = "2018";
        sha256 = "13kiqqcvz2vnyxzydjh73hwgigsdr2z1xpzx313kxll34nyhmm2k";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnu 0.52.6" = rec {
        crateName = "windows_x86_64_gnu";
        version = "0.52.6";
        edition = "2021";
        sha256 = "0y0sifqcb56a56mvn7xjgs8g43p33mfqkd8wj1yhrgxzma05qyhl";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.42.2" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.42.2";
        edition = "2018";
        sha256 = "18wl9r8qbsl475j39zvawlidp1bsbinliwfymr43fibdld31pm16";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.48.5" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.48.5";
        edition = "2018";
        sha256 = "1k24810wfbgz8k48c2yknqjmiigmql6kk3knmddkv8k8g1v54yqb";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_gnullvm 0.52.6" = rec {
        crateName = "windows_x86_64_gnullvm";
        version = "0.52.6";
        edition = "2021";
        sha256 = "03gda7zjx1qh8k9nnlgb7m3w3s1xkysg55hkd1wjch8pqhyv5m94";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.42.2" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.42.2";
        edition = "2018";
        sha256 = "1w5r0q0yzx827d10dpjza2ww0j8iajqhmb54s735hhaj66imvv4s";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.48.5" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.48.5";
        edition = "2018";
        sha256 = "0f4mdp895kkjh9zv8dxvn4pc10xr7839lf5pa9l0193i2pkgr57d";
        authors = [
          "Microsoft"
        ];

      };
      "windows_x86_64_msvc 0.52.6" = rec {
        crateName = "windows_x86_64_msvc";
        version = "0.52.6";
        edition = "2021";
        sha256 = "1v7rb5cibyzx8vak29pdrk8nx9hycsjs4w0jgms08qk49jl6v7sq";
        authors = [
          "Microsoft"
        ];

      };
      "winit" = rec {
        crateName = "winit";
        version = "0.29.15";
        edition = "2021";
        sha256 = "1jp5j96hcr6xif7asgck522791fqmlmhd3wwy3x5fmk3babasn8d";
        authors = [
          "The winit contributors"
          "Pierre Krieger <pierre.krieger1708@gmail.com>"
        ];
        dependencies = [
          {
            name = "ahash";
            packageId = "ahash";
            optional = true;
            target =
              { target, features }:
              (
                (target."unix" or false)
                && (
                  !(
                    ("redox" == target."os" or null)
                    || (builtins.elem "wasm" target."family")
                    || ("android" == target."os" or null)
                    || ("ios" == target."os" or null)
                    || ("macos" == target."os" or null)
                  )
                )
              );
            features = [ "no-rng" ];
          }
          {
            name = "android-activity";
            packageId = "android-activity";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "atomic-waker";
            packageId = "atomic-waker";
            target = { target, features }: (builtins.elem "wasm" target."family");
          }
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "bytemuck";
            packageId = "bytemuck";
            optional = true;
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (target."unix" or false)
                && (
                  !(
                    ("redox" == target."os" or null)
                    || (builtins.elem "wasm" target."family")
                    || ("android" == target."os" or null)
                    || ("ios" == target."os" or null)
                    || ("macos" == target."os" or null)
                  )
                )
              );
          }
          {
            name = "calloop";
            packageId = "calloop 0.12.4";
            target =
              { target, features }:
              (
                (target."unix" or false)
                && (
                  !(
                    ("redox" == target."os" or null)
                    || (builtins.elem "wasm" target."family")
                    || ("android" == target."os" or null)
                    || ("ios" == target."os" or null)
                    || ("macos" == target."os" or null)
                  )
                )
              );
          }
          {
            name = "core-foundation";
            packageId = "core-foundation 0.9.4";
            target = { target, features }: (("ios" == target."os" or null) || ("macos" == target."os" or null));
          }
          {
            name = "core-graphics";
            packageId = "core-graphics";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "cursor-icon";
            packageId = "cursor-icon";
          }
          {
            name = "icrate";
            packageId = "icrate";
            target = { target, features }: ("ios" == target."os" or null);
            features = [
              "dispatch"
              "Foundation"
              "Foundation_NSArray"
              "Foundation_NSString"
              "Foundation_NSProcessInfo"
              "Foundation_NSThread"
              "Foundation_NSSet"
            ];
          }
          {
            name = "icrate";
            packageId = "icrate";
            target = { target, features }: ("macos" == target."os" or null);
            features = [
              "dispatch"
              "Foundation"
              "Foundation_NSArray"
              "Foundation_NSAttributedString"
              "Foundation_NSMutableAttributedString"
              "Foundation_NSData"
              "Foundation_NSDictionary"
              "Foundation_NSString"
              "Foundation_NSProcessInfo"
              "Foundation_NSThread"
              "Foundation_NSNumber"
            ];
          }
          {
            name = "js-sys";
            packageId = "js-sys";
            target = { target, features }: (builtins.elem "wasm" target."family");
          }
          {
            name = "libc";
            packageId = "libc";
            target =
              { target, features }:
              (
                (target."unix" or false)
                && (
                  !(
                    ("redox" == target."os" or null)
                    || (builtins.elem "wasm" target."family")
                    || ("android" == target."os" or null)
                    || ("ios" == target."os" or null)
                    || ("macos" == target."os" or null)
                  )
                )
              );
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "memmap2";
            packageId = "memmap2";
            optional = true;
            target =
              { target, features }:
              (
                (target."unix" or false)
                && (
                  !(
                    ("redox" == target."os" or null)
                    || (builtins.elem "wasm" target."family")
                    || ("android" == target."os" or null)
                    || ("ios" == target."os" or null)
                    || ("macos" == target."os" or null)
                  )
                )
              );
          }
          {
            name = "ndk";
            packageId = "ndk";
            usesDefaultFeatures = false;
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "ndk-sys";
            packageId = "ndk-sys";
            target = { target, features }: ("android" == target."os" or null);
          }
          {
            name = "objc2";
            packageId = "objc2 0.4.1";
            target = { target, features }: (("ios" == target."os" or null) || ("macos" == target."os" or null));
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "orbclient";
            packageId = "orbclient";
            usesDefaultFeatures = false;
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "percent-encoding";
            packageId = "percent-encoding";
            optional = true;
            target =
              { target, features }:
              (
                (target."unix" or false)
                && (
                  !(
                    ("redox" == target."os" or null)
                    || (builtins.elem "wasm" target."family")
                    || ("android" == target."os" or null)
                    || ("ios" == target."os" or null)
                    || ("macos" == target."os" or null)
                  )
                )
              );
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle 0.5.2";
            rename = "rwh_05";
            optional = true;
            features = [ "std" ];
          }
          {
            name = "raw-window-handle";
            packageId = "raw-window-handle 0.6.2";
            rename = "rwh_06";
            optional = true;
            features = [ "std" ];
          }
          {
            name = "redox_syscall";
            packageId = "redox_syscall 0.3.5";
            target = { target, features }: ("redox" == target."os" or null);
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.37";
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (target."unix" or false)
                && (
                  !(
                    ("redox" == target."os" or null)
                    || (builtins.elem "wasm" target."family")
                    || ("android" == target."os" or null)
                    || ("ios" == target."os" or null)
                    || ("macos" == target."os" or null)
                  )
                )
              );
            features = [
              "std"
              "system"
              "thread"
              "process"
            ];
          }
          {
            name = "sctk-adwaita";
            packageId = "sctk-adwaita";
            optional = true;
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (target."unix" or false)
                && (
                  !(
                    ("redox" == target."os" or null)
                    || (builtins.elem "wasm" target."family")
                    || ("android" == target."os" or null)
                    || ("ios" == target."os" or null)
                    || ("macos" == target."os" or null)
                  )
                )
              );
          }
          {
            name = "smithay-client-toolkit";
            packageId = "smithay-client-toolkit 0.18.1";
            rename = "sctk";
            optional = true;
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (target."unix" or false)
                && (
                  !(
                    ("redox" == target."os" or null)
                    || (builtins.elem "wasm" target."family")
                    || ("android" == target."os" or null)
                    || ("ios" == target."os" or null)
                    || ("macos" == target."os" or null)
                  )
                )
              );
            features = [ "calloop" ];
          }
          {
            name = "smol_str";
            packageId = "smol_str";
          }
          {
            name = "unicode-segmentation";
            packageId = "unicode-segmentation";
            target = { target, features }: ("windows" == target."os" or null);
          }
          {
            name = "wasm-bindgen";
            packageId = "wasm-bindgen";
            target = { target, features }: (builtins.elem "wasm" target."family");
          }
          {
            name = "wasm-bindgen-futures";
            packageId = "wasm-bindgen-futures";
            target = { target, features }: (builtins.elem "wasm" target."family");
          }
          {
            name = "wayland-backend";
            packageId = "wayland-backend";
            optional = true;
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (target."unix" or false)
                && (
                  !(
                    ("redox" == target."os" or null)
                    || (builtins.elem "wasm" target."family")
                    || ("android" == target."os" or null)
                    || ("ios" == target."os" or null)
                    || ("macos" == target."os" or null)
                  )
                )
              );
            features = [ "client_system" ];
          }
          {
            name = "wayland-client";
            packageId = "wayland-client";
            optional = true;
            target =
              { target, features }:
              (
                (target."unix" or false)
                && (
                  !(
                    ("redox" == target."os" or null)
                    || (builtins.elem "wasm" target."family")
                    || ("android" == target."os" or null)
                    || ("ios" == target."os" or null)
                    || ("macos" == target."os" or null)
                  )
                )
              );
          }
          {
            name = "wayland-protocols";
            packageId = "wayland-protocols 0.31.2";
            optional = true;
            target =
              { target, features }:
              (
                (target."unix" or false)
                && (
                  !(
                    ("redox" == target."os" or null)
                    || (builtins.elem "wasm" target."family")
                    || ("android" == target."os" or null)
                    || ("ios" == target."os" or null)
                    || ("macos" == target."os" or null)
                  )
                )
              );
            features = [ "staging" ];
          }
          {
            name = "wayland-protocols-plasma";
            packageId = "wayland-protocols-plasma";
            optional = true;
            target =
              { target, features }:
              (
                (target."unix" or false)
                && (
                  !(
                    ("redox" == target."os" or null)
                    || (builtins.elem "wasm" target."family")
                    || ("android" == target."os" or null)
                    || ("ios" == target."os" or null)
                    || ("macos" == target."os" or null)
                  )
                )
              );
            features = [ "client" ];
          }
          {
            name = "web-sys";
            packageId = "web-sys";
            rename = "web_sys";
            target = { target, features }: (builtins.elem "wasm" target."family");
            features = [
              "AbortController"
              "AbortSignal"
              "console"
              "CssStyleDeclaration"
              "Document"
              "DomRect"
              "DomRectReadOnly"
              "Element"
              "Event"
              "EventTarget"
              "FocusEvent"
              "HtmlCanvasElement"
              "HtmlElement"
              "IntersectionObserver"
              "IntersectionObserverEntry"
              "KeyboardEvent"
              "MediaQueryList"
              "MessageChannel"
              "MessagePort"
              "Node"
              "PageTransitionEvent"
              "PointerEvent"
              "ResizeObserver"
              "ResizeObserverBoxOptions"
              "ResizeObserverEntry"
              "ResizeObserverOptions"
              "ResizeObserverSize"
              "VisibilityState"
              "Window"
              "WheelEvent"
            ];
          }
          {
            name = "web-time";
            packageId = "web-time";
            target = { target, features }: (builtins.elem "wasm" target."family");
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.48.0";
            target = { target, features }: ("windows" == target."os" or null);
            features = [
              "Win32_Devices_HumanInterfaceDevice"
              "Win32_Foundation"
              "Win32_Globalization"
              "Win32_Graphics_Dwm"
              "Win32_Graphics_Gdi"
              "Win32_Media"
              "Win32_System_Com_StructuredStorage"
              "Win32_System_Com"
              "Win32_System_LibraryLoader"
              "Win32_System_Ole"
              "Win32_System_SystemInformation"
              "Win32_System_SystemServices"
              "Win32_System_Threading"
              "Win32_System_WindowsProgramming"
              "Win32_UI_Accessibility"
              "Win32_UI_Controls"
              "Win32_UI_HiDpi"
              "Win32_UI_Input_Ime"
              "Win32_UI_Input_KeyboardAndMouse"
              "Win32_UI_Input_Pointer"
              "Win32_UI_Input_Touch"
              "Win32_UI_Shell"
              "Win32_UI_TextServices"
              "Win32_UI_WindowsAndMessaging"
            ];
          }
          {
            name = "x11-dl";
            packageId = "x11-dl";
            optional = true;
            target =
              { target, features }:
              (
                (target."unix" or false)
                && (
                  !(
                    ("redox" == target."os" or null)
                    || (builtins.elem "wasm" target."family")
                    || ("android" == target."os" or null)
                    || ("ios" == target."os" or null)
                    || ("macos" == target."os" or null)
                  )
                )
              );
          }
          {
            name = "x11rb";
            packageId = "x11rb";
            optional = true;
            usesDefaultFeatures = false;
            target =
              { target, features }:
              (
                (target."unix" or false)
                && (
                  !(
                    ("redox" == target."os" or null)
                    || (builtins.elem "wasm" target."family")
                    || ("android" == target."os" or null)
                    || ("ios" == target."os" or null)
                    || ("macos" == target."os" or null)
                  )
                )
              );
            features = [
              "allow-unsafe-code"
              "dl-libxcb"
              "randr"
              "resource_manager"
              "xinput"
              "xkb"
            ];
          }
          {
            name = "xkbcommon-dl";
            packageId = "xkbcommon-dl";
            target =
              { target, features }:
              (
                (target."unix" or false)
                && (
                  !(
                    ("redox" == target."os" or null)
                    || (builtins.elem "wasm" target."family")
                    || ("android" == target."os" or null)
                    || ("ios" == target."os" or null)
                    || ("macos" == target."os" or null)
                  )
                )
              );
          }
        ];
        buildDependencies = [
          {
            name = "cfg_aliases";
            packageId = "cfg_aliases 0.1.1";
          }
        ];
        devDependencies = [
          {
            name = "web-sys";
            packageId = "web-sys";
            target = { target, features }: (builtins.elem "wasm" target."family");
            features = [ "CanvasRenderingContext2d" ];
          }
        ];
        features = {
          "ahash" = [ "dep:ahash" ];
          "android-game-activity" = [ "android-activity/game-activity" ];
          "android-native-activity" = [ "android-activity/native-activity" ];
          "bytemuck" = [ "dep:bytemuck" ];
          "default" = [
            "rwh_06"
            "x11"
            "wayland"
            "wayland-dlopen"
            "wayland-csd-adwaita"
          ];
          "memmap2" = [ "dep:memmap2" ];
          "mint" = [ "dep:mint" ];
          "percent-encoding" = [ "dep:percent-encoding" ];
          "rwh_04" = [
            "dep:rwh_04"
            "ndk/rwh_04"
          ];
          "rwh_05" = [
            "dep:rwh_05"
            "ndk/rwh_05"
          ];
          "rwh_06" = [
            "dep:rwh_06"
            "ndk/rwh_06"
          ];
          "sctk" = [ "dep:sctk" ];
          "sctk-adwaita" = [ "dep:sctk-adwaita" ];
          "serde" = [
            "dep:serde"
            "cursor-icon/serde"
            "smol_str/serde"
          ];
          "wayland" = [
            "wayland-client"
            "wayland-backend"
            "wayland-protocols"
            "wayland-protocols-plasma"
            "sctk"
            "ahash"
            "memmap2"
          ];
          "wayland-backend" = [ "dep:wayland-backend" ];
          "wayland-client" = [ "dep:wayland-client" ];
          "wayland-csd-adwaita" = [
            "sctk-adwaita"
            "sctk-adwaita/ab_glyph"
          ];
          "wayland-csd-adwaita-crossfont" = [
            "sctk-adwaita"
            "sctk-adwaita/crossfont"
          ];
          "wayland-csd-adwaita-notitle" = [ "sctk-adwaita" ];
          "wayland-dlopen" = [ "wayland-backend/dlopen" ];
          "wayland-protocols" = [ "dep:wayland-protocols" ];
          "wayland-protocols-plasma" = [ "dep:wayland-protocols-plasma" ];
          "x11" = [
            "x11-dl"
            "bytemuck"
            "percent-encoding"
            "xkbcommon-dl/x11"
            "x11rb"
          ];
          "x11-dl" = [ "dep:x11-dl" ];
          "x11rb" = [ "dep:x11rb" ];
        };
        resolvedDefaultFeatures = [
          "ahash"
          "bytemuck"
          "default"
          "memmap2"
          "percent-encoding"
          "rwh_05"
          "rwh_06"
          "sctk"
          "sctk-adwaita"
          "wayland"
          "wayland-backend"
          "wayland-client"
          "wayland-csd-adwaita"
          "wayland-dlopen"
          "wayland-protocols"
          "wayland-protocols-plasma"
          "x11"
          "x11-dl"
          "x11rb"
        ];
      };
      "winnow 0.5.40" = rec {
        crateName = "winnow";
        version = "0.5.40";
        edition = "2021";
        sha256 = "0xk8maai7gyxda673mmw3pj1hdizy5fpi7287vaywykkk19sk4zm";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "debug" = [
            "dep:anstream"
            "dep:anstyle"
            "dep:is-terminal"
            "dep:terminal_size"
          ];
          "default" = [ "std" ];
          "simd" = [ "dep:memchr" ];
          "std" = [
            "alloc"
            "memchr?/std"
          ];
          "unstable-doc" = [
            "alloc"
            "std"
            "simd"
            "unstable-recover"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "winnow 0.6.18" = rec {
        crateName = "winnow";
        version = "0.6.18";
        edition = "2021";
        sha256 = "0vrsrnf2nm9jsk1161x1vacmi3ns4h3h10fib91rs28zd6jbvab8";
        dependencies = [
          {
            name = "memchr";
            packageId = "memchr";
            optional = true;
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "debug" = [
            "std"
            "dep:anstream"
            "dep:anstyle"
            "dep:is-terminal"
            "dep:terminal_size"
          ];
          "default" = [ "std" ];
          "simd" = [ "dep:memchr" ];
          "std" = [
            "alloc"
            "memchr?/std"
          ];
          "unstable-doc" = [
            "alloc"
            "std"
            "simd"
            "unstable-recover"
          ];
        };
        resolvedDefaultFeatures = [
          "alloc"
          "default"
          "std"
        ];
      };
      "wio" = rec {
        crateName = "wio";
        version = "0.2.2";
        edition = "2015";
        sha256 = "199p404fp96w1f1c93bf1jrvaqwypxf3hmmldhww4jk4yhr9j4jx";
        authors = [
          "Peter Atashian <retep998@gmail.com>"
        ];
        dependencies = [
          {
            name = "winapi";
            packageId = "winapi";
            features = [
              "consoleapi"
              "errhandlingapi"
              "fileapi"
              "handleapi"
              "minwindef"
              "processthreadsapi"
              "std"
              "unknwnbase"
              "wincon"
              "winnt"
            ];
          }
        ];

      };
      "x11-dl" = rec {
        crateName = "x11-dl";
        version = "2.21.0";
        edition = "2021";
        sha256 = "0vsiq62xpcfm0kn9zjw5c9iycvccxl22jya8wnk18lyxzqj5jwrq";
        libName = "x11_dl";
        authors = [
          "daggerbot <daggerbot@gmail.com>"
          "Erle Pereira <erle@erlepereira.com>"
          "AltF02 <contact@altf2.dev>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
        ];
        buildDependencies = [
          {
            name = "pkg-config";
            packageId = "pkg-config";
          }
        ];

      };
      "x11rb" = rec {
        crateName = "x11rb";
        version = "0.13.1";
        edition = "2021";
        sha256 = "04jyfm0xmc538v09pzsyr2w801yadsgvyl2p0p76hzzffg5gz4ax";
        authors = [
          "Uli Schlachter <psychon@znc.in>"
          "Eduardo Sánchez Muñoz <eduardosm-dev@e64.io>"
          "notgull <jtnunley01@gmail.com>"
        ];
        dependencies = [
          {
            name = "as-raw-xcb-connection";
            packageId = "as-raw-xcb-connection";
            optional = true;
          }
          {
            name = "gethostname";
            packageId = "gethostname";
            target = { target, features }: (!(target."unix" or false));
          }
          {
            name = "libc";
            packageId = "libc";
            optional = true;
          }
          {
            name = "libloading";
            packageId = "libloading 0.8.5";
            optional = true;
          }
          {
            name = "once_cell";
            packageId = "once_cell";
            optional = true;
          }
          {
            name = "rustix";
            packageId = "rustix 0.38.37";
            usesDefaultFeatures = false;
            features = [
              "std"
              "event"
              "fs"
              "net"
              "system"
            ];
          }
          {
            name = "x11rb-protocol";
            packageId = "x11rb-protocol";
            usesDefaultFeatures = false;
            features = [ "std" ];
          }
        ];
        devDependencies = [
          {
            name = "gethostname";
            packageId = "gethostname";
          }
        ];
        features = {
          "all-extensions" = [
            "x11rb-protocol/all-extensions"
            "composite"
            "damage"
            "dbe"
            "dpms"
            "dri2"
            "dri3"
            "glx"
            "present"
            "randr"
            "record"
            "render"
            "res"
            "screensaver"
            "shape"
            "shm"
            "sync"
            "xevie"
            "xf86dri"
            "xf86vidmode"
            "xfixes"
            "xinerama"
            "xinput"
            "xkb"
            "xprint"
            "xselinux"
            "xtest"
            "xv"
            "xvmc"
          ];
          "allow-unsafe-code" = [
            "libc"
            "as-raw-xcb-connection"
          ];
          "as-raw-xcb-connection" = [ "dep:as-raw-xcb-connection" ];
          "composite" = [
            "x11rb-protocol/composite"
            "xfixes"
          ];
          "cursor" = [
            "render"
            "resource_manager"
          ];
          "damage" = [
            "x11rb-protocol/damage"
            "xfixes"
          ];
          "dbe" = [ "x11rb-protocol/dbe" ];
          "dl-libxcb" = [
            "allow-unsafe-code"
            "libloading"
            "once_cell"
          ];
          "dpms" = [ "x11rb-protocol/dpms" ];
          "dri2" = [ "x11rb-protocol/dri2" ];
          "dri3" = [ "x11rb-protocol/dri3" ];
          "extra-traits" = [ "x11rb-protocol/extra-traits" ];
          "glx" = [ "x11rb-protocol/glx" ];
          "libc" = [ "dep:libc" ];
          "libloading" = [ "dep:libloading" ];
          "once_cell" = [ "dep:once_cell" ];
          "present" = [
            "x11rb-protocol/present"
            "randr"
            "xfixes"
            "sync"
          ];
          "randr" = [
            "x11rb-protocol/randr"
            "render"
          ];
          "record" = [ "x11rb-protocol/record" ];
          "render" = [ "x11rb-protocol/render" ];
          "request-parsing" = [ "x11rb-protocol/request-parsing" ];
          "res" = [ "x11rb-protocol/res" ];
          "resource_manager" = [ "x11rb-protocol/resource_manager" ];
          "screensaver" = [ "x11rb-protocol/screensaver" ];
          "shape" = [ "x11rb-protocol/shape" ];
          "shm" = [ "x11rb-protocol/shm" ];
          "sync" = [ "x11rb-protocol/sync" ];
          "tracing" = [ "dep:tracing" ];
          "xevie" = [ "x11rb-protocol/xevie" ];
          "xf86dri" = [ "x11rb-protocol/xf86dri" ];
          "xf86vidmode" = [ "x11rb-protocol/xf86vidmode" ];
          "xfixes" = [
            "x11rb-protocol/xfixes"
            "render"
            "shape"
          ];
          "xinerama" = [ "x11rb-protocol/xinerama" ];
          "xinput" = [
            "x11rb-protocol/xinput"
            "xfixes"
          ];
          "xkb" = [ "x11rb-protocol/xkb" ];
          "xprint" = [ "x11rb-protocol/xprint" ];
          "xselinux" = [ "x11rb-protocol/xselinux" ];
          "xtest" = [ "x11rb-protocol/xtest" ];
          "xv" = [
            "x11rb-protocol/xv"
            "shm"
          ];
          "xvmc" = [
            "x11rb-protocol/xvmc"
            "xv"
          ];
        };
        resolvedDefaultFeatures = [
          "allow-unsafe-code"
          "as-raw-xcb-connection"
          "dl-libxcb"
          "libc"
          "libloading"
          "once_cell"
          "randr"
          "render"
          "resource_manager"
          "shape"
          "xfixes"
          "xinput"
          "xkb"
        ];
      };
      "x11rb-protocol" = rec {
        crateName = "x11rb-protocol";
        version = "0.13.1";
        edition = "2021";
        sha256 = "0gfbxf2k7kbk577j3rjhfx7hm70kmwln6da7xyc4l2za0d2pq47c";
        libName = "x11rb_protocol";
        authors = [
          "Uli Schlachter <psychon@znc.in>"
          "Eduardo Sánchez Muñoz <eduardosm-dev@e64.io>"
          "notgull <jtnunley01@gmail.com>"
        ];
        features = {
          "all-extensions" = [
            "composite"
            "damage"
            "dbe"
            "dpms"
            "dri2"
            "dri3"
            "glx"
            "present"
            "randr"
            "record"
            "render"
            "res"
            "screensaver"
            "shape"
            "shm"
            "sync"
            "xevie"
            "xf86dri"
            "xf86vidmode"
            "xfixes"
            "xinerama"
            "xinput"
            "xkb"
            "xprint"
            "xselinux"
            "xtest"
            "xv"
            "xvmc"
          ];
          "composite" = [ "xfixes" ];
          "damage" = [ "xfixes" ];
          "default" = [ "std" ];
          "present" = [
            "randr"
            "xfixes"
            "sync"
          ];
          "randr" = [ "render" ];
          "resource_manager" = [ "std" ];
          "serde" = [ "dep:serde" ];
          "xfixes" = [
            "render"
            "shape"
          ];
          "xinput" = [ "xfixes" ];
          "xv" = [ "shm" ];
          "xvmc" = [ "xv" ];
        };
        resolvedDefaultFeatures = [
          "randr"
          "render"
          "resource_manager"
          "shape"
          "std"
          "xfixes"
          "xinput"
          "xkb"
        ];
      };
      "xcursor" = rec {
        crateName = "xcursor";
        version = "0.3.8";
        edition = "2018";
        sha256 = "0qazsl7h8nrbbzx84qrv39w8m2qc27g0mvrszgdls2v6n6k3vwqf";
        authors = [
          "Samuele Esposito"
        ];

      };
      "xdg-home" = rec {
        crateName = "xdg-home";
        version = "1.3.0";
        edition = "2021";
        sha256 = "1xm122zz0wjc8p8cmchij0j9nw34hwncb39jc7dc0mgvb2rdl77c";
        libName = "xdg_home";
        authors = [
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "libc";
            packageId = "libc";
            target = { target, features }: (target."unix" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.59.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_UI_Shell"
              "Win32_System_Com"
            ];
          }
        ];

      };
      "xkbcommon-dl" = rec {
        crateName = "xkbcommon-dl";
        version = "0.4.2";
        edition = "2021";
        sha256 = "1iai0r3b5skd9vbr8z5b0qixiz8jblzfm778ddm8ba596a0dwffh";
        libName = "xkbcommon_dl";
        authors = [
          "Francesca Frangipane <francesca@comfysoft.net>"
        ];
        dependencies = [
          {
            name = "bitflags";
            packageId = "bitflags 2.6.0";
          }
          {
            name = "dlib";
            packageId = "dlib";
          }
          {
            name = "log";
            packageId = "log";
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "xkeysym";
            packageId = "xkeysym";
          }
        ];
        features = {
        };
        resolvedDefaultFeatures = [ "x11" ];
      };
      "xkeysym" = rec {
        crateName = "xkeysym";
        version = "0.2.1";
        edition = "2018";
        sha256 = "0mksx670cszyd7jln6s7dhkw11hdfv7blwwr3isq98k22ljh1k5r";
        authors = [
          "John Nunley <jtnunley01@gmail.com>"
        ];
        features = {
          "bytemuck" = [ "dep:bytemuck" ];
          "serde" = [ "dep:serde" ];
        };
      };
      "xml-rs" = rec {
        crateName = "xml-rs";
        version = "0.8.22";
        edition = "2021";
        crateBin = [ ];
        sha256 = "09pg779vjh0xp3ph10j4wy1ihz8pzvxm1qf1jqw0jnmsghpjwkmg";
        libName = "xml";
        authors = [
          "Vladimir Matveev <vmatveev@citrine.cc>"
        ];

      };
      "xmlparser" = rec {
        crateName = "xmlparser";
        version = "0.13.6";
        edition = "2018";
        sha256 = "1r796g21c70p983ax0j6rmhzmalg4rhx61mvd4farxdhfyvy1zk6";
        authors = [
          "Yevhenii Reizner <razrfalcon@gmail.com>"
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "zbus 3.15.2" = rec {
        crateName = "zbus";
        version = "3.15.2";
        edition = "2018";
        sha256 = "1ri5gklhh3kl9gywym95679xs7n3sw2j3ky80jcd8siacc5ifpb7";
        authors = [
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "async-broadcast";
            packageId = "async-broadcast 0.5.1";
          }
          {
            name = "async-executor";
            packageId = "async-executor";
            optional = true;
          }
          {
            name = "async-fs";
            packageId = "async-fs 1.6.0";
            optional = true;
          }
          {
            name = "async-io";
            packageId = "async-io 1.13.0";
            optional = true;
          }
          {
            name = "async-lock";
            packageId = "async-lock 2.8.0";
            optional = true;
          }
          {
            name = "async-process";
            packageId = "async-process 1.8.1";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "async-recursion";
            packageId = "async-recursion";
          }
          {
            name = "async-task";
            packageId = "async-task";
            optional = true;
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "blocking";
            packageId = "blocking";
            optional = true;
          }
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "derivative";
            packageId = "derivative";
          }
          {
            name = "enumflags2";
            packageId = "enumflags2";
            features = [ "serde" ];
          }
          {
            name = "event-listener";
            packageId = "event-listener 2.5.3";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [
              "sink"
              "std"
            ];
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "nix";
            packageId = "nix 0.26.4";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
            features = [
              "socket"
              "uio"
              "user"
            ];
          }
          {
            name = "once_cell";
            packageId = "once_cell";
          }
          {
            name = "ordered-stream";
            packageId = "ordered-stream";
          }
          {
            name = "rand";
            packageId = "rand";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_repr";
            packageId = "serde_repr";
          }
          {
            name = "sha1";
            packageId = "sha1";
            features = [ "std" ];
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "uds_windows";
            packageId = "uds_windows";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "winapi";
            packageId = "winapi";
            target = { target, features }: (target."windows" or false);
            features = [
              "handleapi"
              "iphlpapi"
              "memoryapi"
              "processthreadsapi"
              "sddl"
              "securitybaseapi"
              "synchapi"
              "tcpmib"
              "winbase"
              "winerror"
              "winsock2"
            ];
          }
          {
            name = "xdg-home";
            packageId = "xdg-home";
          }
          {
            name = "zbus_macros";
            packageId = "zbus_macros 3.15.2";
          }
          {
            name = "zbus_names";
            packageId = "zbus_names 2.6.1";
          }
          {
            name = "zvariant";
            packageId = "zvariant 3.15.2";
            usesDefaultFeatures = false;
            features = [ "enumflags2" ];
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
          }
        ];
        features = {
          "async-executor" = [ "dep:async-executor" ];
          "async-fs" = [ "dep:async-fs" ];
          "async-io" = [
            "dep:async-io"
            "async-executor"
            "async-task"
            "async-lock"
            "async-fs"
            "blocking"
            "futures-util/io"
          ];
          "async-lock" = [ "dep:async-lock" ];
          "async-task" = [ "dep:async-task" ];
          "blocking" = [ "dep:blocking" ];
          "chrono" = [ "zvariant/chrono" ];
          "default" = [ "async-io" ];
          "gvariant" = [ "zvariant/gvariant" ];
          "quick-xml" = [ "dep:quick-xml" ];
          "serde-xml-rs" = [ "dep:serde-xml-rs" ];
          "time" = [ "zvariant/time" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-vsock" = [
            "dep:tokio-vsock"
            "tokio"
          ];
          "url" = [ "zvariant/url" ];
          "uuid" = [ "zvariant/uuid" ];
          "vsock" = [
            "dep:vsock"
            "dep:async-io"
          ];
          "xml" = [ "serde-xml-rs" ];
        };
        resolvedDefaultFeatures = [
          "async-executor"
          "async-fs"
          "async-io"
          "async-lock"
          "async-task"
          "blocking"
        ];
      };
      "zbus 4.4.0" = rec {
        crateName = "zbus";
        version = "4.4.0";
        edition = "2021";
        sha256 = "09f7916lp7haxv1y5zgcg99ny15whi6dn3waf1afcafxx8mh35xv";
        authors = [
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "async-broadcast";
            packageId = "async-broadcast 0.7.1";
          }
          {
            name = "async-executor";
            packageId = "async-executor";
            optional = true;
          }
          {
            name = "async-fs";
            packageId = "async-fs 2.1.2";
            optional = true;
          }
          {
            name = "async-io";
            packageId = "async-io 2.3.4";
            optional = true;
          }
          {
            name = "async-lock";
            packageId = "async-lock 3.4.0";
            optional = true;
          }
          {
            name = "async-process";
            packageId = "async-process 2.3.0";
            target = { target, features }: ("macos" == target."os" or null);
          }
          {
            name = "async-recursion";
            packageId = "async-recursion";
            target = { target, features }: (("macos" == target."os" or null) || (target."windows" or false));
          }
          {
            name = "async-task";
            packageId = "async-task";
            optional = true;
          }
          {
            name = "async-trait";
            packageId = "async-trait";
          }
          {
            name = "blocking";
            packageId = "blocking";
            optional = true;
          }
          {
            name = "enumflags2";
            packageId = "enumflags2";
            features = [ "serde" ];
          }
          {
            name = "event-listener";
            packageId = "event-listener 5.3.1";
          }
          {
            name = "futures-core";
            packageId = "futures-core";
          }
          {
            name = "futures-sink";
            packageId = "futures-sink";
          }
          {
            name = "futures-util";
            packageId = "futures-util";
            usesDefaultFeatures = false;
            features = [
              "sink"
              "std"
            ];
          }
          {
            name = "hex";
            packageId = "hex";
          }
          {
            name = "nix";
            packageId = "nix 0.29.0";
            usesDefaultFeatures = false;
            target = { target, features }: (target."unix" or false);
            features = [
              "socket"
              "uio"
              "user"
            ];
          }
          {
            name = "ordered-stream";
            packageId = "ordered-stream";
          }
          {
            name = "rand";
            packageId = "rand";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "serde_repr";
            packageId = "serde_repr";
          }
          {
            name = "sha1";
            packageId = "sha1";
            features = [ "std" ];
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "tracing";
            packageId = "tracing";
          }
          {
            name = "uds_windows";
            packageId = "uds_windows";
            target = { target, features }: (target."windows" or false);
          }
          {
            name = "windows-sys";
            packageId = "windows-sys 0.52.0";
            target = { target, features }: (target."windows" or false);
            features = [
              "Win32_Foundation"
              "Win32_Security_Authorization"
              "Win32_System_Memory"
              "Win32_Networking"
              "Win32_Networking_WinSock"
              "Win32_NetworkManagement"
              "Win32_NetworkManagement_IpHelper"
              "Win32_System_Threading"
            ];
          }
          {
            name = "xdg-home";
            packageId = "xdg-home";
          }
          {
            name = "zbus_macros";
            packageId = "zbus_macros 4.4.0";
          }
          {
            name = "zbus_names";
            packageId = "zbus_names 3.0.0";
          }
          {
            name = "zvariant";
            packageId = "zvariant 4.2.0";
            usesDefaultFeatures = false;
            features = [ "enumflags2" ];
          }
        ];
        devDependencies = [
          {
            name = "futures-util";
            packageId = "futures-util";
          }
        ];
        features = {
          "async-executor" = [ "dep:async-executor" ];
          "async-fs" = [ "dep:async-fs" ];
          "async-io" = [
            "dep:async-io"
            "async-executor"
            "async-task"
            "async-lock"
            "async-fs"
            "blocking"
            "futures-util/io"
          ];
          "async-lock" = [ "dep:async-lock" ];
          "async-task" = [ "dep:async-task" ];
          "blocking" = [ "dep:blocking" ];
          "bus-impl" = [ "p2p" ];
          "chrono" = [ "zvariant/chrono" ];
          "default" = [ "async-io" ];
          "heapless" = [ "zvariant/heapless" ];
          "option-as-array" = [ "zvariant/option-as-array" ];
          "time" = [ "zvariant/time" ];
          "tokio" = [ "dep:tokio" ];
          "tokio-vsock" = [
            "dep:tokio-vsock"
            "tokio"
          ];
          "url" = [ "zvariant/url" ];
          "uuid" = [ "zvariant/uuid" ];
          "vsock" = [
            "dep:vsock"
            "dep:async-io"
          ];
        };
        resolvedDefaultFeatures = [
          "async-executor"
          "async-fs"
          "async-io"
          "async-lock"
          "async-task"
          "blocking"
          "url"
        ];
      };
      "zbus_macros 3.15.2" = rec {
        crateName = "zbus_macros";
        version = "3.15.2";
        edition = "2018";
        sha256 = "19g0d7d4b8l8ycw498sz8pwkplv300j31i9hnihq0zl81xxljcbi";
        procMacro = true;
        authors = [
          "Marc-André Lureau <marcandre.lureau@redhat.com>"
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 1.3.1";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "regex";
            packageId = "regex";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [
              "extra-traits"
              "fold"
              "full"
            ];
          }
          {
            name = "zvariant_utils";
            packageId = "zvariant_utils 1.0.1";
          }
        ];

      };
      "zbus_macros 4.4.0" = rec {
        crateName = "zbus_macros";
        version = "4.4.0";
        edition = "2021";
        sha256 = "0glqn6ddgv4ra734p343a41rrxb0phy1v13dljzhpsc1f10bjz96";
        procMacro = true;
        authors = [
          "Marc-André Lureau <marcandre.lureau@redhat.com>"
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.2.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [
              "extra-traits"
              "fold"
              "full"
            ];
          }
          {
            name = "zvariant_utils";
            packageId = "zvariant_utils 2.1.0";
          }
        ];

      };
      "zbus_names 2.6.1" = rec {
        crateName = "zbus_names";
        version = "2.6.1";
        edition = "2018";
        sha256 = "13achs6jbrp4l0jy5m6nn7v89clfgb63qhldkg5ddgjh6y6p6za3";
        authors = [
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "zvariant";
            packageId = "zvariant 3.15.2";
            usesDefaultFeatures = false;
            features = [ "enumflags2" ];
          }
        ];

      };
      "zbus_names 3.0.0" = rec {
        crateName = "zbus_names";
        version = "3.0.0";
        edition = "2021";
        sha256 = "0v1f0ajwafj47bf11yp0xdgp26r93lslr9nb2v6624h2gppiz6sb";
        authors = [
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "zvariant";
            packageId = "zvariant 4.2.0";
            usesDefaultFeatures = false;
            features = [ "enumflags2" ];
          }
        ];

      };
      "zerocopy" = rec {
        crateName = "zerocopy";
        version = "0.7.35";
        edition = "2018";
        sha256 = "1w36q7b9il2flg0qskapgi9ymgg7p985vniqd09vi0mwib8lz6qv";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
            optional = true;
            usesDefaultFeatures = false;
          }
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            optional = true;
          }
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
            target = { target, features }: false;
          }
        ];
        devDependencies = [
          {
            name = "zerocopy-derive";
            packageId = "zerocopy-derive";
          }
        ];
        features = {
          "__internal_use_only_features_that_work_on_stable" = [
            "alloc"
            "derive"
            "simd"
          ];
          "byteorder" = [ "dep:byteorder" ];
          "default" = [ "byteorder" ];
          "derive" = [ "zerocopy-derive" ];
          "simd-nightly" = [ "simd" ];
          "zerocopy-derive" = [ "dep:zerocopy-derive" ];
        };
        resolvedDefaultFeatures = [
          "byteorder"
          "default"
          "derive"
          "simd"
          "zerocopy-derive"
        ];
      };
      "zerocopy-derive" = rec {
        crateName = "zerocopy-derive";
        version = "0.7.35";
        edition = "2018";
        sha256 = "0gnf2ap2y92nwdalzz3x7142f2b83sni66l39vxp2ijd6j080kzs";
        procMacro = true;
        libName = "zerocopy_derive";
        authors = [
          "Joshua Liebow-Feeser <joshlf@google.com>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
          }
        ];

      };
      "zorder" = rec {
        crateName = "zorder";
        version = "0.2.2";
        edition = "2021";
        sha256 = "00gv4v0nqq048m93z6fw1bvajxp2k2nmkm2icf0q7pnrhx577a0y";
        authors = [
          "Elias Kauppi"
        ];
        dependencies = [
          {
            name = "num-traits";
            packageId = "num-traits";
            usesDefaultFeatures = false;
          }
        ];
        features = {
          "default" = [ "std" ];
        };
        resolvedDefaultFeatures = [
          "default"
          "std"
        ];
      };
      "zvariant 3.15.2" = rec {
        crateName = "zvariant";
        version = "3.15.2";
        edition = "2018";
        sha256 = "1nxj9x187jl32fd32zvq8hfn6lyq3kjadb2q7f6kb6x0igl2pvsf";
        authors = [
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "byteorder";
            packageId = "byteorder";
          }
          {
            name = "enumflags2";
            packageId = "enumflags2";
            optional = true;
            features = [ "serde" ];
          }
          {
            name = "libc";
            packageId = "libc";
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "zvariant_derive";
            packageId = "zvariant_derive 3.15.2";
          }
        ];
        features = {
          "arrayvec" = [ "dep:arrayvec" ];
          "chrono" = [ "dep:chrono" ];
          "default" = [ "gvariant" ];
          "enumflags2" = [ "dep:enumflags2" ];
          "ostree-tests" = [ "gvariant" ];
          "serde_bytes" = [ "dep:serde_bytes" ];
          "time" = [ "dep:time" ];
          "url" = [ "dep:url" ];
          "uuid" = [ "dep:uuid" ];
        };
        resolvedDefaultFeatures = [ "enumflags2" ];
      };
      "zvariant 4.2.0" = rec {
        crateName = "zvariant";
        version = "4.2.0";
        edition = "2021";
        sha256 = "1zl1ika7zd9bxkd0bqc78h9bykvk6xc98965iz1p3i51p452k110";
        authors = [
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "endi";
            packageId = "endi";
          }
          {
            name = "enumflags2";
            packageId = "enumflags2";
            optional = true;
            features = [ "serde" ];
          }
          {
            name = "serde";
            packageId = "serde";
            features = [ "derive" ];
          }
          {
            name = "static_assertions";
            packageId = "static_assertions";
          }
          {
            name = "url";
            packageId = "url";
            optional = true;
            features = [ "serde" ];
          }
          {
            name = "zvariant_derive";
            packageId = "zvariant_derive 4.2.0";
          }
        ];
        features = {
          "arrayvec" = [ "dep:arrayvec" ];
          "chrono" = [ "dep:chrono" ];
          "enumflags2" = [ "dep:enumflags2" ];
          "heapless" = [ "dep:heapless" ];
          "ostree-tests" = [ "gvariant" ];
          "serde_bytes" = [ "dep:serde_bytes" ];
          "time" = [ "dep:time" ];
          "url" = [ "dep:url" ];
          "uuid" = [ "dep:uuid" ];
        };
        resolvedDefaultFeatures = [
          "enumflags2"
          "url"
        ];
      };
      "zvariant_derive 3.15.2" = rec {
        crateName = "zvariant_derive";
        version = "3.15.2";
        edition = "2018";
        sha256 = "1nbydrkawjwxan12vy79qsrn7gwc483mpfzqs685ybyppv04vhip";
        procMacro = true;
        authors = [
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 1.3.1";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [
              "extra-traits"
              "full"
            ];
          }
          {
            name = "zvariant_utils";
            packageId = "zvariant_utils 1.0.1";
          }
        ];

      };
      "zvariant_derive 4.2.0" = rec {
        crateName = "zvariant_derive";
        version = "4.2.0";
        edition = "2021";
        sha256 = "0jf408h0s83krxwm7wl62fnssin1kcklmb1bcn83ls6sddabmqkk";
        procMacro = true;
        authors = [
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
        ];
        dependencies = [
          {
            name = "proc-macro-crate";
            packageId = "proc-macro-crate 3.2.0";
          }
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [
              "extra-traits"
              "full"
            ];
          }
          {
            name = "zvariant_utils";
            packageId = "zvariant_utils 2.1.0";
          }
        ];

      };
      "zvariant_utils 1.0.1" = rec {
        crateName = "zvariant_utils";
        version = "1.0.1";
        edition = "2018";
        sha256 = "00625h3240rixvfhq6yhws1d4bwf3vrf74v8s69b97aq27cg0d3j";
        authors = [
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
          "turbocooler <turbocooler@cocaine.ninja>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 1.0.109";
            features = [
              "extra-traits"
              "full"
            ];
          }
        ];

      };
      "zvariant_utils 2.1.0" = rec {
        crateName = "zvariant_utils";
        version = "2.1.0";
        edition = "2021";
        sha256 = "0h43h3jcw8rmjr390rdqnhkb9nn3913pgkvb75am1frxrkvwy6y5";
        authors = [
          "Zeeshan Ali Khan <zeeshanak@gnome.org>"
          "turbocooler <turbocooler@cocaine.ninja>"
        ];
        dependencies = [
          {
            name = "proc-macro2";
            packageId = "proc-macro2";
          }
          {
            name = "quote";
            packageId = "quote";
          }
          {
            name = "syn";
            packageId = "syn 2.0.77";
            features = [
              "extra-traits"
              "full"
            ];
          }
        ];

      };
    };

    #
    # crate2nix/default.nix (excerpt start)
    #

    /*
      Target (platform) data for conditional dependencies.
      This corresponds roughly to what buildRustCrate is setting.
    */
    makeDefaultTarget = platform: {
      name = platform.rust.rustcTarget;

      unix = platform.isUnix;
      windows = platform.isWindows;
      fuchsia = true;
      test = false;

      inherit (platform.rust.platform)
        arch
        os
        vendor
        ;
      family = platform.rust.platform.target-family;
      env = "gnu";
      endian = if platform.parsed.cpu.significantByte.name == "littleEndian" then "little" else "big";
      pointer_width = toString platform.parsed.cpu.bits;
      debug_assertions = false;
    };

    registryUrl =
      {
        registries,
        url,
        crate,
        version,
        sha256,
      }:
      let
        dl = registries.${url}.dl;
        tmpl = [
          "{crate}"
          "{version}"
          "{prefix}"
          "{lowerprefix}"
          "{sha256-checksum}"
        ];
      in
      with lib.strings;
      if lib.lists.any (i: hasInfix "{}" dl) tmpl then
        let
          prefix =
            if builtins.stringLength crate == 1 then
              "1"
            else if builtins.stringLength crate == 2 then
              "2"
            else
              "${builtins.substring 0 2 crate}/${builtins.substring 2 (builtins.stringLength crate - 2) crate}";
        in
        builtins.replaceStrings tmpl [
          crate
          version
          prefix
          (lib.strings.toLower prefix)
          sha256
        ]
      else
        "${dl}/${crate}/${version}/download";

    # Filters common temp files and build files.
    # TODO(pkolloch): Substitute with gitignore filter
    sourceFilter =
      name: type:
      let
        baseName = builtins.baseNameOf (builtins.toString name);
      in
      !(
        # Filter out git
        baseName == ".gitignore"
        || (type == "directory" && baseName == ".git")

        # Filter out build results
        || (
          type == "directory"
          && (
            baseName == "target"
            || baseName == "_site"
            || baseName == ".sass-cache"
            || baseName == ".jekyll-metadata"
            || baseName == "build-artifacts"
          )
        )

        # Filter out nix-build result symlinks
        || (type == "symlink" && lib.hasPrefix "result" baseName)

        # Filter out IDE config
        || (type == "directory" && (baseName == ".idea" || baseName == ".vscode"))
        || lib.hasSuffix ".iml" baseName

        # Filter out nix build files
        || baseName == "Cargo.nix"

        # Filter out editor backup / swap files.
        || lib.hasSuffix "~" baseName
        || builtins.match "^\\.sw[a-z]$$" baseName != null
        || builtins.match "^\\..*\\.sw[a-z]$$" baseName != null
        || lib.hasSuffix ".tmp" baseName
        || lib.hasSuffix ".bak" baseName
        || baseName == "tests.nix"
      );

    /*
      Returns a crate which depends on successful test execution
      of crate given as the second argument.

      testCrateFlags: list of flags to pass to the test exectuable
      testInputs: list of packages that should be available during test execution
    */
    crateWithTest =
      {
        crate,
        testCrate,
        testCrateFlags,
        testInputs,
        testPreRun,
        testPostRun,
      }:
      assert builtins.typeOf testCrateFlags == "list";
      assert builtins.typeOf testInputs == "list";
      assert builtins.typeOf testPreRun == "string";
      assert builtins.typeOf testPostRun == "string";
      let
        # override the `crate` so that it will build and execute tests instead of
        # building the actual lib and bin targets We just have to pass `--test`
        # to rustc and it will do the right thing.  We execute the tests and copy
        # their log and the test executables to $out for later inspection.
        test =
          let
            drv = testCrate.override (_: {
              buildTests = true;
            });
            # If the user hasn't set any pre/post commands, we don't want to
            # insert empty lines. This means that any existing users of crate2nix
            # don't get a spurious rebuild unless they set these explicitly.
            testCommand = pkgs.lib.concatStringsSep "\n" (
              pkgs.lib.filter (s: s != "") [
                testPreRun
                "$f $testCrateFlags 2>&1 | tee -a $out"
                testPostRun
              ]
            );
          in
          pkgs.stdenvNoCC.mkDerivation {
            name = "run-tests-${testCrate.name}";

            inherit (crate) src;

            inherit testCrateFlags;

            buildInputs = testInputs;

            buildPhase = ''
              set -e
              export RUST_BACKTRACE=1

              # build outputs
              testRoot=target/debug
              mkdir -p $testRoot

              # executables of the crate
              # we copy to prevent std::env::current_exe() to resolve to a store location
              for i in ${crate}/bin/*; do
                cp "$i" "$testRoot"
              done
              chmod +w -R .

              # test harness executables are suffixed with a hash, like cargo does
              # this allows to prevent name collision with the main
              # executables of the crate
              hash=$(basename $out)
              for file in ${drv}/tests/*; do
                f=$testRoot/$(basename $file)-$hash
                cp $file $f
                ${testCommand}
              done
            '';
          };
      in
      pkgs.runCommand "${crate.name}-linked"
        {
          inherit (crate) outputs crateName;
          passthru = (crate.passthru or { }) // {
            inherit test;
          };
        }
        (
          lib.optionalString (stdenv.buildPlatform.canExecute stdenv.hostPlatform) ''
            echo tested by ${test}
          ''
          + ''
            ${lib.concatMapStringsSep "\n" (output: "ln -s ${crate.${output}} ${"$"}${output}") crate.outputs}
          ''
        );

    # A restricted overridable version of builtRustCratesWithFeatures.
    buildRustCrateWithFeatures =
      {
        packageId,
        features ? rootFeatures,
        crateOverrides ? defaultCrateOverrides,
        buildRustCrateForPkgsFunc ? null,
        runTests ? false,
        testCrateFlags ? [ ],
        testInputs ? [ ],
        # Any command to run immediatelly before a test is executed.
        testPreRun ? "",
        # Any command run immediatelly after a test is executed.
        testPostRun ? "",
      }:
      lib.makeOverridable
        (
          {
            features,
            crateOverrides,
            runTests,
            testCrateFlags,
            testInputs,
            testPreRun,
            testPostRun,
          }:
          let
            buildRustCrateForPkgsFuncOverriden =
              if buildRustCrateForPkgsFunc != null then
                buildRustCrateForPkgsFunc
              else
                (
                  if crateOverrides == pkgs.defaultCrateOverrides then
                    buildRustCrateForPkgs
                  else
                    pkgs:
                    (buildRustCrateForPkgs pkgs).override {
                      defaultCrateOverrides = crateOverrides;
                    }
                );
            builtRustCrates = builtRustCratesWithFeatures {
              inherit packageId features;
              buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
              runTests = false;
            };
            builtTestRustCrates = builtRustCratesWithFeatures {
              inherit packageId features;
              buildRustCrateForPkgsFunc = buildRustCrateForPkgsFuncOverriden;
              runTests = true;
            };
            drv = builtRustCrates.crates.${packageId};
            testDrv = builtTestRustCrates.crates.${packageId};
            derivation =
              if runTests then
                crateWithTest {
                  crate = drv;
                  testCrate = testDrv;
                  inherit
                    testCrateFlags
                    testInputs
                    testPreRun
                    testPostRun
                    ;
                }
              else
                drv;
          in
          derivation
        )
        {
          inherit
            features
            crateOverrides
            runTests
            testCrateFlags
            testInputs
            testPreRun
            testPostRun
            ;
        };

    /*
      Returns an attr set with packageId mapped to the result of buildRustCrateForPkgsFunc
      for the corresponding crate.
    */
    builtRustCratesWithFeatures =
      {
        packageId,
        features,
        crateConfigs ? crates,
        buildRustCrateForPkgsFunc,
        runTests,
        makeTarget ? makeDefaultTarget,
      }@args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isList features);
      assert (builtins.isAttrs (makeTarget stdenv.hostPlatform));
      assert (builtins.isBool runTests);
      let
        rootPackageId = packageId;
        mergedFeatures = mergePackageFeatures (
          args
          // {
            inherit rootPackageId;
            target = makeTarget stdenv.hostPlatform // {
              test = runTests;
            };
          }
        );
        # Memoize built packages so that reappearing packages are only built once.
        builtByPackageIdByPkgs = mkBuiltByPackageIdByPkgs pkgs;
        mkBuiltByPackageIdByPkgs =
          pkgs:
          let
            self = {
              crates = lib.mapAttrs (
                packageId: value: buildByPackageIdForPkgsImpl self pkgs packageId
              ) crateConfigs;
              target = makeTarget pkgs.stdenv.hostPlatform;
              build = mkBuiltByPackageIdByPkgs pkgs.buildPackages;
            };
          in
          self;
        buildByPackageIdForPkgsImpl =
          self: pkgs: packageId:
          let
            features = mergedFeatures."${packageId}" or [ ];
            crateConfig' = crateConfigs."${packageId}";
            crateConfig = builtins.removeAttrs crateConfig' [
              "resolvedDefaultFeatures"
              "devDependencies"
            ];
            devDependencies = lib.optionals (runTests && packageId == rootPackageId) (
              crateConfig'.devDependencies or [ ]
            );
            dependencies = dependencyDerivations {
              inherit features;
              inherit (self) target;
              buildByPackageId =
                depPackageId:
                # proc_macro crates must be compiled for the build architecture
                if crateConfigs.${depPackageId}.procMacro or false then
                  self.build.crates.${depPackageId}
                else
                  self.crates.${depPackageId};
              dependencies = (crateConfig.dependencies or [ ]) ++ devDependencies;
            };
            buildDependencies = dependencyDerivations {
              inherit features;
              inherit (self.build) target;
              buildByPackageId = depPackageId: self.build.crates.${depPackageId};
              dependencies = crateConfig.buildDependencies or [ ];
            };
            dependenciesWithRenames =
              let
                buildDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self) target;
                  dependencies = crateConfig.dependencies or [ ] ++ devDependencies;
                };
                hostDeps = filterEnabledDependencies {
                  inherit features;
                  inherit (self.build) target;
                  dependencies = crateConfig.buildDependencies or [ ];
                };
              in
              lib.filter (d: d ? "rename") (hostDeps ++ buildDeps);
            # Crate renames have the form:
            #
            # {
            #    crate_name = [
            #       { version = "1.2.3"; rename = "crate_name01"; }
            #    ];
            #    # ...
            # }
            crateRenames =
              let
                grouped = lib.groupBy (dependency: dependency.name) dependenciesWithRenames;
                versionAndRename =
                  dep:
                  let
                    package = crateConfigs."${dep.packageId}";
                  in
                  {
                    inherit (dep) rename;
                    inherit (package) version;
                  };
              in
              lib.mapAttrs (name: builtins.map versionAndRename) grouped;
          in
          buildRustCrateForPkgsFunc pkgs (
            crateConfig
            // {
              src =
                crateConfig.src or (pkgs.fetchurl rec {
                  name = "${crateConfig.crateName}-${crateConfig.version}.tar.gz";
                  # https://www.pietroalbini.org/blog/downloading-crates-io/
                  # Not rate-limited, CDN URL.
                  url = "https://static.crates.io/crates/${crateConfig.crateName}/${crateConfig.crateName}-${crateConfig.version}.crate";
                  sha256 =
                    assert (lib.assertMsg (crateConfig ? sha256) "Missing sha256 for ${name}");
                    crateConfig.sha256;
                });
              extraRustcOpts =
                lib.lists.optional (targetFeatures != [ ])
                  "-C target-feature=${lib.concatMapStringsSep "," (x: "+${x}") targetFeatures}";
              inherit
                features
                dependencies
                buildDependencies
                crateRenames
                release
                ;
            }
          );
      in
      builtByPackageIdByPkgs;

    # Returns the actual derivations for the given dependencies.
    dependencyDerivations =
      {
        buildByPackageId,
        features,
        dependencies,
        target,
      }:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      assert (builtins.isAttrs target);
      let
        enabledDependencies = filterEnabledDependencies {
          inherit dependencies features target;
        };
        depDerivation = dependency: buildByPackageId dependency.packageId;
      in
      map depDerivation enabledDependencies;

    /*
      Returns a sanitized version of val with all values substituted that cannot
      be serialized as JSON.
    */
    sanitizeForJson =
      val:
      if builtins.isAttrs val then
        lib.mapAttrs (n: sanitizeForJson) val
      else if builtins.isList val then
        builtins.map sanitizeForJson val
      else if builtins.isFunction val then
        "function"
      else
        val;

    # Returns various tools to debug a crate.
    debugCrate =
      {
        packageId,
        target ? makeDefaultTarget stdenv.hostPlatform,
      }:
      assert (builtins.isString packageId);
      let
        debug = rec {
          # The built tree as passed to buildRustCrate.
          buildTree = buildRustCrateWithFeatures {
            buildRustCrateForPkgsFunc = _: lib.id;
            inherit packageId;
          };
          sanitizedBuildTree = sanitizeForJson buildTree;
          dependencyTree = sanitizeForJson (buildRustCrateWithFeatures {
            buildRustCrateForPkgsFunc = _: crate: {
              "01_crateName" = crate.crateName or false;
              "02_features" = crate.features or [ ];
              "03_dependencies" = crate.dependencies or [ ];
            };
            inherit packageId;
          });
          mergedPackageFeatures = mergePackageFeatures {
            features = rootFeatures;
            inherit packageId target;
          };
          diffedDefaultPackageFeatures = diffDefaultPackageFeatures {
            inherit packageId target;
          };
        };
      in
      {
        internal = debug;
      };

    /*
      Returns differences between cargo default features and crate2nix default
      features.

      This is useful for verifying the feature resolution in crate2nix.
    */
    diffDefaultPackageFeatures =
      {
        crateConfigs ? crates,
        packageId,
        target,
      }:
      assert (builtins.isAttrs crateConfigs);
      let
        prefixValues = prefix: lib.mapAttrs (n: v: { "${prefix}" = v; });
        mergedFeatures = prefixValues "crate2nix" (mergePackageFeatures {
          inherit crateConfigs packageId target;
          features = [ "default" ];
        });
        configs = prefixValues "cargo" crateConfigs;
        combined = lib.foldAttrs (a: b: a // b) { } [
          mergedFeatures
          configs
        ];
        onlyInCargo = builtins.attrNames (
          lib.filterAttrs (n: v: !(v ? "crate2nix") && (v ? "cargo")) combined
        );
        onlyInCrate2Nix = builtins.attrNames (
          lib.filterAttrs (n: v: (v ? "crate2nix") && !(v ? "cargo")) combined
        );
        differentFeatures = lib.filterAttrs (
          n: v:
          (v ? "crate2nix")
          && (v ? "cargo")
          && (v.crate2nix.features or [ ]) != (v."cargo".resolved_default_features or [ ])
        ) combined;
      in
      builtins.toJSON {
        inherit onlyInCargo onlyInCrate2Nix differentFeatures;
      };

    /*
      Returns an attrset mapping packageId to the list of enabled features.

      If multiple paths to a dependency enable different features, the
      corresponding feature sets are merged. Features in rust are additive.
    */
    mergePackageFeatures =
      {
        crateConfigs ? crates,
        packageId,
        rootPackageId ? packageId,
        features ? rootFeatures,
        dependencyPath ? [ crates.${packageId}.crateName ],
        featuresByPackageId ? { },
        target,
        # Adds devDependencies to the crate with rootPackageId.
        runTests ? false,
        ...
      }@args:
      assert (builtins.isAttrs crateConfigs);
      assert (builtins.isString packageId);
      assert (builtins.isString rootPackageId);
      assert (builtins.isList features);
      assert (builtins.isList dependencyPath);
      assert (builtins.isAttrs featuresByPackageId);
      assert (builtins.isAttrs target);
      assert (builtins.isBool runTests);
      let
        crateConfig = crateConfigs."${packageId}" or (builtins.throw "Package not found: ${packageId}");
        expandedFeatures = expandFeatures (crateConfig.features or { }) features;
        enabledFeatures = enableFeatures (crateConfig.dependencies or [ ]) expandedFeatures;
        depWithResolvedFeatures =
          dependency:
          let
            inherit (dependency) packageId;
            features = dependencyFeatures enabledFeatures dependency;
          in
          {
            inherit packageId features;
          };
        resolveDependencies =
          cache: path: dependencies:
          assert (builtins.isAttrs cache);
          assert (builtins.isList dependencies);
          let
            enabledDependencies = filterEnabledDependencies {
              inherit dependencies target;
              features = enabledFeatures;
            };
            directDependencies = map depWithResolvedFeatures enabledDependencies;
            foldOverCache = op: lib.foldl op cache directDependencies;
          in
          foldOverCache (
            cache:
            { packageId, features }:
            let
              cacheFeatures = cache.${packageId} or [ ];
              combinedFeatures = sortedUnique (cacheFeatures ++ features);
            in
            if cache ? ${packageId} && cache.${packageId} == combinedFeatures then
              cache
            else
              mergePackageFeatures {
                features = combinedFeatures;
                featuresByPackageId = cache;
                inherit
                  crateConfigs
                  packageId
                  target
                  runTests
                  rootPackageId
                  ;
              }
          );
        cacheWithSelf =
          let
            cacheFeatures = featuresByPackageId.${packageId} or [ ];
            combinedFeatures = sortedUnique (cacheFeatures ++ enabledFeatures);
          in
          featuresByPackageId
          // {
            "${packageId}" = combinedFeatures;
          };
        cacheWithDependencies = resolveDependencies cacheWithSelf "dep" (
          crateConfig.dependencies or [ ]
          ++ lib.optionals (runTests && packageId == rootPackageId) (crateConfig.devDependencies or [ ])
        );
        cacheWithAll = resolveDependencies cacheWithDependencies "build" (
          crateConfig.buildDependencies or [ ]
        );
      in
      cacheWithAll;

    # Returns the enabled dependencies given the enabled features.
    filterEnabledDependencies =
      {
        dependencies,
        features,
        target,
      }:
      assert (builtins.isList dependencies);
      assert (builtins.isList features);
      assert (builtins.isAttrs target);

      lib.filter (
        dep:
        let
          targetFunc = dep.target or (features: true);
        in
        targetFunc { inherit features target; }
        && (!(dep.optional or false) || builtins.any (doesFeatureEnableDependency dep) features)
      ) dependencies;

    # Returns whether the given feature should enable the given dependency.
    doesFeatureEnableDependency =
      dependency: feature:
      let
        name = dependency.rename or dependency.name;
        prefix = "${name}/";
        len = builtins.stringLength prefix;
        startsWithPrefix = builtins.substring 0 len feature == prefix;
      in
      feature == name || feature == "dep:" + name || startsWithPrefix;

    /*
      Returns the expanded features for the given inputFeatures by applying the
      rules in featureMap.

      featureMap is an attribute set which maps feature names to lists of further
      feature names to enable in case this feature is selected.
    */
    expandFeatures =
      featureMap: inputFeatures:
      assert (builtins.isAttrs featureMap);
      assert (builtins.isList inputFeatures);
      let
        expandFeaturesNoCycle =
          oldSeen: inputFeatures:
          if inputFeatures != [ ] then
            let
              # The feature we're currently expanding.
              feature = builtins.head inputFeatures;
              # All the features we've seen/expanded so far, including the one
              # we're currently processing.
              seen = oldSeen // {
                ${feature} = 1;
              };
              # Expand the feature but be careful to not re-introduce a feature
              # that we've already seen: this can easily cause a cycle, see issue
              # #209.
              enables = builtins.filter (f: !(seen ? "${f}")) (featureMap."${feature}" or [ ]);
            in
            [ feature ] ++ (expandFeaturesNoCycle seen (builtins.tail inputFeatures ++ enables))
          # No more features left, nothing to expand to.
          else
            [ ];
        outFeatures = expandFeaturesNoCycle { } inputFeatures;
      in
      sortedUnique outFeatures;

    /*
      This function adds optional dependencies as features if they are enabled
      indirectly by dependency features. This function mimics Cargo's behavior
      described in a note at:
      https://doc.rust-lang.org/nightly/cargo/reference/features.html#dependency-features
    */
    enableFeatures =
      dependencies: features:
      assert (builtins.isList features);
      assert (builtins.isList dependencies);
      let
        additionalFeatures = lib.concatMap (
          dependency:
          assert (builtins.isAttrs dependency);
          let
            enabled = builtins.any (doesFeatureEnableDependency dependency) features;
          in
          if (dependency.optional or false) && enabled then
            [ (dependency.rename or dependency.name) ]
          else
            [ ]
        ) dependencies;
      in
      sortedUnique (features ++ additionalFeatures);

    /*
      Returns the actual features for the given dependency.

      features: The features of the crate that refers this dependency.
    */
    dependencyFeatures =
      features: dependency:
      assert (builtins.isList features);
      assert (builtins.isAttrs dependency);
      let
        defaultOrNil = if dependency.usesDefaultFeatures or true then [ "default" ] else [ ];
        explicitFeatures = dependency.features or [ ];
        additionalDependencyFeatures =
          let
            name = dependency.rename or dependency.name;
            stripPrefixMatch = prefix: s: if lib.hasPrefix prefix s then lib.removePrefix prefix s else null;
            extractFeature =
              feature:
              lib.findFirst (f: f != null) null (
                map (prefix: stripPrefixMatch prefix feature) [
                  (name + "/")
                  (name + "?/")
                ]
              );
            dependencyFeatures = lib.filter (f: f != null) (map extractFeature features);
          in
          dependencyFeatures;
      in
      defaultOrNil ++ explicitFeatures ++ additionalDependencyFeatures;

    # Sorts and removes duplicates from a list of strings.
    sortedUnique =
      features:
      assert (builtins.isList features);
      assert (builtins.all builtins.isString features);
      let
        outFeaturesSet = lib.foldl (set: feature: set // { "${feature}" = 1; }) { } features;
        outFeaturesUnique = builtins.attrNames outFeaturesSet;
      in
      builtins.sort (a: b: a < b) outFeaturesUnique;

    deprecationWarning =
      message: value:
      if strictDeprecation then
        builtins.throw "strictDeprecation enabled, aborting: ${message}"
      else
        builtins.trace message value;

    #
    # crate2nix/default.nix (excerpt end)
    #
  };
}
